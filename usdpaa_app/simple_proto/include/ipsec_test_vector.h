/* Copyright 2013 Freescale Semiconductor, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Freescale Semiconductor nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 *
 * ALTERNATIVELY, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") as published by the Free Software
 * Foundation, either version 2 of that License or (at your option) any
 * later version.
 *
 * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef IPSEC_TEST_VECTOR_H_
#define IPSEC_TEST_VECTOR_H_

#include <inttypes.h>
#include <usdpaa/compat.h>

/**
 * Structure which defines an IPSEC test vector.
 */
struct ipsec_ref_vector_s {
	union {
		uintptr_t key;			/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	unsigned char cipher_alg;
	unsigned short cipher_keylen;
	unsigned char auth_alg;
	union {
		uintptr_t auth_key;		/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_auth_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	unsigned short auth_keylen;
	uint32_t length;
	uint8_t *plaintext;
	uint8_t *ciphertext;
	/*
	 * NOTE: Keep members above unchanged!
	 */
	struct ipsec_encap_pdb *e_pdb;
	struct ipsec_decap_pdb *d_pdb;
	unsigned short block_size;
	unsigned short iv_size;
	unsigned short pad_size;
	unsigned short icv_size;
	uint8_t *iphdr;			/**< IP header for the encapsulation
					     input data in performance mode. */
	uint16_t cipher_alginfo;
	uint16_t auth_alginfo;
};

/*
 * The IPsec 3DES-CBC & HMAC-MD5-96 test vectors were generated by using the
 * 3DES-CBC and HMAC-MD5 algorithm descriptors with simple_crypto application.
 */
static uint8_t *ipsec_test_data_in[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	(uint8_t[]){0x45, 0x00, 0x00, 0x40, 0xfe, 0xed, 0x00, 0x00, 0x7f, 0x01,
		    0x00, 0x00, 0xc0, 0xa8, 0x01, 0x65, 0xc0, 0xa8, 0x64, 0x7c,
		    0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d,
		    0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
		    0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31,
		    0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b,
		    0x3c, 0x3d, 0x3e, 0x3f}
};

static uint8_t *ipsec_test_data_out[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	(uint8_t[]){0x45, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x78, 0x32,
		    0x21, 0x08, 0xc8, 0xc8, 0xc8, 0x14, 0xc8, 0xc8, 0xc8, 0x0a,
		    0x00, 0x01, 0xfe, 0xed, 0x00, 0x00, 0xbe, 0xef, 0x14, 0x14,
		    0x14, 0x14, 0x17, 0x17, 0x17, 0x17, 0xde, 0xf3, 0x71, 0x2c,
		    0xab, 0x71, 0x83, 0xaa, 0xa0, 0x5e, 0x95, 0x74, 0xc1, 0xe6,
		    0x12, 0x12, 0xaa, 0xf2, 0x02, 0x8c, 0xe7, 0x30, 0x6b, 0x6c,
		    0x40, 0xd0, 0x19, 0xe5, 0x3d, 0xc3, 0xd4, 0x3d, 0xc4, 0x33,
		    0x18, 0xb3, 0xd6, 0x7d, 0xc9, 0x3a, 0x0a, 0x37, 0xff, 0xbc,
		    0x28, 0x51, 0x1d, 0xc0, 0x2b, 0xa1, 0xbc, 0x10, 0xad, 0xad,
		    0x8c, 0x2f, 0x02, 0xaa, 0xe6, 0xa5, 0x14, 0x75, 0x58, 0x0b,
		    0x16, 0x1e, 0xdf, 0xce, 0xb3, 0xfa, 0x47, 0xf5, 0xc9, 0x01,
		    0x9c, 0xfe, 0x57, 0x89, 0x24, 0x3c, 0xc3, 0x59, 0xc7, 0x82}
};

static uint32_t ipsec_test_data_in_len[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	64,
};

static uint8_t *ipsec_test_cipher_key[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	(uint8_t[]){0x62, 0x7f, 0x46, 0x0e, 0x08, 0x10, 0x4a, 0x10, 0x29, 0x2a,
		    0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x43, 0xcd, 0x26, 0x5d,
		    0x58, 0x40, 0xea, 0xf1}
};

static uint32_t ipsec_test_cipher_keylen[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	24
};

static uint8_t *ipsec_test_auth_key[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	(uint8_t[]){0x32, 0xf4, 0xfb, 0x12, 0x4a, 0xc4, 0x21, 0x2b, 0x2c, 0x1a,
		    0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x43, 0xcd, 0x26, 0x5d,
		    0x62, 0x7f, 0x46, 0x0e, 0x08, 0x10, 0x4a, 0x10, 0x29, 0x2a,
		    0xfe, 0xed}
};

static uint32_t ipsec_test_auth_keylen[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	32
};

static uint8_t *ipsec_opt_ip_hdr[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	(uint8_t[]){0x45, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x78, 0x32,
		    0x21, 0x08, 0xc8, 0xc8, 0xc8, 0x14, 0xc8, 0xc8, 0xc8, 0x0a}
};

static uint32_t ipsec_opt_ip_hdr_len[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	sizeof(struct iphdr)
};

static uint8_t *ipsec_test_iv[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	(uint8_t[]) {0x14, 0x14, 0x14, 0x14, 0x17, 0x17, 0x17, 0x17}
};

static uint32_t ipsec_test_spi[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	0x001feed
};

static uint32_t ipsec_test_seq_num[] = {
	/* IPsec 3DES-CBC & HMAC-MD5-96 */
	0x0000beef
};

#endif /* IPSEC_TEST_VECTOR_H_ */
