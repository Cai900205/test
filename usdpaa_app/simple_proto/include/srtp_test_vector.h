/* Copyright 2013 Freescale Semiconductor, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *	 notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *	 notice, this list of conditions and the following disclaimer in the
 *	 documentation and/or other materials provided with the distribution.
 *     * Neither the name of Freescale Semiconductor nor the
 *	 names of its contributors may be used to endorse or promote products
 *	 derived from this software without specific prior written permission.
 *
 *
 * ALTERNATIVELY, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") as published by the Free Software
 * Foundation, either version 2 of that License or (at your option) any
 * later version.
 *
 * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


#ifndef SRTP_TEST_VECTOR_H_
#define SRTP_TEST_VECTOR_H_

#include <inttypes.h>
#include <usdpaa/compat.h>

/* SRTP Test Vectors */
#define SRTP_MAX_ICV_SIZE	20
#define SRTP_AUTH_KEY_SIZE	40
#define SRTP_CIPHER_KEY_SIZE	16
#define SRTP_MAX_BUF_SIZE	130
#define RTP_HEADER_LENGTH	4

/**
 * Structure which defines a SRTP test vector.
 */
struct srtp_ref_vector_s {
	union {
		uintptr_t key;			/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	unsigned char cipher_alg;
	unsigned short cipher_keylen;
	unsigned char auth_alg;
	union {
		uintptr_t auth_key;		/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_auth_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	unsigned short auth_keylen;
	uint32_t length;
	uint8_t *plaintext;
	uint8_t *ciphertext;
	/*
	 * NOTE: Keep members above unchanged!
	 */
	uint8_t *cipher_salt;
	uint32_t roc;
	uint16_t seqnum;
	uint8_t n_tag;
	uint8_t options; /* optional */
	uint32_t mki;    /* optional */
};

static uint8_t srtp_reference_auth_key[][SRTP_AUTH_KEY_SIZE] = {
	/* 40 bytes */
	{0x8C, 0x86, 0xC8, 0xF7, 0xF4, 0xC1, 0xF1, 0x4C, 0x4B, 0x9B, 0x29, 0x2B,
	 0x30, 0x3F, 0x39, 0xFA, 0x59, 0x22, 0xC8, 0xF1, 0x16, 0x3B, 0x31, 0x8B,
	 0x9D, 0xBF, 0xAD, 0x78, 0x1B, 0x88, 0xF6, 0xA5, 0xF0, 0x81, 0x1A, 0xE3,
	 0x24, 0xEC, 0x5C, 0x50}
};

static uint8_t srtp_reference_cipher_key[][SRTP_CIPHER_KEY_SIZE] = {
	/* 16 bytes */
	{0xFF, 0x89, 0xCB, 0x85, 0x4F, 0xC0, 0x90, 0x81, 0xCC, 0x47, 0xED, 0xFC,
	 0x86, 0x19, 0xB2, 0x14}
};

static uint8_t srtp_reference_cipher_salt[][SRTP_CIPHER_SALT_LEN] = {
	{0xF7, 0xDE, 0x60, 0x56, 0x8D, 0xE9, 0x89, 0x07, 0x3F, 0x3D, 0x16, 0x39,
	 0x01, 0x80}
};

uint16_t srtp_reference_length[] = {896};

static uint8_t srtp_reference_plaintext[][SRTP_MAX_BUF_SIZE] = {
	/* 112 bytes */
	{0x28, 0x0D, 0x4B, 0xEE, 0x73, 0xAF, 0xEA, 0x79, 0xC8, 0x1E, 0x47, 0x83,
	 0xC6, 0x95, 0x31, 0x39, 0x03, 0xC4, 0x18, 0xF1, 0x2B, 0x4C, 0x1A, 0x34,
	 0x50, 0x6D, 0x73, 0x29, 0xD2, 0x0F, 0x40, 0xC4, 0x19, 0x6F, 0xE2, 0xD7,
	 0x87, 0x1A, 0x99, 0x68, 0x16, 0x09, 0xC3, 0xE7, 0x7E, 0x17, 0x7D, 0x64,
	 0x9B, 0xA5, 0x39, 0x53, 0xA6, 0x88, 0x20, 0xA2, 0x0A, 0x17, 0x8F, 0xEF,
	 0x57, 0x19, 0xC7, 0xF3, 0x5C, 0x4A, 0xBE, 0x2E, 0xA0, 0xD8, 0x97, 0xB7,
	 0x41, 0x71, 0x4D, 0x03, 0x80, 0xF8, 0xFD, 0xCD, 0x06, 0x34, 0xD5, 0xC6,
	 0x02, 0x4C, 0xDB, 0x95, 0xCB, 0x07, 0x4D, 0xC8, 0x4B, 0x4C, 0x2B, 0x14,
	 0x1E, 0x24, 0x67, 0x07, 0x2D, 0xC4, 0x39, 0xF0, 0xFC, 0xD2, 0x60, 0x0D,
	 0x00, 0x00, 0x00, 0x03}
};

static uint8_t srtp_reference_ciphertext[][SRTP_MAX_BUF_SIZE] = {
	/* 127 bytes */
	{0x28, 0x0D, 0x4B, 0xEE, 0x73, 0xAF, 0xEA, 0x79, 0xC8, 0x1E, 0x47, 0x83,
	 0xC6, 0x95, 0x31, 0x39, 0x03, 0xC4, 0x18, 0xF1, 0x2B, 0x4C, 0x1A, 0x34,
	 0x50, 0x6D, 0x73, 0x29, 0xD2, 0x0F, 0x40, 0xC4, 0x19, 0x6F, 0xE2, 0xD7,
	 0x87, 0x1A, 0x99, 0x68, 0x16, 0x09, 0xC3, 0xE7, 0xB0, 0xC4, 0x76, 0x69,
	 0x26, 0xBB, 0x74, 0x74, 0x7D, 0x69, 0xA2, 0xC7, 0x0D, 0xB1, 0x27, 0x51,
	 0x38, 0x1B, 0xBB, 0x59, 0x4B, 0x10, 0xD4, 0x7F, 0x79, 0xD5, 0xDF, 0x48,
	 0x82, 0x5E, 0x8D, 0xAB, 0xBD, 0x36, 0x7F, 0x42, 0xD4, 0x2D, 0xED, 0xEE,
	 0xA0, 0x78, 0x52, 0xDD, 0xF9, 0x5D, 0x45, 0x4C, 0xAA, 0xAA, 0x3C, 0x1B,
	 0x1D, 0xE4, 0xB1, 0xC7, 0x26, 0xAB, 0x2B, 0xCC, 0x24, 0x77, 0x8F, 0x55,
	 0x5A, 0xB3, 0x29, 0x6E, 0x56, 0x62, 0x07, 0x5D, 0x75, 0xFC, 0xC6, 0x4C,
	 0x68, 0xFE, 0x8E, 0xA2, 0x23, 0xF5, 0xDB}
};

static uint32_t srtp_reference_auth_keylen[] = { 40 };
static uint32_t srtp_reference_cipher_keylen[] = { 16 };

static uint8_t srtp_reference_n_tag[] = { 0x0F };
static uint16_t srtp_reference_seq_num[] = { 0x4BEE };
static uint32_t srtp_reference_roc[] = { 0x6AD47CD7 };

#endif /* SRTP_TEST_VECTOR_H_ */
