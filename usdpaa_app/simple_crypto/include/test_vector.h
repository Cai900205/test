/**
\file test_vector.h
\brief standard test vector of SEC algorithm
*/
/*
 * Copyright (C) 2011 Freescale Semiconductor, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
 * NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef	__TEST_VECTOR_H
#define	__TEST_VECTOR_H

#include "simple_crypto.h"

/**< Integer number of 32-bit items */
#define NO_OF_WORDS(bitlen) \
    (((bitlen) >> 5) + ((31 + ((bitlen) & 0x1F)) >> 5))

/**< Integer number of 8-bit items */
#define NO_OF_BYTES(bitlen) (((bitlen) >> 3) + !!((bitlen) & 0x7))

/** test vector structure which holds essential initialization vector, key etc;
 *  and cipher/plain text to compare with enrypted/decrypted data generated by
 *  SEC4.0
 */
struct ref_vector_s {
	union {
		uintptr_t key;			/**< Used when the key contents
						     are supposed to be copied
						     by RTA as immediate in the
						     created descriptor. */
		dma_addr_t dma_addr_key;	/**< Used when a pointer to
						     the key is supposed to be
						     used as-is by RTA in the
						     created descriptor. */
	};
	union {
		uint8_t *init_vec;
		struct {
			uint32_t count;
			uint8_t bearer;
			uint8_t direction;

		} f8;
		struct {
			uint32_t count;
			uint32_t fresh;
			uint8_t direction;

		} f9;
	} __packed iv;
	uint32_t length;	/** length in bits */
	uint8_t *plaintext;
	uint8_t *ciphertext;
	uint8_t *digest;
} __packed;

#define	HMAC_SHA1_DIGEST_SIZE	20	/* HMAC-SHA1 digest length(in bytes) */
/* SNOW 3G F9 MAC is generated in the context double word 0 with the MAC/ICV.
 * Since MAC is a 32-bit value, it is written to low-order bit locations
 * (right-justified) and the remaining bits are zeroized. Therefore, consider-
 * ing high-order 32-bit vaule as ZERO MAC size is taken as 8 bytes.
 */
#define	SNOW_F9_DIGEST_SIZE	4	/* SNOW-F9 digest length(bytes) */
#define	KASUMI_F9_DIGEST_SIZE	4	/* KASUMI-F9 digest length(bytes) */
#define	CRC_DIGEST_SIZE		8	/* CRC digest length(bytes) */

/* AES-CBC reference vectors, according to "RFC3602 - The AES-CBC Cipher
 * Algorithm and Its Use with IPsec, from S. Frankel.., September 2003"
 */

#define AES_CBC_KEY_LEN	16	/**< key length(in bytes) for aes-cbc */
#define AES_CBC_IV_LEN	16	/**< IV length(in bytes) for aes-cbc */
#define AES_CBC_MAX_DATA_LEN	64	/**< max. plain text length(in bytes) */

static uint8_t aes_cbc_reference_key[][AES_CBC_KEY_LEN] = {
	/* Test Set 1 */
	{0x06, 0xa9, 0x21, 0x40, 0x36, 0xb8, 0xa1, 0x5b, 0x51, 0x2e, 0x03, 0xd5,
	 0x34, 0x12, 0x00, 0x06},

	/* Test Set 2 */
	{0xc2, 0x86, 0x69, 0x6d, 0x88, 0x7c, 0x9a, 0xa0, 0x61, 0x1b, 0xbb, 0x3e,
	 0x20, 0x25, 0xa4, 0x5a},

	/* Test Set 3 */
	{0x6c, 0x3e, 0xa0, 0x47, 0x76, 0x30, 0xce, 0x21, 0xa2, 0xce, 0x33, 0x4a,
	 0xa7, 0x46, 0xc2, 0xcd},

	/* Test Set 4 */
	{0x56, 0xe4, 0x7a, 0x38, 0xc5, 0x59, 0x89, 0x74, 0xbc, 0x46, 0x90, 0x3d,
	 0xba, 0x29, 0x03, 0x49},
};

static uint8_t aes_cbc_reference_iv[][AES_CBC_IV_LEN] = {
	/* Test Set 1 */
	{0x3d, 0xaf, 0xba, 0x42, 0x9d, 0x9e, 0xb4, 0x30, 0xb4, 0x22, 0xda, 0x80,
	 0x2c, 0x9f, 0xac, 0x41},

	/* Test Set 2 */
	{0x56, 0x2e, 0x17, 0x99, 0x6d, 0x09, 0x3d, 0x28, 0xdd, 0xb3, 0xba, 0x69,
	 0x5a, 0x2e, 0x6f, 0x58},

	/* Test Set 3 */
	{0xc7, 0x82, 0xdc, 0x4c, 0x09, 0x8c, 0x66, 0xcb, 0xd9, 0xcd, 0x27, 0xd8,
	 0x25, 0x68, 0x2c, 0x81},

	/* Test Set 4 */
	{0x8c, 0xe8, 0x2e, 0xef, 0xbe, 0xa0, 0xda, 0x3c, 0x44, 0x69, 0x9e, 0xd7,
	 0xdb, 0x51, 0xb7, 0xd9},
};

/** length in bits */
static uint32_t aes_cbc_reference_length[] = { 128, 256, 384, 512 };

static uint8_t aes_cbc_reference_plaintext[][AES_CBC_MAX_DATA_LEN] = {
	/* Test Set 1 */
	{0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	 0x20, 0x6d, 0x73, 0x67},	/* Single block msg */

	/* Test Set 2 */
	{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b,
	 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f},

	/* Test Set 3 */
	{0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x34, 0x38,
	 0x2d, 0x62, 0x79, 0x74, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	 0x65, 0x20, 0x28, 0x65, 0x78, 0x61, 0x63, 0x74, 0x6c, 0x79, 0x20, 0x33,
	 0x20, 0x41, 0x45, 0x53, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	 0x29},

	/* Test Set 4 */
	{0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab,
	 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7,
	 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3,
	 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf,
	 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb,
	 0xdc, 0xdd, 0xde, 0xdf},
};

static uint8_t aes_cbc_reference_ciphertext[][AES_CBC_MAX_DATA_LEN] = {
	/* Test Set 1 */
	{0xe3, 0x53, 0x77, 0x9c, 0x10, 0x79, 0xae, 0xb8, 0x27, 0x08, 0x94, 0x2d,
	 0xbe, 0x77, 0x18, 0x1a},

	/* Test Set 2 */
	{0xd2, 0x96, 0xcd, 0x94, 0xc2, 0xcc, 0xcf, 0x8a, 0x3a, 0x86, 0x30, 0x28,
	 0xb5, 0xe1, 0xdc, 0x0a, 0x75, 0x86, 0x60, 0x2d, 0x25, 0x3c, 0xff, 0xf9,
	 0x1b, 0x82, 0x66, 0xbe, 0xa6, 0xd6, 0x1a, 0xb1},

	/* Test Set 3 */
	{0xd0, 0xa0, 0x2b, 0x38, 0x36, 0x45, 0x17, 0x53, 0xd4, 0x93, 0x66, 0x5d,
	 0x33, 0xf0, 0xe8, 0x86, 0x2d, 0xea, 0x54, 0xcd, 0xb2, 0x93, 0xab, 0xc7,
	 0x50, 0x69, 0x39, 0x27, 0x67, 0x72, 0xf8, 0xd5, 0x02, 0x1c, 0x19, 0x21,
	 0x6b, 0xad, 0x52, 0x5c, 0x85, 0x79, 0x69, 0x5d, 0x83, 0xba, 0x26,
	 0x84},

	/* Test Set 4 */
	{0xc3, 0x0e, 0x32, 0xff, 0xed, 0xc0, 0x77, 0x4e, 0x6a, 0xff, 0x6a, 0xf0,
	 0x86, 0x9f, 0x71, 0xaa, 0x0f, 0x3a, 0xf0, 0x7a, 0x9a, 0x31, 0xa9, 0xc6,
	 0x84, 0xdb, 0x20, 0x7e, 0xb0, 0xef, 0x8e, 0x4e, 0x35, 0x90, 0x7a, 0xa6,
	 0x32, 0xc3, 0xff, 0xdf, 0x86, 0x8b, 0xb7, 0xb2, 0x9d, 0x3d, 0x46, 0xad,
	 0x83, 0xce, 0x9f, 0x9a, 0x10, 0x2e, 0xe9, 0x9d, 0x49, 0xa5, 0x3e, 0x87,
	 0xf4, 0xc3, 0xda, 0x55},
};

/* TDES-CBC reference vectors, according to
 * "http://csrc.nist.gov/groups/STM/cavp/documents/des/DESMMT.pdf"
 */

#define TDES_CBC_KEY_LEN	24	/* key length(in bytes) for tdes-cbc */
#define TDES_CBC_IV_LEN		8	/* IV length(in bytes) for tdes-cbc */
#define TDES_CBC_MAX_DATA_LEN	16	/* max. plain text length(in bytes) */

static uint8_t tdes_cbc_reference_key[][TDES_CBC_KEY_LEN] = {
	/* Test Set 1 */
	{0x62, 0x7f, 0x46, 0x0e, 0x08, 0x10, 0x4a, 0x10, 0x43, 0xcd, 0x26, 0x5d,
	 0x58, 0x40, 0xea, 0xf1, 0x31, 0x3e, 0xdf, 0x97, 0xdf, 0x2a, 0x8a, 0x8c,
	 },

	/* Test Set 2 */
	{0x37, 0xae, 0x5e, 0xbf, 0x46, 0xdf, 0xf2, 0xdc, 0x07, 0x54, 0xb9, 0x4f,
	 0x31, 0xcb, 0xb3, 0x85, 0x5e, 0x7f, 0xd3, 0x6d, 0xc8, 0x70, 0xbf,
	 0xae},
};

static uint8_t tdes_cbc_reference_iv[][TDES_CBC_IV_LEN] = {
	/* Test Set 1 */
	{0x8e, 0x29, 0xf7, 0x5e, 0xa7, 0x7e, 0x54, 0x75},

	/* Test Set 2 */
	{0x3d, 0x1d, 0xe3, 0xcc, 0x13, 0x2e, 0x3b, 0x65},
};

/** length in bits */
static uint32_t tdes_cbc_reference_length[] = { 64, 128 };

static uint8_t tdes_cbc_reference_plaintext[][TDES_CBC_MAX_DATA_LEN] = {
	/* Test Set 1 */
	{0x32, 0x6a, 0x49, 0x4c, 0xd3, 0x3f, 0xe7, 0x56},

	/* Test Set 2 */
	{0x84, 0x40, 0x1f, 0x78, 0xfe, 0x6c, 0x10, 0x87, 0x6d, 0x8e, 0xa2, 0x30,
	 0x94, 0xea, 0x53, 0x09},
};

static uint8_t tdes_cbc_reference_ciphertext[][TDES_CBC_MAX_DATA_LEN]
    = {
	/* Test Set 1 */
	{0xb2, 0x2b, 0x8d, 0x66, 0xde, 0x97, 0x06, 0x92},

	/* Test Set 2 */
	{0x7b, 0x1f, 0x7c, 0x7e, 0x3b, 0x1c, 0x94, 0x8e, 0xbd, 0x04, 0xa7, 0x5f,
	 0xfb, 0xa7, 0xd2, 0xf5},
};

/* SNOW-F8 reference vectors, according to "Specification of the 3GPP
 * Confidentiality and Integrity Algorithms UEA2&UIA2",
 * "Document 4: Design Conformance Test Data", from 10Jan2006.
 */

#define F8_KEY_LEN	16	/**< key length(in bytes) for F8 */
#define F8_IV_LEN	8	/**< IV length(in bytes) for F8 */
#define F8_MAX_FRAME_COUNT (20000 / sizeof(uint32_t))	/**< F8 engine can be fed up to 20000 bits, in 32-bit frames */

static uint8_t snow_f8_reference_key[][F8_KEY_LEN] = {
	/* Test Set 1 */
	{0xd3, 0xc5, 0xd5, 0x92, 0x32, 0x7f, 0xb1, 0x1c, 0x40, 0x35, 0xc6, 0x68,
	 0x0a, 0xf8, 0xc6, 0xd1},

	/* Test Set 2 */
	{0x2b, 0xd6, 0x45, 0x9f, 0x82, 0xc4, 0x40, 0xe0, 0x95, 0x2c, 0x49, 0x10,
	 0x48, 0x05, 0xff, 0x48},

	/* Test Set 3 */
	{0x0a, 0x8b, 0x6b, 0xd8, 0xd9, 0xb0, 0x8b, 0x08, 0xd6, 0x4e, 0x32, 0xd1,
	 0x81, 0x77, 0x77, 0xfb},

	/* Test Set 4 */
	{0xaa, 0x1f, 0x95, 0xae, 0xa5, 0x33, 0xbc, 0xb3, 0x2e, 0xb6, 0x3b, 0xf5,
	 0x2d, 0x8f, 0x83, 0x1a},

	/* Test Set 5 */
	{0x96, 0x18, 0xae, 0x46, 0x89, 0x1f, 0x86, 0x57, 0x8e, 0xeb, 0xe9, 0x0e,
	 0xf7, 0xa1, 0x20, 0x2e},
};

static uint32_t snow_f8_reference_count[] =  {
	0x398a59b4, 0xc675a64b, 0x544d49cd, 0x72d8c671, 0xc675a64b };

static uint8_t snow_f8_reference_bearer[] = { 0x15, 0x0c, 0x04, 0x10, 0x0c };

static uint8_t snow_f8_reference_dir[] = { 0x1, 0x1, 0x0, 0x1, 0x1 };

/** length in bits */
static uint32_t snow_f8_reference_length[] = { 253, 798, 310, 1022, 1245 };

static uint8_t snow_f8_reference_plaintext[][F8_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0x98, 0x1B, 0xA6, 0x82, 0x4C, 0x1B, 0xFB, 0x1A, 0xB4, 0x85, 0x47, 0x20,
	 0x29, 0xB7, 0x1D, 0x80, 0x8C, 0xE3, 0x3E, 0x2C, 0xC3, 0xC0, 0xB5, 0xFC,
	 0x1F, 0x3D, 0xE8, 0xA6, 0xDC, 0x66, 0xB1, 0xF0},

	/* Test Set 2 */
	{0x7E, 0xC6, 0x12, 0x72, 0x74, 0x3B, 0xF1, 0x61, 0x47, 0x26, 0x44, 0x6A,
	 0x6C, 0x38, 0xCE, 0xD1, 0x66, 0xF6, 0xCA, 0x76, 0xEB, 0x54, 0x30, 0x04,
	 0x42, 0x86, 0x34, 0x6C, 0xEF, 0x13, 0x0F, 0x92, 0x92, 0x2B, 0x03, 0x45,
	 0x0D, 0x3A, 0x99, 0x75, 0xE5, 0xBD, 0x2E, 0xA0, 0xEB, 0x55, 0xAD, 0x8E,
	 0x1B, 0x19, 0x9E, 0x3E, 0xC4, 0x31, 0x60, 0x20, 0xE9, 0xA1, 0xB2, 0x85,
	 0xE7, 0x62, 0x79, 0x53, 0x59, 0xB7, 0xBD, 0xFD, 0x39, 0xBE, 0xF4, 0xB2,
	 0x48, 0x45, 0x83, 0xD5, 0xAF, 0xE0, 0x82, 0xAE, 0xE6, 0x38, 0xBF, 0x5F,
	 0xD5, 0xA6, 0x06, 0x19, 0x39, 0x01, 0xA0, 0x8F, 0x4A, 0xB4, 0x1A, 0xAB,
	 0x9B, 0x13, 0x48, 0x80},

	/* Test Set 3 */
	{0xFD, 0x40, 0xA4, 0x1D, 0x37, 0x0A, 0x1F, 0x65, 0x74, 0x50, 0x95, 0x68,
	 0x7D, 0x47, 0xBA, 0x1D, 0x36, 0xD2, 0x34, 0x9E, 0x23, 0xF6, 0x44, 0x39,
	 0x2C, 0x8E, 0xA9, 0xC4, 0x9D, 0x40, 0xC1, 0x32, 0x71, 0xAF, 0xF2, 0x64,
	 0xD0, 0xF2, 0x48, 0x0},

	/* Test Set 4 */
	{0xFB, 0x1B, 0x96, 0xC5, 0xC8, 0xBA, 0xDF, 0xB2, 0xE8, 0xE8, 0xED, 0xFD,
	 0xE7, 0x8E, 0x57, 0xF2, 0xAD, 0x81, 0xE7, 0x41, 0x03, 0xFC, 0x43, 0x0A,
	 0x53, 0x4D, 0xCC, 0x37, 0xAF, 0xCE, 0xC7, 0x0E, 0x15, 0x17, 0xBB, 0x06,
	 0xF2, 0x72, 0x19, 0xDA, 0xE4, 0x90, 0x22, 0xDD, 0xC4, 0x7A, 0x06, 0x8D,
	 0xE4, 0xC9, 0x49, 0x6A, 0x95, 0x1A, 0x6B, 0x09, 0xED, 0xBD, 0xC8, 0x64,
	 0xC7, 0xAD, 0xBD, 0x74, 0x0A, 0xC5, 0x0C, 0x02, 0x2F, 0x30, 0x82, 0xBA,
	 0xFD, 0x22, 0xD7, 0x81, 0x97, 0xC5, 0xD5, 0x08, 0xB9, 0x77, 0xBC, 0xA1,
	 0x3F, 0x32, 0xE6, 0x52, 0xE7, 0x4B, 0xA7, 0x28, 0x57, 0x60, 0x77, 0xCE,
	 0x62, 0x8C, 0x53, 0x5E, 0x87, 0xDC, 0x60, 0x77, 0xBA, 0x07, 0xD2, 0x90,
	 0x68, 0x59, 0x0C, 0x8C, 0xB5, 0xF1, 0x08, 0x8E, 0x08, 0x2C, 0xFA, 0x0E,
	 0xC9, 0x61, 0x30, 0x2D, 0x69, 0xCF, 0x3D, 0x44},

	/* Test Set 5 */
	{0x8D, 0xAA, 0x17, 0xB1, 0xAE, 0x05, 0x05, 0x29, 0xC6, 0x82, 0x7F, 0x28,
	 0xC0, 0xEF, 0x6A, 0x12, 0x42, 0xE9, 0x3F, 0x8B, 0x31, 0x4F, 0xB1, 0x8A,
	 0x77, 0xF7, 0x90, 0xAE, 0x04, 0x9F, 0xED, 0xD6, 0x12, 0x26, 0x7F, 0xEC,
	 0xAE, 0xFC, 0x45, 0x01, 0x74, 0xD7, 0x6D, 0x9F, 0x9A, 0xA7, 0x75, 0x5A,
	 0x30, 0xCD, 0x90, 0xA9, 0xA5, 0x87, 0x4B, 0xF4, 0x8E, 0xAF, 0x70, 0xEE,
	 0xA3, 0xA6, 0x2A, 0x25, 0x0A, 0x8B, 0x6B, 0xD8, 0xD9, 0xB0, 0x8B, 0x08,
	 0xD6, 0x4E, 0x32, 0xD1, 0x81, 0x77, 0x77, 0xFB, 0x54, 0x4D, 0x49, 0xCD,
	 0x49, 0x72, 0x0E, 0x21, 0x9D, 0xBF, 0x8B, 0xBE, 0xD3, 0x39, 0x04, 0xE1,
	 0xFD, 0x40, 0xA4, 0x1D, 0x37, 0x0A, 0x1F, 0x65, 0x74, 0x50, 0x95, 0x68,
	 0x7D, 0x47, 0xBA, 0x1D, 0x36, 0xD2, 0x34, 0x9E, 0x23, 0xF6, 0x44, 0x39,
	 0x2C, 0x8E, 0xA9, 0xC4, 0x9D, 0x40, 0xC1, 0x32, 0x71, 0xAF, 0xF2, 0x64,
	 0xD0, 0xF2, 0x48, 0x41, 0xD6, 0x46, 0x5F, 0x09, 0x96, 0xFF, 0x84, 0xE6,
	 0x5F, 0xC5, 0x17, 0xC5, 0x3E, 0xFC, 0x33, 0x63, 0xC3, 0x84, 0x92,
	 0xA8},
};

static uint8_t snow_f8_reference_ciphertext[][F8_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0x5D, 0x5B, 0xFE, 0x75, 0xEB, 0x04, 0xF6, 0x8C, 0xE0, 0xA1, 0x23, 0x77,
	 0xEA, 0x00, 0xB3, 0x7D, 0x47, 0xC6, 0xA0, 0xBA, 0x06, 0x30, 0x91, 0x55,
	 0x08, 0x6A, 0x85, 0x9C, 0x43, 0x41, 0xB3, 0x78},

	/* Test Set 2 */
	{0x3F, 0x67, 0x85, 0x07, 0x14, 0xB8, 0xDA, 0x69, 0xEF, 0xB7, 0x27, 0xED,
	 0x7A, 0x6C, 0x0C, 0x50, 0x71, 0x4A, 0xD7, 0x36, 0xC4, 0xF5, 0x60, 0x00,
	 0x06, 0xE3, 0x52, 0x5B, 0xE8, 0x07, 0xC4, 0x67, 0xC6, 0x77, 0xFF, 0x86,
	 0x4A, 0xF4, 0x5F, 0xBA, 0x09, 0xC2, 0x7C, 0xDE, 0x38, 0xF8, 0x7A, 0x1F,
	 0x84, 0xD5, 0x9A, 0xB2, 0x55, 0x40, 0x8F, 0x2C, 0x7B, 0x82, 0xF9, 0xEA,
	 0xD4, 0x1A, 0x1F, 0xE6, 0x5E, 0xAB, 0xEB, 0xFB, 0xC1, 0xF3, 0xA4, 0xC5,
	 0x6C, 0x9A, 0x26, 0xFC, 0xF7, 0xB3, 0xD6, 0x6D, 0x02, 0x20, 0xEE, 0x47,
	 0x75, 0xBC, 0x58, 0x17, 0x0A, 0x2B, 0x12, 0xF3, 0x43, 0x1D, 0x11, 0xB3,
	 0x44, 0xD6, 0xE3, 0x6C},

	/* Test Set 3 */
	{0x48, 0x14, 0x8E, 0x54, 0x52, 0xA2, 0x10, 0xC0, 0x5F, 0x46, 0xBC, 0x80,
	 0xDC, 0x6F, 0x73, 0x49, 0x5B, 0x02, 0x04, 0x8C, 0x1B, 0x95, 0x8B, 0x02,
	 0x61, 0x02, 0xCA, 0x97, 0x28, 0x02, 0x79, 0xA4, 0xC1, 0x8D, 0x2E, 0xE3,
	 0x08, 0x92, 0x1C, 0x0},

	/* Test Set 4 */
	{0xFF, 0xCF, 0xC2, 0xFE, 0xAD, 0x6C, 0x09, 0x4E, 0x96, 0xC5, 0x89, 0xD0,
	 0xF6, 0x77, 0x9B, 0x67, 0x84, 0x24, 0x6C, 0x3C, 0x4D, 0x1C, 0xEA, 0x20,
	 0x3D, 0xB3, 0x90, 0x1F, 0x40, 0xAD, 0x4F, 0xD7, 0x13, 0x8B, 0xC6, 0xD7,
	 0x7E, 0x83, 0x20, 0xCB, 0x10, 0x2F, 0x49, 0x7F, 0xDD, 0x44, 0xA2, 0x69,
	 0xA9, 0x6E, 0xCB, 0x28, 0x61, 0x77, 0x00, 0xE3, 0x32, 0xEB, 0x2F, 0x73,
	 0x6B, 0x34, 0xF4, 0xF2, 0x69, 0x30, 0x94, 0xE2, 0x2F, 0xF9, 0x4F, 0x9B,
	 0xE4, 0x72, 0x3D, 0xA4, 0x0C, 0x40, 0xDF, 0xD3, 0x93, 0x1C, 0xC1, 0xAC,
	 0x97, 0x23, 0xF6, 0xB4, 0xA9, 0x91, 0x3E, 0x96, 0xB6, 0xDB, 0x7A, 0xBC,
	 0xAC, 0xE4, 0x15, 0x17, 0x7C, 0x1D, 0x01, 0x15, 0xC5, 0xF0, 0x9B, 0x5F,
	 0xDE, 0xA0, 0xB3, 0xAD, 0xB8, 0xF9, 0xDA, 0x6E, 0x9F, 0x9A, 0x04, 0xC5,
	 0x43, 0x39, 0x7B, 0x9D, 0x43, 0xF8, 0x73, 0x30},

	/* Test Set 5 */
	{0x6C, 0xDB, 0x18, 0xA7, 0xCA, 0x82, 0x18, 0xE8, 0x6E, 0x4B, 0x4B, 0x71,
	 0x6A, 0x4D, 0x04, 0x37, 0x1F, 0xBE, 0xC2, 0x62, 0xFC, 0x5A, 0xD0, 0xB3,
	 0x81, 0x9B, 0x18, 0x7B, 0x97, 0xE5, 0x5B, 0x1A, 0x4D, 0x7C, 0x19, 0xEE,
	 0x24, 0xC8, 0xB4, 0xD7, 0x72, 0x3C, 0xFE, 0xDF, 0x04, 0x5B, 0x8A, 0xCA,
	 0xE4, 0x86, 0x95, 0x17, 0xD8, 0x0E, 0x50, 0x61, 0x5D, 0x90, 0x35, 0xD5,
	 0xD9, 0xC5, 0xA4, 0x0A, 0xF6, 0x02, 0x28, 0x0B, 0x54, 0x25, 0x97, 0xB0,
	 0xCB, 0x18, 0x61, 0x9E, 0xEB, 0x35, 0x92, 0x57, 0x59, 0xD1, 0x95, 0xE1,
	 0x00, 0xE8, 0xE4, 0xAA, 0x0C, 0x38, 0xA3, 0xC2, 0xAB, 0xE0, 0xF3, 0xD8,
	 0xFF, 0x04, 0xF3, 0xC3, 0x3C, 0x29, 0x50, 0x69, 0xC2, 0x36, 0x94, 0xB5,
	 0xBB, 0xEA, 0xCD, 0xD5, 0x42, 0xE2, 0x8E, 0x8A, 0x94, 0xED, 0xB9, 0x11,
	 0x9F, 0x41, 0x2D, 0x05, 0x4B, 0xE1, 0xFA, 0x72, 0x72, 0xB5, 0xFF, 0xB2,
	 0xB2, 0x57, 0x0F, 0x4F, 0x7C, 0xEA, 0xF3, 0x83, 0xA8, 0xA9, 0xD9, 0x35,
	 0x72, 0xF0, 0x4D, 0x6E, 0x3A, 0x6E, 0x29, 0x37, 0x26, 0xEC, 0x62,
	 0xC8},
};

/* SNOW-F9 (UIA2) reference vectors, according to "Specification of the 3GPP
 * Confidentiality and Integrity Algorithms UEA2&UIA2",
 * "Document 4: Design Conformance Test Data", from 10Jan2006.
 */

#define F9_KEY_LEN	16	/**< Key length(in bytes) for F9 */
#define F9_MAX_FRAME_COUNT	NO_OF_WORDS(20000)	/**< F9 engine can be fed up to 20000 bits, in 32-bit frames, F9 - UIA2 */

static uint8_t snow_f9_reference_key[][F9_KEY_LEN] = {

	/* Test Set 1 */
	{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10,
	 0x48, 0x81, 0xFF, 0x48},

	/* Test Set 2 */
	{0x7E, 0x5E, 0x94, 0x43, 0x1E, 0x11, 0xD7, 0x38, 0x28, 0xD7, 0x39, 0xCC,
	 0x6C, 0xED, 0x45, 0x73},

	/* Test Set 3 */
	{0xD3, 0x41, 0x9B, 0xE8, 0x21, 0x08, 0x7A, 0xCD, 0x02, 0x12, 0x3A, 0x92,
	 0x48, 0x03, 0x33, 0x59},

	/* Test Set 4 */
	{0x83, 0xFD, 0x23, 0xA2, 0x44, 0xA7, 0x4C, 0xF3, 0x58, 0xDA, 0x30, 0x19,
	 0xF1, 0x72, 0x26, 0x35},

	/* Test Set 5 */
	{0x68, 0x32, 0xA6, 0x5C, 0xFF, 0x44, 0x73, 0x62, 0x1E, 0xBD, 0xD4, 0xBA,
	 0x26, 0xA9, 0x21, 0xFE},
};

static uint32_t snow_f9_reference_count[] = {
	0x38A6F056, 0x36AF6144, 0xC7590EA9, 0x36AF6144, 0x36AF6144 };

static uint32_t snow_f9_reference_fresh[] = {
	0xB8AEFDA9, 0x9838F03A, 0x57D5DF7D, 0x4F302AD2, 0x9838F03A };

static uint8_t snow_f9_reference_dir[] = { 0x0, 0x1, 0x0, 0x1, 0x0 };

/** length in bits */
static uint32_t snow_f9_reference_length[] = { 88, 254, 511, 768, 383 };

static uint8_t snow_f9_reference_plaintext[][F9_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0x33, 0x32, 0x34, 0x62, 0x63, 0x39, 0x38, 0x61, 0x37, 0x34, 0x79},

	/* Test Set 2 */
	{0xB3, 0xD3, 0xC9, 0x17, 0x0A, 0x4E, 0x16, 0x32, 0xF6, 0x0F, 0x86, 0x10,
	 0x13, 0xD2, 0x2D, 0x84, 0xB7, 0x26, 0xB6, 0xA2, 0x78, 0xD8, 0x02, 0xD1,
	 0xEE, 0xAF, 0x13, 0x21, 0xBA, 0x59, 0x29, 0xDC},

	/* Test Set 3 */
	{0xBB, 0xB0, 0x57, 0x03, 0x88, 0x09, 0x49, 0x6B, 0xCF, 0xF8, 0x6D, 0x6F,
	 0xBC, 0x8C, 0xE5, 0xB1, 0x35, 0xA0, 0x6B, 0x16, 0x60, 0x54, 0xF2, 0xD5,
	 0x65, 0xBE, 0x8A, 0xCE, 0x75, 0xDC, 0x85, 0x1E, 0x0B, 0xCD, 0xD8, 0xF0,
	 0x71, 0x41, 0xC4, 0x95, 0x87, 0x2F, 0xB5, 0xD8, 0xC0, 0xC6, 0x6A, 0x8B,
	 0x6D, 0xA5, 0x56, 0x66, 0x3E, 0x4E, 0x46, 0x12, 0x05, 0xD8, 0x45, 0x80,
	 0xBE, 0xE5, 0xBC, 0x7E},

	/* Test Set 4 */
	{0x35, 0xC6, 0x87, 0x16, 0x63, 0x3C, 0x66, 0xFB, 0x75, 0x0C, 0x26, 0x68,
	 0x65, 0xD5, 0x3C, 0x11, 0xEA, 0x05, 0xB1, 0xE9, 0xFA, 0x49, 0xC8, 0x39,
	 0x8D, 0x48, 0xE1, 0xEF, 0xA5, 0x90, 0x9D, 0x39, 0x47, 0x90, 0x28, 0x37,
	 0xF5, 0xAE, 0x96, 0xD5, 0xA0, 0x5B, 0xC8, 0xD6, 0x1C, 0xA8, 0xDB, 0xEF,
	 0x1B, 0x13, 0xA4, 0xB4, 0xAB, 0xFE, 0x4F, 0xB1, 0x00, 0x60, 0x45, 0xB6,
	 0x74, 0xBB, 0x54, 0x72, 0x93, 0x04, 0xC3, 0x82, 0xBE, 0x53, 0xA5, 0xAF,
	 0x05, 0x55, 0x61, 0x76, 0xF6, 0xEA, 0xA2, 0xEF, 0x1D, 0x05, 0xE4, 0xB0,
	 0x83, 0x18, 0x1E, 0xE6, 0x74, 0xCD, 0xA5, 0xA4, 0x85, 0xF7, 0x4D,
	 0x7A},

	/* Test Set 5 */
	{0xD3, 0xC5, 0x38, 0x39, 0x62, 0x68, 0x20, 0x71, 0x77, 0x65, 0x66, 0x76,
	 0x20, 0x32, 0x38, 0x37, 0x63, 0x62, 0x40, 0x98, 0x1B, 0xA6, 0x82, 0x4C,
	 0x1B, 0xFB, 0x1A, 0xB4, 0x85, 0x47, 0x20, 0x29, 0xB7, 0x1D, 0x80, 0x8C,
	 0xE3, 0x3E, 0x2C, 0xC3, 0xC0, 0xB5, 0xFC, 0x1F, 0x3D, 0xE8, 0xA6,
	 0xDC},
};

static uint8_t snow_f9_reference_digest[][F9_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0xEE, 0x41, 0x9E, 0x0D},

	/* Test Set 2 */
	{0x92, 0xF2, 0xA4, 0x53},

	/* Test Set 3 */
	{0xAD, 0x8C, 0x69, 0xF9},

	/* Test Set 4 */
	{0x73, 0x06, 0xD6, 0x07},

	/* Test Set 5 */
	{0xE3, 0xD3, 0x6E, 0xF1},

};


/* SNOW-F8-F9 reference vectors  */

/** The maximum number of bytes for a SNOW F8 + F9 frame */
#define F8_F9_MAX_FRAME_COUNT (4*(F9_MAX_FRAME_COUNT > F8_MAX_FRAME_COUNT ?\
				 F8_MAX_FRAME_COUNT   :  F9_MAX_FRAME_COUNT))

/** Contains the plaintext that will be used as input for the SNOW F8 + F9
 * encryption algorithm  */
static uint8_t snow_enc_f8_f9_reference_plaintext[][F8_F9_MAX_FRAME_COUNT] = {
	/* Test Set 1 */ {
	0x05, 0x3F, 0x3D, 0x16, 0x39, 0x01, 0x80, 0x3C, 0xD1, 0x08, 0xD8, 0x8D,
	0x73, 0xAF, 0xEA, 0x79,	0xC8, 0x1E, 0x47, 0x83, 0xC6, 0x95, 0x31, 0x39,
	0x03, 0xC4, 0x18, 0xF1, 0x2B, 0x4C, 0x1A, 0x34,	0x50, 0x6D, 0x73, 0x29,
	0xD2, 0x0F, 0x40, 0xC4, 0x19, 0x6F, 0xE2, 0xD7, 0x87, 0x1A, 0x99, 0x68,
	0x16, 0x09, 0xC3, 0xE7, 0x7E, 0x17, 0x7D, 0x64, 0x9B, 0xA5, 0x39, 0x53,
	0xA6, 0x88, 0x20, 0xA2,	0x0A
	}
};

/** Contains the reference cyphertext for encryption consisting of
    SNOW F8 cyperthext + tail of 32 bits F9 authentication digest
*/
static uint8_t snow_enc_f8_f9_reference_ciphertext[][F8_F9_MAX_FRAME_COUNT] = {
	/* Test Set 1 */{
	0x05, 0xBE, 0x24, 0x7D, 0xB3, 0x8F, 0x91, 0x42, 0x9E, 0x4F, 0x9E, 0x8A,
	0x22, 0xA5, 0x8F, 0x9C,	0x8F, 0xDE, 0x11, 0xBE, 0x0D, 0xF1, 0xEC, 0xA4,
	0xCB, 0x5E, 0x82, 0xD7, 0xCF, 0xD4, 0x20, 0x12,	0xD7, 0x72, 0x47, 0x01,
	0x2A, 0xBD, 0x18, 0x48, 0xB3, 0x0D, 0x4E, 0xE9, 0xAA, 0x1D, 0x7F, 0xFF,
	0x02, 0xDB, 0xA3, 0xE4, 0xC3, 0x46, 0xD2, 0x86, 0x63, 0x17, 0x18, 0x7F,
	0x53, 0x35, 0xBF, 0x92,	0xBE, 0x47, 0x94, 0xEA, 0x2D
	}
};

/** Contains the reference cyphertext for decryption consisting of
    SNOW F8 cyperthext + tail of 32 bits F9 authentication digest.
    This data will be used as input for the SNOW F8 + F9 encryption algorithm.
*/
static uint8_t snow_dec_f8_f9_reference_ciphertext[][F8_F9_MAX_FRAME_COUNT] = {
	/* Test Set 1*/
	{
	0x05, 0x59, 0x03, 0xEE, 0x10, 0x66, 0xEF, 0x1C, 0xBD, 0x65, 0x32, 0x66,
	0x06, 0x65, 0xA4, 0xF7,	0x28, 0x50, 0x42, 0x42, 0xDA, 0x08, 0x05, 0x0A,
	0xFE, 0xEB, 0xC7, 0xCC, 0xE8, 0x55, 0x58, 0xD8,	0x41, 0x36, 0x63, 0x85,
	0x3D, 0xAD, 0x1C, 0x36, 0x8F, 0xDD, 0xF7, 0x06, 0x3A, 0x2B, 0x69, 0x9D,
	0x64, 0xA6, 0x69, 0xB2, 0x94, 0x3E, 0x00, 0x5A, 0x22, 0x67, 0x2D, 0x73,
	0x0A, 0xF8, 0x43, 0x3F,	0xE0, 0x7D, 0x9B, 0x6F, 0xF1
	}
};

/** The length in bits of the reference input (plaintext) data */
static uint32_t snow_enc_f8_f9_reference_length[] = {520};

/** The length in bits of the reference input (cyphertext) data */
static uint32_t snow_dec_f8_f9_reference_length[] = {552};

/**< key length(in bytes) for HMAC-SHA1 */
#define HMAC_MAX_KEY_LEN	20
/*max. plain text data length(in bytes) */
#define HMAC_MAX_DATA_LEN	20

/* HMAC-SHA1 test vector, according to "RFC2202 - Test Cases for HMAC-MD5
 * and HMAC-SHA-1" from P. Cheng(IBM) and R. Glenn(NIST), September 1997.
 */
static uint8_t hmac_sha1_reference_key[][HMAC_MAX_KEY_LEN] = {
	/* Test Set 1 */
	{0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
	 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b},

	/* Test Set 2(RFC Test Set 5) */
	{0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
	 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c},
};

/** length in bits */
static uint32_t hamc_sha1_reference_length[] = { 64, 160 };

static uint8_t hmac_sha1_reference_plaintext[][HMAC_MAX_DATA_LEN] = {
	/* Test Set 1 */
	{0x48, 0x69, 0x20, 0x54, 0x68, 0x65, 0x72, 0x65},	/* "Hi There" */

	/* Test Set 2(RFC Test Set 5) */
	{0x54, 0x65, 0x73, 0x74, 0x20, 0x57, 0x69, 0x74, 0x68, 0x20, 0x54, 0x72,
	 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e},
};

static uint8_t hamc_sha1_reference_digest[][HMAC_SHA1_DIGEST_SIZE] = {
	/* Test Set 1 */
	{0xb6, 0x17, 0x31, 0x86, 0x55, 0x05, 0x72, 0x64, 0xe2, 0x8b, 0xc0, 0xb6,
	 0xfb, 0x37, 0x8c, 0x8e, 0xf1, 0x46, 0xbe, 0x00},

	/* Test Set 2(RFC Test Set 5) */
	{0x4c, 0x1a, 0x03, 0x42, 0x4b, 0x55, 0xe0, 0x7f, 0xe7, 0xf2, 0x7b, 0xe1,
	 0xd5, 0x8b, 0xb9, 0x32, 0x4a, 0x9a, 0x5a, 0x04},
};

/* KASUMI-F8 (Confidetiality) reference vectors,
 * according to ETSI "Document 3: Implementors' test data",
 * from June 2007.
 */

static uint32_t kasumi_f8_reference_count[] = {
	0x72A4F20F, 0xE28BCF7B, 0xFA556B26, 0x398A59B4, 0x72A4F20F };

static uint8_t kasumi_f8_reference_bearer[] = { 0x0C, 0x18, 0x03, 0x05, 0x09 };

static uint8_t kasumi_f8_reference_dir[] = { 0x1, 0x0, 0x1, 0x1, 0x0 };

static uint8_t kasumi_f8_reference_key[][F8_KEY_LEN] = {
	/* Test Set 1 */
	{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10,
	 0x48, 0x81, 0xFF, 0x48},

	/* Test Set 2 */
	{0xEF, 0xA8, 0xB2, 0x22, 0x9E, 0x72, 0x0C, 0x2A, 0x7C, 0x36, 0xEA, 0x55,
	 0xE9, 0x60, 0x56, 0x95},

	/* Test Set 3 */
	{0x5A, 0xCB, 0x1D, 0x64, 0x4C, 0x0D, 0x51, 0x20, 0x4E, 0xA5, 0xF1, 0x45,
	 0x10, 0x10, 0xD8, 0x52},

	/* Test Set 4 */
	{0xD3, 0xC5, 0xD5, 0x92, 0x32, 0x7F, 0xB1, 0x1C, 0x40, 0x35, 0xC6, 0x68,
	 0x0A, 0xF8, 0xC6, 0xD1},

	/* Test Set 5 */
	{0x60, 0x90, 0xEA, 0xE0, 0x4C, 0x83, 0x70, 0x6E, 0xEC, 0xBF, 0x65, 0x2B,
	 0xE8, 0xE3, 0x65, 0x66},
};
#if 0
static uint32_t kasumi_f8_reference_iv[][F8_IV_LEN] = {
	/* Test Set 1 */
	{0x72, 0xA4, 0xF2, 0x0F, 0x61, 0x00, 0x00, 0x00},

	/* Test Set 2 */
	{0xE2, 0x8B, 0xCF, 0x7B, 0xC0, 0x00, 0x00, 0x00},

	/* Test Set 3 */
	{0xFA, 0x55, 0x6B, 0x26, 0x1C, 0x00, 0x00, 0x00},

	/* Test Set 4 */
	{0x39, 0x8A, 0x59, 0xB4, 0x2C, 0x00, 0x00, 0x00},

	/* Test Set 5 */
	{0x72, 0xA4, 0xF2, 0x0F, 0x4C, 0x00, 0x00, 0x00},
};
#endif

/** length in bits */
static uint32_t kasumi_f8_reference_length[] = { 798, 510, 120, 253, 837 };

static uint8_t kasumi_f8_reference_plaintext[][F8_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0x7E, 0xC6, 0x12, 0x72, 0x74, 0x3B, 0xF1, 0x61, 0x47, 0x26, 0x44, 0x6A,
	 0x6C, 0x38, 0xCE, 0xD1, 0x66, 0xF6, 0xCA, 0x76, 0xEB, 0x54, 0x30, 0x04,
	 0x42, 0x86, 0x34, 0x6C, 0xEF, 0x13, 0x0F, 0x92, 0x92, 0x2B, 0x03, 0x45,
	 0x0D, 0x3A, 0x99, 0x75, 0xE5, 0xBD, 0x2E, 0xA0, 0xEB, 0x55, 0xAD, 0x8E,
	 0x1B, 0x19, 0x9E, 0x3E, 0xC4, 0x31, 0x60, 0x20, 0xE9, 0xA1, 0xB2, 0x85,
	 0xE7, 0x62, 0x79, 0x53, 0x59, 0xB7, 0xBD, 0xFD, 0x39, 0xBE, 0xF4, 0xB2,
	 0x48, 0x45, 0x83, 0xD5, 0xAF, 0xE0, 0x82, 0xAE, 0xE6, 0x38, 0xBF, 0x5F,
	 0xD5, 0xA6, 0x06, 0x19, 0x39, 0x01, 0xA0, 0x8F, 0x4A, 0xB4, 0x1A, 0xAB,
	 0x9B, 0x13, 0x48, 0x80},

	/* Test Set 2 */
	{0x10, 0x11, 0x12, 0x31, 0xE0, 0x60, 0x25, 0x3A, 0x43, 0xFD, 0x3F, 0x57,
	 0xE3, 0x76, 0x07, 0xAB, 0x28, 0x27, 0xB5, 0x99, 0xB6, 0xB1, 0xBB, 0xDA,
	 0x37, 0xA8, 0xAB, 0xCC, 0x5A, 0x8C, 0x55, 0x0D, 0x1B, 0xFB, 0x2F, 0x49,
	 0x46, 0x24, 0xFB, 0x50, 0x36, 0x7F, 0xA3, 0x6C, 0xE3, 0xBC, 0x68, 0xF1,
	 0x1C, 0xF9, 0x3B, 0x15, 0x10, 0x37, 0x6B, 0x02, 0x13, 0x0F, 0x81, 0x2A,
	 0x9F, 0xA1, 0x69, 0xD8},

	/* Test Set 3 */
	{0xAD, 0x9C, 0x44, 0x1F, 0x89, 0x0B, 0x38, 0xC4, 0x57, 0xA4, 0x9D, 0x42,
	 0x14, 0x07, 0xE8},

	/* Test Set 4 */
	{0x98, 0x1B, 0xA6, 0x82, 0x4C, 0x1B, 0xFB, 0x1A, 0xB4, 0x85, 0x47, 0x20,
	 0x29, 0xB7, 0x1D, 0x80, 0x8C, 0xE3, 0x3E, 0x2C, 0xC3, 0xC0, 0xB5, 0xFC,
	 0x1F, 0x3D, 0xE8, 0xA6, 0xDC, 0x66, 0xB1, 0xF0},

	/* Test Set 5 */
	{0x40, 0x98, 0x1B, 0xA6, 0x82, 0x4C, 0x1B, 0xFB, 0x42, 0x86, 0xB2, 0x99,
	 0x78, 0x3D, 0xAF, 0x44, 0x2C, 0x09, 0x9F, 0x7A, 0xB0, 0xF5, 0x8D, 0x5C,
	 0x8E, 0x46, 0xB1, 0x04, 0xF0, 0x8F, 0x01, 0xB4, 0x1A, 0xB4, 0x85, 0x47,
	 0x20, 0x29, 0xB7, 0x1D, 0x36, 0xBD, 0x1A, 0x3D, 0x90, 0xDC, 0x3A, 0x41,
	 0xB4, 0x6D, 0x51, 0x67, 0x2A, 0xC4, 0xC9, 0x66, 0x3A, 0x2B, 0xE0, 0x63,
	 0xDA, 0x4B, 0xC8, 0xD2, 0x80, 0x8C, 0xE3, 0x3E, 0x2C, 0xCC, 0xBF, 0xC6,
	 0x34, 0xE1, 0xB2, 0x59, 0x06, 0x08, 0x76, 0xA0, 0xFB, 0xB5, 0xA4, 0x37,
	 0xEB, 0xCC, 0x8D, 0x31, 0xC1, 0x9E, 0x44, 0x54, 0x31, 0x87, 0x45, 0xE3,
	 0x98, 0x76, 0x45, 0x98, 0x7A, 0x98, 0x6F, 0x2C, 0xB0},
};

static uint8_t kasumi_f8_reference_ciphertext[][F8_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0xD1, 0xE2, 0xDE, 0x70, 0xEE, 0xF8, 0x6C, 0x69, 0x64, 0xFB, 0x54, 0x2B,
	 0xC2, 0xD4, 0x60, 0xAA, 0xBF, 0xAA, 0x10, 0xA4, 0xA0, 0x93, 0x26, 0x2B,
	 0x7D, 0x19, 0x9E, 0x70, 0x6F, 0xC2, 0xD4, 0x89, 0x15, 0x53, 0x29, 0x69,
	 0x10, 0xF3, 0xA9, 0x73, 0x01, 0x26, 0x82, 0xE4, 0x1C, 0x4E, 0x2B, 0x02,
	 0xBE, 0x20, 0x17, 0xB7, 0x25, 0x3B, 0xBF, 0x93, 0x09, 0xDE, 0x58, 0x19,
	 0xCB, 0x42, 0xE8, 0x19, 0x56, 0xF4, 0xC9, 0x9B, 0xC9, 0x76, 0x5C, 0xAF,
	 0x53, 0xB1, 0xD0, 0xBB, 0x82, 0x79, 0x82, 0x6A, 0xDB, 0xBC, 0x55, 0x22,
	 0xE9, 0x15, 0xC1, 0x20, 0xA6, 0x18, 0xA5, 0xA7, 0xF5, 0xE8, 0x97, 0x08,
	 0x93, 0x39, 0x65, 0x0F},

	/* Test Set 2 */
	{0x3D, 0xEA, 0xCC, 0x7C, 0x15, 0x82, 0x1C, 0xAA, 0x89, 0xEE, 0xCA, 0xDE,
	 0x9B, 0x5B, 0xD3, 0x61, 0x4B, 0xD0, 0xC8, 0x41, 0x9D, 0x71, 0x03, 0x85,
	 0xDD, 0xBE, 0x58, 0x49, 0xEF, 0x1B, 0xAC, 0x5A, 0xE8, 0xB1, 0x4A, 0x5B,
	 0x0A, 0x67, 0x41, 0x52, 0x1E, 0xB4, 0xE0, 0x0B, 0xB9, 0xEC, 0xF3, 0xE9,
	 0xF7, 0xCC, 0xB9, 0xCA, 0xE7, 0x41, 0x52, 0xD7, 0xF4, 0xE2, 0xA0, 0x34,
	 0xB6, 0xEA, 0x00, 0xEC},

	/* Test Set 3 */
	{0x9B, 0xC9, 0x2C, 0xA8, 0x03, 0xC6, 0x7B, 0x28, 0xA1, 0x1A, 0x4B, 0xEE,
	 0x5A, 0x0C, 0x25},

	/* Test Set 4 */
	{0x5B, 0xB9, 0x43, 0x1B, 0xB1, 0xE9, 0x8B, 0xD1, 0x1B, 0x93, 0xDB, 0x7C,
	 0x3D, 0x45, 0x13, 0x65, 0x59, 0xBB, 0x86, 0xA2, 0x95, 0xAA, 0x20, 0x4E,
	 0xCB, 0xEB, 0xF6, 0xF7, 0xA5, 0x10, 0x15, 0x12},

	/* Test Set 5 */
	{0xDD, 0xB3, 0x64, 0xDD, 0x2A, 0xAE, 0xC2, 0x4D, 0xFF, 0x29, 0x19, 0x57,
	 0xB7, 0x8B, 0xAD, 0x06, 0x3A, 0xC5, 0x79, 0xCD, 0x90, 0x41, 0xBA, 0xBE,
	 0x89, 0xFD, 0x19, 0x5C, 0x05, 0x78, 0xCB, 0x9F, 0xDE, 0x42, 0x17, 0x56,
	 0x61, 0x78, 0xD2, 0x02, 0x40, 0x20, 0x6D, 0x07, 0xCF, 0xA6, 0x19, 0xEC,
	 0x05, 0x9F, 0x63, 0x51, 0x44, 0x59, 0xFC, 0x10, 0xD4, 0x2D, 0xC9, 0x93,
	 0x4E, 0x56, 0xEB, 0xC0, 0xCB, 0xC6, 0x0D, 0x4D, 0x2D, 0xF1, 0x74, 0x77,
	 0x4C, 0xBD, 0xCD, 0x5D, 0xA4, 0xA3, 0x50, 0x31, 0x7A, 0x7F, 0x12, 0xE1,
	 0x94, 0x94, 0x71, 0xF8, 0xA2, 0x95, 0xF2, 0x72, 0xE6, 0x8F, 0xC0, 0x71,
	 0x59, 0xB0, 0x7D, 0x8E, 0x2D, 0x26, 0xE4, 0x59, 0x9E},
};

/* KASUMI-F9 (Integrity) reference vectors,
 * according to ETSI "Document 3: Implementors' test data",
 * from June 2007.
 */

static uint8_t kasumi_f9_reference_key[][F9_KEY_LEN] = {

	/* Test Set 1 */
	{0x2B, 0xD6, 0x45, 0x9F, 0x82, 0xC5, 0xB3, 0x00, 0x95, 0x2C, 0x49, 0x10,
	 0x48, 0x81, 0xFF, 0x48},

	/* Test Set 2 */
	{0xD4, 0x2F, 0x68, 0x24, 0x28, 0x20, 0x1C, 0xAF, 0xCD, 0x9F, 0x97, 0x94,
	 0x5E, 0x6D, 0xE7, 0xB7},

	/* Test Set 3 */
	{0xFD, 0xB9, 0xCF, 0xDF, 0x28, 0x93, 0x6C, 0xC4, 0x83, 0xA3, 0x18, 0x69,
	 0xD8, 0x1B, 0x8F, 0xAB},

	/* Test Set 4 */
	{0xC7, 0x36, 0xC6, 0xAA, 0xB2, 0x2B, 0xFF, 0xF9, 0x1E, 0x26, 0x98, 0xD2,
	 0xE2, 0x2A, 0xD5, 0x7E},

	/* Test Set 5 */
	{0xF4, 0xEB, 0xEC, 0x69, 0xE7, 0x3E, 0xAF, 0x2E, 0xB2, 0xCF, 0x6A, 0xF4,
	 0xB3, 0x12, 0x0F, 0xFD},
};

static uint32_t kasumi_f9_reference_count[] = {
	0x38A6F056, 0x3EDC87E2, 0x36AF6144, 0x14793E41, 0x296F393C };

static uint32_t kasumi_f9_reference_fresh[] = {
	0x05D2EC49, 0xA4F2D8E2, 0x9838F03A, 0x0397E8FD, 0x6B227737 };

static uint8_t kasumi_f9_reference_dir[] = { 0x0, 0x1, 0x1, 0x1, 0x1 };

/** length in bits */
static uint32_t kasumi_f9_reference_length[] = { 189, 254, 319, 384, 1000 };

static uint8_t kasumi_f9_reference_plaintext[][F9_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0x6B, 0x22, 0x77, 0x37, 0x29, 0x6F, 0x39, 0x3C, 0x80, 0x79, 0x35, 0x3E,
	 0xDC, 0x87, 0xE2, 0xE8, 0x05, 0xD2, 0xEC, 0x49, 0xA4, 0xF2, 0xD8, 0xE0
	 },


	/* Test Set 2 */
	{0xB5, 0x92, 0x43, 0x84, 0x32, 0x8A, 0x4A, 0xE0, 0x0B, 0x73, 0x71, 0x09,
	 0xF8, 0xB6, 0xC8, 0xDD, 0x2B, 0x4D, 0xB6, 0x3D, 0xD5, 0x33, 0x98, 0x1C,
	 0xEB, 0x19, 0xAA, 0xD5, 0x2A, 0x5B, 0x2B, 0xC0},

	/* Test Set 3 */
	{0x59, 0x32, 0xBC, 0x0A, 0xCE, 0x2B, 0x0A, 0xBA, 0x33, 0xD8, 0xAC, 0x18,
	 0x8A, 0xC5, 0x4F, 0x34, 0x6F, 0xAD, 0x10, 0xBF, 0x9D, 0xEE, 0x29, 0x20,
	 0xB4, 0x3B, 0xD0, 0xC5, 0x3A, 0x91, 0x5C, 0xB7, 0xDF, 0x6C, 0xAA, 0x72,
	 0x05, 0x3A, 0xBF, 0xF2},

	/* Test Set 4 */
	{0xD0, 0xA7, 0xD4, 0x63, 0xDF, 0x9F, 0xB2, 0xB2, 0x78, 0x83, 0x3F, 0xA0,
	 0x2E, 0x23, 0x5A, 0xA1, 0x72, 0xBD, 0x97, 0x0C, 0x14, 0x73, 0xE1, 0x29,
	 0x07, 0xFB, 0x64, 0x8B, 0x65, 0x99, 0xAA, 0xA0, 0xB2, 0x4A, 0x03, 0x86,
	 0x65, 0x42, 0x2B, 0x20, 0xA4, 0x99, 0x27, 0x6A, 0x50, 0x42, 0x70, 0x09,
	 },

	/* Test Set 5 */
	{0x10, 0xBF, 0xFF, 0x83, 0x9E, 0x0C, 0x71, 0x65, 0x8D, 0xBB, 0x2D, 0x17,
	 0x07, 0xE1, 0x45, 0x72, 0x4F, 0x41, 0xC1, 0x6F, 0x48, 0xBF, 0x40, 0x3C,
	 0x3B, 0x18, 0xE3, 0x8F, 0xD5, 0xD1, 0x66, 0x3B, 0x6F, 0x6D, 0x90, 0x01,
	 0x93, 0xE3, 0xCE, 0xA8, 0xBB, 0x4F, 0x1B, 0x4F, 0x5B, 0xE8, 0x22, 0x03,
	 0x22, 0x32, 0xA7, 0x8D, 0x7D, 0x75, 0x23, 0x8D, 0x5E, 0x6D, 0xAE, 0xCD,
	 0x3B, 0x43, 0x22, 0xCF, 0x59, 0xBC, 0x7E, 0xA8, 0x4A, 0xB1, 0x88, 0x11,
	 0xB5, 0xBF, 0xB7, 0xBC, 0x55, 0x3F, 0x4F, 0xE4, 0x44, 0x78, 0xCE, 0x28,
	 0x7A, 0x14, 0x87, 0x99, 0x90, 0xD1, 0x8D, 0x12, 0xCA, 0x79, 0xD2, 0xC8,
	 0x55, 0x14, 0x90, 0x21, 0xCD, 0x5C, 0xE8, 0xCA, 0x03, 0x71, 0xCA, 0x04,
	 0xFC, 0xCE, 0x14, 0x3E, 0x3D, 0x7C, 0xFE, 0xE9, 0x45, 0x85, 0xB5, 0x88,
	 0x5C, 0xAC, 0x46, 0x06, 0x8B},

};

static uint8_t kasumi_f9_reference_digest[][F9_MAX_FRAME_COUNT] = {
	/* Test Set 1 */
	{0xF6, 0x3B, 0xD7, 0x2C},

	/* Test Set 2 */
	{0xA9, 0xDA, 0xF1, 0xFF},

	/* Test Set 3 */
	{0x15, 0x37, 0xD3, 0x16},

	/* Test Set 4 */
	{0xDD, 0x7D, 0xFA, 0xDD},

	/* Test Set 5 */
	{0xC3, 0x83, 0x83, 0x9D},

};

/* CRC test vector
 * Internal only digest references
 */

#define CRC_MAX_DATA_LEN 3000  /**< max. plain text data length(in bytes) */

static uint32_t crc_reference_length[] = {16, 32, 64, 128, 1152};

static uint8_t crc_reference_plaintext[][CRC_MAX_DATA_LEN] = {
	/* Test Set 1 */
	{0xaa, 0xbb},

	/* Test Set 2 */
	{0xB5, 0x92, 0x43, 0x84},

	/* Test Set 3 */
	{0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff},

	/* Test Set 4 */
	{0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,
	 0xcc, 0xdd, 0xee, 0xff},

	/* Test Set 5 */
	{0x50, 0x4b, 0x03, 0x04, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf2, 0x71,
	 0x29, 0x3b, 0xd5, 0x56, 0xfe, 0xc4, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00,
	 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x4e, 0x65, 0x77, 0x20, 0x54, 0x65,
	 0x78, 0x74, 0x20, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	 0x74, 0x78, 0x74, 0xb5, 0x92, 0x43, 0x84, 0x50, 0x4b, 0x01, 0x02, 0x14,
	 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf2, 0x71, 0x29, 0x3b, 0xd5,
	 0x56, 0xfe, 0xc4, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78,
	 0x74, 0x20, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x74,
	 0x78, 0x74, 0x50, 0x4b, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
	 0x01, 0x00, 0x43, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00
	 },
};

/* internal test values only*/
static uint8_t crc_reference_digest[][CRC_MAX_DATA_LEN] = {
	/* Test Set 1 */
	{0x67, 0x3e, 0x5b, 0x08},
	/* Test Set 2 */
	{0xC9, 0x89, 0xBA, 0xE5},
	/* Test Set 3 */
	{0x3f, 0x60, 0x2b, 0x71},
	/* Test Set 4 */
	{0xCE, 0x3E, 0xBC, 0x68},
	/* Test Set 5 */
	{0x32, 0x17, 0x2E, 0x64},
};

#endif /* __TEST_VECTOR_H */
