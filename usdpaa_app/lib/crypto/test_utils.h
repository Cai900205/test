/* Copyright 2013 Freescale Semiconductor, Inc.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *	 notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *	 notice, this list of conditions and the following disclaimer in the
 *	 documentation and/or other materials provided with the distribution.
 *     * Neither the name of Freescale Semiconductor nor the
 *	 names of its contributors may be used to endorse or promote products
 *	 derived from this software without specific prior written permission.
 *
 *
 * ALTERNATIVELY, this software may be distributed under the terms of the
 * GNU General Public License ("GPL") as published by the Free Software
 * Foundation, either version 2 of that License or (at your option) any
 * later version.
 *
 * THIS SOFTWARE IS PROVIDED BY Freescale Semiconductor ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Freescale Semiconductor BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef __TEST_UTILS_H
#define __TEST_UTILS_H

#include <math.h>
#include <error.h>
#include "thread_priv.h"

#include "qman.h"
#include "sec.h"

#define BMASK_SEC_TEST_MODE    0x00000001 /**< Bit mask for test Mode */
#define BMASK_SEC_TEST_SET     0x00000010 /**< Bit mask for test set */
#define BMASK_SEC_BUFFER_SIZE  0x00000100 /**< Bit mask for buffer size */
#define BMASK_SEC_BUFFER_NUM   0x00001000 /**< Bit mask for number of buffers */
#define BMASK_SEC_ALG	       0x00010000 /**< Bit mask for SEC algo */
#define BMASK_SEC_ITR_NUM      0x00100000 /**< Bit mask for number of iteration */
#define BMASK_SEC_PERF_MODE    0x00111101 /**< valid combination in perf mode */
#define BMASK_SEC_CIPHER_MODE  0x00111011 /**< valid combination in cipher mode */

#define BITS_PER_BYTE	        (8)
#define BYTES_PER_WORD	sizeof(int)
#define ONE_MEGA	    1000000

#define SEC_DESCRIPTORS_SIZE	\
	(ALIGN(sizeof(struct sec_descriptor_t), L1_CACHE_BYTES))

#define QMAN_FQS_SIZE		\
	(2 * ALIGN(sizeof(struct qman_fq), L1_CACHE_BYTES))
/*
 * CIPHER test mode compare ciphertext generated by SEC4.0 whereas it has been
 * skipped in PERF test mode
 */
enum test_mode {
	PERF = 1,
	CIPHER
};

/*
 * Wrapper over strncpy which ensures that the destination is null terminated
 * after strncpy returns (this handles the case in which the source is longer
 * than the destination, case in which strncpy will copy up to the last byte
 * of destination, but it will not add the null-terminating character.
 */
#define SAFE_STRNCPY(d, s, sz)			\
	do {					\
		strncpy((d), (s), (sz));	\
		(d)[(sz)-1] = '\0';		\
	} while (0)
/*
 * Structure used for passing required information to the cleanup handler.
 */
struct cleanup_params {
	uint8_t authnct;
	uint32_t cpu_index;
	unsigned int executed_iterations;
	void *crypto_param;
	struct test_cb *crypto_cb;
};
int test_vector_match(uint32_t *left, uint32_t *right, uint32_t bitlen);
void validate_test(unsigned int itr_num, unsigned int buf_num,
		   unsigned int buf_size);

int worker_fn(struct thread_data *tdata);
int get_cpu_frequency(uint64_t *cpu_freq);

#endif /* __TEST_UTILS_H */
