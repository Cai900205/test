8c8,37
< #include "help.h"
---
> #include <usdpaa/compat.h>
> #include <usdpaa/of.h>
> #include <usdpaa/dma_mem.h>
> #include <usdpaa/fsl_dma.h>
> #include <usdpaa/fsl_srio.h>
> #include <error.h>
> #include <atb_clock.h>
> #include <readline.h>
> #include <assert.h>
> #include <inttypes.h>
> #include <unistd.h>
> #include <sys/time.h>
> 
> #define SEND_THREAD_NUM 2
> #define RECEIVE_THREAD_NUM SEND_THREAD_NUM	/*ctx add*/
> #define SRIO_SYS_ADDR		0x10000000	/* used for srio system addr */
> #define SRIO_WIN_SIZE		0x1000000
> #define THREAD_WIN_SIZE		(SRIO_WIN_SIZE/SEND_THREAD_NUM) /*ctx add*/
> #define SRIO_POOL_PORT_SECT_NUM 4
> #define SRIO_CMD_MIN_NUM	3
> #define SRIO_POOL_PORT_OFFSET\
> 	(SRIO_WIN_SIZE * SRIO_POOL_PORT_SECT_NUM)
> #define SRIO_POOL_SECT_SIZE	SRIO_WIN_SIZE /*POOLSIZE*/
> #define SRIO_POOL_SIZE	0x8000000  /*dma pool size 64M*/
> #define TEST_CMD_NUM		5
> /*ctx add*/
> #define SEND_NUM_OFFSET 0x7ffb00 /*reserve */
> #define PACKET_LENGTH 32768	/*packet length*/
> #define BUFFER_NUM 200		/*buffer number*/
> #define SEND_TOTAL_NUM 100	/*SEND_NUMber*/
79,86c108,112
<     uint8_t curr_port_id;
<     uint8_t test_type;/*test type*/
<     uint8_t test_srio_type;
<     uint8_t bind;
<     uint8_t workers;
<     uint8_t interval;
<     uint32_t time;
<     uint32_t passes;
---
> 	uint8_t curr_port_id;
> 	uint8_t test_type;/*test type*/
> 	uint8_t test_srio_type;
> 	uint8_t start_cpu;
>         uint32_t passes;
91,98c117,123
<     struct dma_ch *dmadev;
<     struct srio_port_data_thread port_data_thread;/*ctx add*/
<     uint8_t srio_type;
<     uint32_t port;
<     uint8_t test_type;
<     int bind;/*ctx add*/
<     uint32_t time;
<     uint32_t passes;
---
> 	struct dma_ch *dmadev;
> 	struct srio_port_data_thread port_data_thread;/*ctx add*/
> 	uint8_t srio_type;
> 	uint32_t port;
>         uint8_t test_type;
> 	int cpu;/*ctx add*/
>         uint32_t passes;
121a147,158
> void usage()
> {
>       printf("[option]: --port          The number of the first port\n");
>       printf("          --test_type     The type of the test\n");
>       printf("          --type          The type of the data packet\n");
>       printf("          --startcpu      The begin of the CPU \n");
>       printf("          --help          The help of the program\n");
>       printf("          --version       The version of the program\n");
> 
> }
> 
> /*ctx add*/
128,132c165
< 		if (!strcmp(arg, "--bind"))
< 		{
< 			cmd_param->bind=1;
< 		}
< 		else if (!strcmp(arg, "--workers") && i + 1 < cmd_num)
---
> 		if (!strcmp(arg, "--port") && i + 1 < cmd_num)
134,138c167
< 			cmd_param->workers = atoi(cmd_in[++i]);
< 		}
< 		else if (!strcmp(arg, "--test_type") && i + 1 < cmd_num)
< 		{
< 			cmd_param->test_type = atoi(cmd_in[++i]);
---
> 			cmd_param->curr_port_id = atoi(cmd_in[++i]) ;
144c173
< 		else if (!strcmp(arg, "--time") && i + 1 < cmd_num)
---
> 		else if (!strcmp(arg, "--test_type") && i + 1 < cmd_num)
146c175
< 			cmd_param->time = strtoul(cmd_in[++i],NULL,10);
---
> 			cmd_param->test_type = atoi(cmd_in[++i]);
148c177
< 		else if (!strcmp(arg, "--interval") && i + 1 < cmd_num)
---
> 		else if (!strcmp(arg, "--startcpu") && i + 1 < cmd_num)
150c179
< 			cmd_param->interval = strtoul(cmd_in[++i],NULL,10);
---
> 			cmd_param->start_cpu = atoi(cmd_in[++i]);
152c181
< 		else if (!strcmp(arg, "--data_type") && i + 1 < cmd_num) 
---
> 		else if (!strcmp(arg, "--type") && i + 1 < cmd_num) 
189a219
> 
192,237c222,250
<     struct task_arg_type *args = arg;
<     struct dma_ch *dmadev = args->dmadev;
<     struct srio_port_data_thread send_data = args->port_data_thread;
<     uint32_t size = PACKET_LENGTH;
<     uint32_t port = args->port;
<     int err = 0,val=0;
<     uint8_t srio_type = args->srio_type;
<     uint8_t test_type = args->test_type;
<     uint64_t src_phys,dest_phys;
<     uint32_t buf_number=0,usebuf_number=0;
<     uint32_t total_buf=BUFFER_NUM;
<     uint64_t total_count=0;
<     uint32_t send_num =0;
<     struct atb_clock *atb_clock=NULL;
<     uint64_t atb_multiplier=0;
<     int atb_flag=0;
<     cpu_set_t cpuset;
<     double speed=0.0;
<     uint32_t passes=args->passes;
<     uint32_t time=args->time;
<     uint8_t bind=args->bind;
<     int result=-1;
<     struct timeval tm_start,tm_end;	
<     CPU_ZERO(&cpuset);
<     if(bind)
<     {
<         if(sched_getaffinity(0,sizeof(cpuset),&cpuset) == -1)
<         {
<            printf("warning: cound not get cpu affinity!\n");
<            return (void*)-1;
<         }
< 	    result = pthread_setaffinity_np(pthread_self(),sizeof(cpu_set_t),&cpuset);
<         if (result)
< 	    {
< 		   printf("[SRIO_TEST]: Bind cpu  failed\n");
<            fflush(stdout);
< 		   return (void*)-1;
< 	    }
< 
<     }
<     uint8_t data=1;
<     uint32_t pi;
<     gettimeofday(&tm_start,NULL);
<     volatile struct srio_ctl *pcnt=NULL; 
<     struct srio_ctl ctl_info;
<     memset(&ctl_info,0,sizeof(struct srio_ctl));
---
> 	struct task_arg_type *args = arg;
> 	struct dma_ch *dmadev = args->dmadev;
> 	struct srio_port_data_thread send_data = args->port_data_thread;
> 	uint32_t size = PACKET_LENGTH;
> 	uint32_t port = args->port;
> 	int err = 0,val=0;
> 	uint8_t srio_type = args->srio_type;
> 	uint8_t test_type = args->test_type;
> 	uint64_t src_phys,dest_phys;
> 	uint32_t buf_number=0,usebuf_number=0;
> 	uint32_t total_buf=BUFFER_NUM;
>         uint64_t total_count=0;
> 	uint32_t send_num =0;
> 	struct atb_clock *atb_clock=NULL;
> 	uint64_t atb_multiplier=0;
> 	int atb_flag=0;
> 	cpu_set_t cpuset;
>         double speed=0.0;
> 	struct timeval tm_start,tm_end;	
> 	CPU_ZERO(&cpuset);
> 	CPU_SET(args->cpu,&cpuset);
> 	err = pthread_setaffinity_np(pthread_self(),sizeof(cpu_set_t),&cpuset);
> 	uint8_t data=0;
>         uint32_t passes=args->passes;
>         uint32_t pi;
>         gettimeofday(&tm_start,NULL);
>         volatile struct srio_ctl *pcnt=NULL; 
>         struct srio_ctl ctl_info;
>         memset(&ctl_info,0,sizeof(struct srio_ctl));
239,242c252,255
<     pcnt=(struct srio_ctl *)(send_data.virt.write_recv_data);
<     printf("###before send data####\n");
<     for(pi=0;(pi<passes||(!passes));)
<     {	
---
>         pcnt=(struct srio_ctl *)(send_data.virt.write_recv_data);
> //	while (1) 
>         for(pi=0;(pi<passes||(!passes));)
> 	{	
264,270c277,283
<                         if(diff>5)
<                         {
<                                 double da_lu=total_count*size/1024/1024/diff;
<                                 printf("  port:%d  length(byte): %-15u time(s): %-15f  avg MB/s: %-15f total_count:%lld \n",port,size,diff,da_lu,total_count);
< 			        fflush(stdout);
< 			        if(da_lu<1000)
< 			        {
---
>                        if(diff>5)
>                        {
>                            double da_lu=total_count*size/1024/1024/diff;
>                            printf("CPU:%d  port:%d  length(byte): %-15u time(s): %-15f  avg MB/s: %-15f total_count:%lld \n",args->cpu,port,size,diff,da_lu,total_count);
> 			   fflush(stdout);
> 			   if(da_lu<1000)
> 			   {
273,277c286,289
< 			        }                           
<                                 total_count=0;
<                                 gettimeofday(&tm_start,NULL);	
<                                pi++; 
<                         }
---
> 			   }                           
>                            total_count=0;
>                            gettimeofday(&tm_start,NULL);	
>                        }
282c294
< 		
---
> 		//	buf_number = *(volatile uint32_t *)send_data.virt.write_recv_data;
308c320
< //		
---
> 				//memset((send_data.virt.write_data_prep+offset),0,sizeof(struct srio_packet));
312c324
< 		
---
> 				//	memcpy((send_data.virt.write_data_prep+SEND_NUM_OFFSET),&usebuf_number,sizeof(uint32_t));
331c343,345
<      pthread_exit(NULL);
---
> //err_dma: printf("Send error!\n");
> //	 fflush(stdout);
> 	 pthread_exit(NULL);
336,337c350,351
<      struct task_arg_type *args = arg;
<      struct dma_ch *dmadev = args->dmadev;
---
> 	struct task_arg_type *args = arg;
> 	struct dma_ch *dmadev = args->dmadev;
339c353
<      struct srio_port_data_thread receive_data = args->port_data_thread;
---
> 	struct srio_port_data_thread receive_data = args->port_data_thread;
350,353d363
< 	uint32_t passes=args->passes;
<         uint32_t time=args->time;
<         uint8_t bind=args->bind;
<         int result=-1;
355,368c365,372
<     if(bind)
<     {
<         if(sched_getaffinity(0,sizeof(cpuset),&cpuset) == -1)
<         {
<            printf("warning: cound not get cpu affinity!\n");
<            return (void*)-1;
<         }
< 	    result = pthread_setaffinity_np(pthread_self(),sizeof(cpu_set_t),&cpuset);
<         if (result)
< 	    {
< 		   printf("[SRIO_TEST]: Bind cpu  failed\n");
<                    fflush(stdout);
< 		   return (void*)-1;
< 	    }
---
> 	CPU_SET(args->cpu,&cpuset);
> 	err = pthread_setaffinity_np(pthread_self(),sizeof(cpu_set_t),&cpuset);
> 
> 	if(err){
> 		printf("(%d)fail:pthread_setaffinity_np()\n",args->cpu);
> 		fflush(stdout);
> 		return NULL;
> 	}
370d373
<     }
378,382c381,384
<     volatile struct srio_ctl *pcnt=NULL;
<     struct srio_ctl ctl_info;
<     printf("ctl size:%d\n",sizeof(struct srio_ctl));
< 
<     memset(&ctl_info,0,sizeof(struct srio_ctl));
---
>         volatile struct srio_ctl *pcnt=NULL;
>         struct srio_ctl ctl_info;
>         printf("ctl size:%d\n",sizeof(struct srio_ctl));
>         memset(&ctl_info,0,sizeof(struct srio_ctl));
383a386
>         //memset(receive_data.virt.write_recv_data,0x5a,PACKET_LENGTH*BUFFER_NUM);
388c391
<     printf("before send ctl########\n");
---
>         printf("before send ctl ########################\n");
396,399c399,402
<     printf("send ctl########\n");
<     pcnt=(struct srio_ctl *)(receive_data.virt.write_recv_data+SEND_NUM_OFFSET);
<     uint8_t data=1;
<     uint32_t receive_total=0;
---
>         printf(" send ctl ########################\n");
>         pcnt=(struct srio_ctl *)(receive_data.virt.write_recv_data+SEND_NUM_OFFSET);
> 	uint8_t data=0;
>         uint32_t receive_total=0;
401,404c404,409
<     uint32_t pi;
<  
<     for(pi=0;(pi<passes||(!passes));)
<     {
---
>         uint32_t passes=args->passes;
>         uint32_t pi;
> 
> //	while (1) 
>         for(pi=0;(pi<passes||(!passes));)
> 	{
407c412
< 
---
> //		receive_num = *(volatile uint32_t *)(receive_data.virt.write_recv_data+SEND_NUM_OFFSET);
430,433c435,438
< 				       printf("Receive ERROR Data:%02x  Test Data:%02x error Number:%08x port:%d\n",pdata,data,error_count,port);
< 				       fflush(stdout);
<                                        error_count=0;
<                                 } 
---
> 				    printf("Receive ERROR Data:%02x  Test Data:%02x error Number:%08x port:%d\n",pdata,data,error_count,port);
> 				    fflush(stdout);
>                                     error_count=0;
>                                 }
447,448c452
<                         if(pi==passes)
<                            break;
---
> 			//memset((receive_data.virt.write_recv_data+offset),0x5a,sizeof(struct srio_packet)*packet_num);
451a456
> 	//		memcpy(receive_data.virt.write_data_prep,&total_buf,sizeof(uint32_t));
463c468
< 		}
---
> 		}	
464a470
> 		
465a472,473
> //	printf("Receive error!\n");
> //	fflush(stdout);
521a530,537
> static void cmd_format_print(void)
> {
> 	printf("-----------------SRIO APP CMD FORMAT-----------------\n");
> 	printf("srio_test --port --type --test_type --startcpu \n");
> 	printf("-----------------------------------------------------\n");
>         fflush(stdout);
> }
> 
547c563,565
<         cmd_param.curr_port_id=0;
---
> 	cmd_param.curr_port_id=0;
> 	cmd_param.start_cpu=1;
> 	cmd_param.passes=10;
550,554c568,572
<         cmd_param.time=60;
<         cmd_param.passes=1000;
<         cmd_param.bind=0;
<         cmd_param.workers=4;
<         cmd_param.interval=1;
---
> 	if (argc<3)
> 	{
> 		cmd_format_print();
> 		return -1;
> 	}
560c578
< 	if (err < 0)
---
> 	if ((err < 0) ||(argc<3))
561a580
> 		cmd_format_print();
564a584
> 	
624c644,645
< 	        if (fsl_srio_port_connected(sriodev) & (0x1 << i)) {
---
> 		
> 		if (fsl_srio_port_connected(sriodev) & (0x1 << i)) {
630,633c651,654
< 	        } else {
< 			       printf("SRIO port %d error!\n", i + 1);
< 			       fflush(stdout);
< 			       return -errno;
---
> 		} else {
> 			printf("SRIO port %d error!\n", i + 1);
> 			fflush(stdout);
> 			return -errno;
652c673
<         for(i=0;i<1;i++)
---
> 	for(i=0;i<1;i++)
673d693
< 		
682,683c702
< 		task_arg_receive[i].port_data_thread.port_info.range_start = port_data[1-port].port_info.range_start+THREAD_WIN_SIZE*i;
<  
---
> 		task_arg_receive[i].port_data_thread.port_info.range_start = port_data[1-port].port_info.range_start+THREAD_WIN_SIZE*i; 
684a704
> 
686,687c706
< 		task_arg_receive[i].bind=cmd_param.bind;/*bind cpu*/
< 		task_arg_receive[i].time=cmd_param.time;/*bind cpu*/
---
> 		task_arg_receive[i].cpu = cmd_param.start_cpu;/*bind cpu*/
702,703c721
< 		task_arg_send[i].bind=cmd_param.bind;
< 		task_arg_send[i].time=cmd_param.time;
---
> 		task_arg_send[i].cpu = cmd_param.start_cpu+1;/*bind cpu*/
705d722
< 
735d751
<    //     sleep(5);
770,771c786
< 		task_arg_receive[i].bind=cmd_param.bind;/*bind cpu*/
< 		task_arg_receive[i].time=cmd_param.time;/*bind cpu*/
---
> 		task_arg_receive[i].cpu = cmd_param.start_cpu+2;/*bind cpu*/
786,787c801
< 		task_arg_send[i].bind=cmd_param.bind;
< 		task_arg_send[i].time=cmd_param.time;
---
> 		task_arg_send[i].cpu = cmd_param.start_cpu+3;/*bind cpu*/
789d802
< 
799c812,813
<                         sleep(1);	
---
>                         sleep(1);
> 	
818d831
< 
