/*
 * Copyright (C) Mellanox Technologies Ltd. 2001-2013.  ALL RIGHTS RESERVED.
 *
 * This software product is a proprietary product of Mellanox Technologies Ltd.
 * (the "Company") and all right, title, and interest in and to the software product,
 * including all associated intellectual property rights, are and shall
 * remain exclusively with the Company.
 *
 * This software is made available under either the GPL v2 license or a commercial license.
 * If you wish to obtain a commercial license, please contact Mellanox at support@mellanox.com.
 */


possible extra assertions removed. May need a review in the future.

Index: lwip/src/core/tcp_in.c
===================================================================
--- lwip.orig/src/core/tcp_in.c	2011-03-03 18:13:12.000000000 +0200
+++ lwip/src/core/tcp_in.c	2011-03-03 18:13:51.945419000 +0200
@@ -1004,10 +1004,6 @@ tcp_receive(struct tcp_pcb *pcb)
         tcp_seg_free(next);
 
         LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
-        if (pcb->snd_queuelen != 0) {
-          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
-                      pcb->unsent != NULL);
-        }
       }
 
       /* If there's nothing left to acknowledge, stop the retransmit
Index: lwip/src/core/tcp_out.c
===================================================================
--- lwip.orig/src/core/tcp_out.c	2011-03-03 18:13:19.000000000 +0200
+++ lwip/src/core/tcp_out.c	2011-03-03 18:14:22.820970000 +0200
@@ -323,8 +323,6 @@ tcp_write_checks(struct tcp_pcb *pcb, u1
     return ERR_MEM;
   }
   if (pcb->snd_queuelen != 0) {
-    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
-      pcb->unacked != NULL || pcb->unsent != NULL);
   } else {
     LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
       pcb->unacked == NULL && pcb->unsent == NULL);
Index: lwip/src/include/lwip/tcp_impl.h
===================================================================
--- lwip.orig/src/include/lwip/tcp_impl.h	2011-03-03 18:11:21.000000000 +0200
+++ lwip/src/include/lwip/tcp_impl.h	2011-03-03 18:12:05.412872000 +0200
@@ -339,6 +339,7 @@ extern struct tcp_pcb *tcp_tmp_pcb;
 #if TCP_DEBUG_PCB_LISTS
 #define TCP_REG(pcbs, npcb) do {\
                             LWIP_DEBUGF(TCP_DEBUG, ("TCP_REG %p local port %d\n", (npcb), (npcb)->local_port)); \
+                            LWIP_PLATFORM_DIAG(("%s:%d TCP_REG %p local port %d\n", __FUNCTION__, __LINE__, (npcb), (npcb)->local_port)); \
                             for(tcp_tmp_pcb = *(pcbs); \
           tcp_tmp_pcb != NULL; \
         tcp_tmp_pcb = tcp_tmp_pcb->next) { \
@@ -352,8 +353,8 @@ extern struct tcp_pcb *tcp_tmp_pcb;
               tcp_timer_needed(); \
                             } while(0)
 #define TCP_RMV(pcbs, npcb) do { \
-                            LWIP_ASSERT("TCP_RMV: pcbs != NULL", *(pcbs) != NULL); \
                             LWIP_DEBUGF(TCP_DEBUG, ("TCP_RMV: removing %p from %p\n", (npcb), *(pcbs))); \
+                            LWIP_PLATFORM_DIAG(("%s:%d TCP_RMV: removing %p from %p\n", __FUNCTION__, __LINE__, (npcb), *(pcbs))); \
                             if(*(pcbs) == (npcb)) { \
                                *(pcbs) = (*pcbs)->next; \
                             } else for(tcp_tmp_pcb = *(pcbs); tcp_tmp_pcb != NULL; tcp_tmp_pcb = tcp_tmp_pcb->next) { \
