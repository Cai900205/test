/*
 * Copyright (C) Mellanox Technologies Ltd. 2001-2013.  ALL RIGHTS RESERVED.
 *
 * This software product is a proprietary product of Mellanox Technologies Ltd.
 * (the "Company") and all right, title, and interest in and to the software product,
 * including all associated intellectual property rights, are and shall
 * remain exclusively with the Company.
 *
 * This software is made available under either the GPL v2 license or a commercial license.
 * If you wish to obtain a commercial license, please contact Mellanox at support@mellanox.com.
 */

Support for contiguous pages.
Allocating ang registering memory block from out side LWIP.

diff -p -u -Naur orig_lwip/src/core/memp.c lwip/src/core/memp.c
--- orig_lwip/src/core/memp.c	2012-09-10 14:51:46.788280000 +0300
+++ lwip/src/core/memp.c	2012-09-10 15:01:06.418288000 +0300
@@ -334,46 +334,6 @@ memp_overflow_init(void)
 }
 #endif /* MEMP_OVERFLOW_CHECK */
 
-
-int
-static memp_hugetlb_alloc(void)
-{
-	size_t hugepagemask = 4 * 1024 * 1024 - 1;
-	memp_size = (memp_size + hugepagemask) & (~hugepagemask);
-
-	memp_shmid = shmget(IPC_PRIVATE, memp_size, SHM_HUGETLB | IPC_CREAT | SHM_R | SHM_W);
-	if (memp_shmid < 0) {
-		LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: huge table allocation failed"));
-		return -1;
-	}
-	memp_memory = shmat(memp_shmid, NULL, 0);
-	if (memp_memory == (void*)-1) {
-		LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: shared memory attach failure"));
-		return -1;
-	}
-	if (shmctl(memp_shmid, IPC_RMID, NULL)) {
-		LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,("memp_malloc: shared memory control mark 'to be destroyed' failed"));
-	}
-	return 0;
-}
-
-void
-memp_cleanup(void)
-{
-	pthread_mutex_lock(&memory_pool_lock);
-	if (memp_shmid >= 0) {
-		if (shmdt(memp_memory) != 0)
-			LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_cleanup: shmem detach failure"));
-	}
-	 else {
-		 if (memp_memory) {
-			 free(memp_memory);
-			 memp_memory = NULL;
-		 }
-	 }
-	pthread_mutex_unlock(&memory_pool_lock);
-}
-
 /**
  * Initialize this module.
  * 
@@ -387,11 +347,6 @@ memp_init(void)
 
   pthread_mutex_lock(&memory_pool_lock);
 
-  if (memp_hugetlb_alloc())
-	  memp_memory = malloc(memp_size);
-
-  LWIP_ERROR("Memory allocation failed failed", memp_memory != NULL, return);
-
   for (i = 0; i < MEMP_MAX; ++i) {
     MEMP_STATS_AVAIL(used, i, 0);
     MEMP_STATS_AVAIL(max, i, 0);
@@ -551,4 +506,10 @@ memp_get_pool_start(void)
 	return memp_memory;
 }
 
+void
+memp_set_pool_start(void * addr)
+{
+       memp_memory = (u8_t *) addr;
+}
+
 #endif /* MEMP_MEM_MALLOC */
diff -p -u -Naur orig_lwip/src/include/lwip/memp.h lwip/src/include/lwip/memp.h
--- orig_lwip/src/include/lwip/memp.h	2012-09-10 14:51:46.805280000 +0300
+++ lwip/src/include/lwip/memp.h	2012-09-10 15:01:56.403997000 +0300
@@ -98,7 +98,6 @@ struct memp_malloc_helper
 };
 #endif /* MEM_USE_POOLS */
 
-void  memp_cleanup(void);
 void  memp_init(void);
 
 #if MEMP_OVERFLOW_CHECK
@@ -111,6 +110,7 @@ void  memp_free(memp_t type, void *mem);
 
 size_t memp_get_pool_size(void);
 u8_t *memp_get_pool_start(void);
+void  memp_set_pool_start(void * addr);
 
 #endif /* MEMP_MEM_MALLOC */
 
