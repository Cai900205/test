.\" -*- nroff -*-
.\"
.TH IBV_EXP_QUERY_DEVICE 3 2014-04-09 libibverbs "Libibverbs Programmer's Manual"
.SH "NAME"
ibv_exp_query_device \- query an RDMA device's attributes
.SH "SYNOPSIS"
.nf
.B #include <infiniband/verbs_exp.h>
.sp
.BI "int ibv_exp_query_device(struct ibv_context " "*context",
.BI "                     struct ibv_exp_device_attr " "*attr" );
.fi
.SH "DESCRIPTION"
.B ibv_exp_query_device()
returns the attributes of the device with context
.I context\fR.
The argument
.I attr
is a pointer to an ibv_exp_device_attr struct, as defined in <infiniband/verbs_exp.h>.
.PP
.nf
struct ibv_exp_device_attr {
.in +8
char                    fw_ver[64];             /* FW version */
uint64_t                node_guid;              /* Node GUID (in network byte order) */
uint64_t                sys_image_guid;         /* System image GUID (in network byte order) */
uint64_t                max_mr_size;            /* Largest contiguous block that can be registered */
uint64_t                page_size_cap;          /* Supported memory shift sizes */
uint32_t                vendor_id;              /* Vendor ID, per IEEE */
uint32_t                vendor_part_id;         /* Vendor supplied part ID */
uint32_t                hw_ver;                 /* Hardware version */
int                     max_qp;                 /* Maximum number of supported QPs */
int                     max_qp_wr;              /* Maximum number of outstanding WR on any work queue */
int                     reserved;               /* Place holder to align with ibv_device_attr */
int                     max_sge;                /* Maximum number of s/g per WR for non-RD QPs */
int                     max_sge_rd;             /* Maximum number of s/g per WR for RD QPs */
int                     max_cq;                 /* Maximum number of supported CQs */
int                     max_cqe;                /* Maximum number of CQE capacity per CQ */
int                     max_mr;                 /* Maximum number of supported MRs */
int                     max_pd;                 /* Maximum number of supported PDs */
int                     max_qp_rd_atom;         /* Maximum number of RDMA Read & Atomic operations that can be outstanding per QP */
int                     max_ee_rd_atom;         /* Maximum number of RDMA Read & Atomic operations that can be outstanding per EEC */
int                     max_res_rd_atom;        /* Maximum number of resources used for RDMA Read & Atomic operations by this HCA as the Target */
int                     max_qp_init_rd_atom;    /* Maximum depth per QP for initiation of RDMA Read & Atomic operations */
int                     max_ee_init_rd_atom;    /* Maximum depth per EEC for initiation of RDMA Read & Atomic operations */
enum ibv_exp_atomic_cap exp_atomic_cap;         /* Atomic operations support level */
int                     max_ee;                 /* Maximum number of supported EE contexts */
int                     max_rdd;                /* Maximum number of supported RD domains */
int                     max_mw;                 /* Maximum number of supported MWs */
int                     max_raw_ipv6_qp;        /* Maximum number of supported raw IPv6 datagram QPs */
int                     max_raw_ethy_qp;        /* Maximum number of supported Ethertype datagram QPs */
int                     max_mcast_grp;          /* Maximum number of supported multicast groups */
int                     max_mcast_qp_attach;    /* Maximum number of QPs per multicast group which can be attached */
int                     max_total_mcast_qp_attach;/* Maximum number of QPs which can be attached to multicast groups */
int                     max_ah;                 /* Maximum number of supported address handles */
int                     max_fmr;                /* Maximum number of supported FMRs */
int                     max_map_per_fmr;        /* Maximum number of (re)maps per FMR before an unmap operation in required */
int                     max_srq;                /* Maximum number of supported SRQs */
int                     max_srq_wr;             /* Maximum number of WRs per SRQ */
int                     max_srq_sge;            /* Maximum number of s/g per SRQ */
uint16_t                max_pkeys;              /* Maximum number of partitions */
uint8_t                 local_ca_ack_delay;     /* Local CA ack delay */
uint8_t                 phys_port_cnt;          /* Number of physical ports */
uint32_t                comp_mask;              /* Compatibility mask that defines which struct members of ibv_exp_device_attr exist and valid */
                                                /* Use enum ibv_exp_device_attr_comp_mask */
struct ibv_exp_device_calc_cap calc_cap;        /* Capabilities of the device to do CALC operations */
uint64_t                timestamp_mask;         /* The valid timestamp mask. This field indicates the number of bits the device supports for timestamping */
uint64_t                hca_core_clock;         /* HCA core frequency*/
uint64_t                exp_device_cap_flags;   /* HCA experimental capabilities mask*/
int                     max_dc_req_rd_atom;     /* Max number of outstanding rmda/atomic requests that can be issued by the requestor */
int                     max_dc_res_rd_atom;     /* Max number of outstanding rmda/atomic requests that can be issued by the responder */
int                     inline_recv_sz;         /* Inline receive size*/
uint32_t                max_rss_tbl_sz;         /* Max RSS table size*/
struct ibv_exp_ext_atomics_params ext_atom;     /* Extended Atomics params */
struct ibv_exp_umr_caps umr_caps;               /* UMR capabilities */
struct ibv_exp_odp_caps	odp_caps;              /* On-Demand Paging capabilities */
int                     max_dct;                /* Max DC targets */
.in -8
};

struct ibv_exp_ext_atomics_params {
.in +8
uint64_t                log_atomic_arg_sizes;  /* bit-mask of supported sizes */
uint32_t                max_fa_bit_boundary;   /* Max fech and add bit boundary */
uint32_t                log_max_atomic_inline; /* log of the maximum atomic inline size */
.in -8
};

struct ibv_exp_umr_caps {
.in +8
uint32_t                max_klm_list_size;        /* maximum number of klms that can be used to create umr */
uint32_t                max_send_wqe_inline_klms; /* maximum number of klms that can be used to create UMR using inline */
uint32_t                max_umr_recursion_depth;  /* maximum recursion depth we can use to create klm using other klms */
uint32_t                max_umr_stride_dimension; /* maximum dimension of the klm */
.in -8
};

struct ibv_exp_odp_caps {
	uint64_t	general_odp_caps;  /* Mask with enum ibv_odp_general_cap_bits */
	struct {
		uint32_t	rc_odp_caps;      /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
		uint32_t	uc_odp_caps;      /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
		uint32_t	ud_odp_caps;      /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
		uint32_t	dc_odp_caps;      /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
		uint32_t	xrc_odp_caps;     /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
		uint32_t	raw_eth_odp_caps; /* Mask with enum ibv_odp_tranport_cap_bits to know which operations are supported. */
	} per_transport_caps;
};

.fi
.SH "RETURN VALUE"
.B ibv_exp_query_device()
returns 0 on success, or the value of errno on failure (which indicates the failure reason).
.SH "NOTES"
The maximum values returned by this function are the upper limits of
supported resources by the device.  However, it may not be possible to
use these maximum values, since the actual number of any resource that
can be created may be limited by the machine configuration, the amount
of host memory, user permissions, and the amount of resources already
in use by other users/processes.
.SH "SEE ALSO"
.BR ibv_open_device (3),
.BR ibv_query_port (3),
.BR ibv_query_pkey (3),
.BR ibv_query_gid (3)
.SH "AUTHORS"
.TP
Majd Dibbiny <majd@mellanox.com>
