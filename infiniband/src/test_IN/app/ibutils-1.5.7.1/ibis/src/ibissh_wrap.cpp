/*
 * FILE : swig_wrap.c
 *
 * This file was automatically generated by :
 * Simplified Wrapper and Interface Generator (SWIG)
 * Version 1.1 (Patch 5)
 *
 * Portions Copyright (c) 1995-1998
 * The University of Utah and The Regents of the University of California.
 * Permission is granted to distribute this file in any manner provided
 * this notice remains intact.
 *
 * Do not make changes to this file--changes will be lost!
 *
 */


#define SWIGCODE
/* Implementation : TCL 8.0 */

#define INCLUDE_TCL    <tcl.h>
#define INCLUDE_TK     <tk.h>
#include INCLUDE_TCL
#include <string.h>
#include <stdlib.h>
#define SWIGTCL
#define SWIGTCL8
/*
 * $Header: /b2/dmb/SWIG/SWIG1.0b3/swig_lib/tcl/RCS/swigtcl.cfg,v 1.1 1996/05/22 19:47:45 beazley Exp $
 *
 * swigtcl.cfg
 *
 * This file is modified from a platform independent file provided
 * by Sun.   With any luck this will allow SWIG generated wrapper
 * files to work on Unix, Windows, and Macintosh.
 *
 * Revision History
 * $Log: swigtcl.cfg,v $
 * Revision 1.1  1996/05/22 19:47:45  beazley
 * Initial revision
 *
 *
 * -- Dave Beazley, May 2, 1996.
 *
 *	This file is an example of a Tcl dynamically loadable extension.
 *
 * Copyright (c) 1996 by Sun Microsystems, Inc.
 *
 * See the file "license.terms" for information on usage and redistribution
 * of this file, and for a DISCLAIMER OF ALL WARRANTIES.
 *
 */

#if defined(__WIN32__)
#   define WIN32_LEAN_AND_MEAN
#   include <windows.h>
#   undef WIN32_LEAN_AND_MEAN

/*
 * VC++ has an alternate entry point called DllMain, so we need to rename
 * our entry point.
 */

#   if defined(_MSC_VER)
#	define SWIGEXPORT(a,b) __declspec(dllexport) a b
#	define DllEntryPoint DllMain
#   else
#	if defined(__BORLANDC__)
#	    define SWIGEXPORT(a,b) a _export b
#	else
#	    define SWIGEXPORT(a,b) a b
#	endif
#   endif
#else
#   define SWIGEXPORT(a,b) a b
#endif

/*
 *----------------------------------------------------------------------
 *
 * DllEntryPoint --
 *
 *	This wrapper function is used by Windows to invoke the
 *	initialization code for the DLL.  If we are compiling
 *	with Visual C++, this routine will be renamed to DllMain.
 *	routine.
 *
 * Results:
 *	Returns TRUE;
 *
 * Side effects:
 *	None.
 *
 *----------------------------------------------------------------------
 */

#ifdef __WIN32__
BOOL APIENTRY
DllEntryPoint(HINSTANCE hInst, DWORD reason, LPVOID reserved)
{
    return TRUE;
}
#endif

/**************************************************************************
 * $Header:$
 *
 * tcl8ptr.swg
 *
 * This file provides type-checked pointer support to Tcl 8.0.
 * Pointers are installed as new kinds of Tcl 8.0 objects consisting
 * of the following structure
 *
 * typedef struct {
 *         char     *name;            Name of the datatype
 *         void     *value;           Value of the pointer
 * } Tcl_SwigPtr;
 *
 * While we still need to perform string comparisons on the
 * type-name, this function no longer needs to convert pointer
 * values to hex so it should be a little faster.
 *
 * New Tcl datatypes are defined by the following data structure.
 *
 * typedef struct Tcl_ObjType {
 *              char *name;
 *              Tcl_FreeInternalRepProc *freeIntRepProc;
 *              Tcl_DupInternalRepProc *dupIntRepProc;
 *              Tcl_UpdateStringProc *updateStringProc;
 *              Tcl_SetFromAnyProc *setFromAnyProc;
 *             } Tcl_ObjType;
 *
 * Functions for manipulating SWIG pointers in wrapper code are:
 *
 *     void *SWIG_SetPointerObj(objPtr, ptr, type)
 *     char *SWIG_GetPointerFromObj(objPtr, *ptr, type)
 *
 **********************************************************************/

#ifdef SWIG_GLOBAL
#include <tcl.h>
#ifdef __cplusplus
#define SWIGSTATIC extern "C"
#else
#define SWIGSTATIC
#endif
#endif

#ifndef SWIGSTATIC
#define SWIGSTATIC static
#endif

/* These are internal variables.   Should be static */

typedef struct SwigPtrType {
  char               *name;
  int                 len;
  void               *(*cast)(void *);
  struct SwigPtrType *next;
} SwigPtrType;

/* Pointer cache structure */

typedef struct {
  int                 stat;               /* Status (valid) bit             */
  SwigPtrType        *tp;                 /* Pointer to type structure      */
  char                name[256];          /* Given datatype name            */
  char                mapped[256];        /* Equivalent name                */
} SwigCacheType;

static int SwigPtrMax  = 64;           /* Max entries that can be currently held */
static int SwigPtrN    = 0;            /* Current number of entries              */
static int SwigPtrSort = 0;            /* Status flag indicating sort            */
static int SwigStart[256];             /* Array containing start locations (for searching) */
static SwigPtrType *SwigPtrTable = 0;  /* Table containing pointer equivalences  */

/* Cached values */

#define SWIG_CACHESIZE  8
#define SWIG_CACHEMASK  0x7
static SwigCacheType SwigCache[SWIG_CACHESIZE];
static int SwigCacheIndex = 0;
static int SwigLastCache = 0;

/* Sort comparison function */
static int swigsort(const void *data1, const void *data2) {
	SwigPtrType *d1 = (SwigPtrType *) data1;
	SwigPtrType *d2 = (SwigPtrType *) data2;
	return strcmp(d1->name,d2->name);
}

/* Binary Search function */
static int swigcmp(const void *key, const void *data) {
  char *k = (char *) key;
  SwigPtrType *d = (SwigPtrType *) data;
  return strncmp(k,d->name,d->len);
}


/*---------------------------------------------------------------------
 * SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *))
 *
 * Register a new type-mapping with the type-checking system.
 *---------------------------------------------------------------------*/

SWIGSTATIC
void SWIG_RegisterMapping(char *origtype, char *newtype, void *(*cast)(void *)) {

  int i;
  SwigPtrType *t = 0, *t1;

  if (!SwigPtrTable) {
    SwigPtrTable = (SwigPtrType *) malloc(SwigPtrMax*sizeof(SwigPtrType));
    SwigPtrN = 0;
  }
  if (SwigPtrN >= SwigPtrMax) {
    SwigPtrMax = 2*SwigPtrMax;
    SwigPtrTable = (SwigPtrType *) realloc(SwigPtrTable,SwigPtrMax*sizeof(SwigPtrType));
  }
  for (i = 0; i < SwigPtrN; i++)
    if (strcmp(SwigPtrTable[i].name,origtype) == 0) {
      t = &SwigPtrTable[i];
      break;
    }
  if (!t) {
    t = &SwigPtrTable[SwigPtrN];
    t->name = origtype;
    t->len = strlen(origtype);
    t->cast = 0;
    t->next = 0;
    SwigPtrN++;
  }
  while (t->next) {
    if (strcmp(t->name,newtype) == 0) {
      if (cast) t->cast = cast;
      return;
    }
    t = t->next;
  }
  t1 = (SwigPtrType *) malloc(sizeof(SwigPtrType));
  t1->name = newtype;
  t1->len = strlen(newtype);
  t1->cast = cast;
  t1->next = 0;
  t->next = t1;
  SwigPtrSort = 0;
}


/*---------------------------------------------------------------------
 * void SWIG_SetPointerObj(Tcl_Obj *objPtr, void *ptr, char *type)
 *
 * Sets a Tcl object to a pointer value.
 *           ptr = void pointer value
 *           type = string representing type
 *
 *---------------------------------------------------------------------*/



/* This is for backwards compatibility */



/*---------------------------------------------------------------------
 * char *SWIG_GetPointerObj(Tcl_Interp *interp, Tcl_Obj *objPtr, void **ptr, char *type)
 *
 * Attempts to extract a pointer value from our pointer type.
 * Upon failure, returns a string corresponding to the actual datatype.
 * Upon success, returns NULL and sets the pointer value in ptr.
 *---------------------------------------------------------------------*/



/*---------------------------------------------------------------------
 * void SWIG_RegisterType()
 *
 * Registers our new datatype with an interpreter.
 *---------------------------------------------------------------------*/

SWIGSTATIC
void SWIG_RegisterType( void ) {
  /* Does nothing at the moment */
}
#define SWIG_init    Ibis_Init
#define SWIG_name    "ibis"
#define SWIG_prefix  ""
#define SWIG_namespace ""

#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT(int,Ibis_Init)(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

#undef panic

#ifdef __cplusplus
#  define BEGIN_C_DECLS extern "C" {
#  define END_C_DECLS   }
#else /* !__cplusplus */
#  define BEGIN_C_DECLS
#  define END_C_DECLS
#endif /* __cplusplus */

BEGIN_C_DECLS

#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <getopt.h>
#include <opensm/osm_log.h>
#include <complib/cl_qmap.h>
#include <complib/cl_map.h>
#include <complib/cl_debug.h>
#include "ibis.h"
#include "ibcr.h"
#include "ibpm.h"
#include "ibvs.h"
#include "ibbbm.h"
#include "ibsac.h"
#include "ibsm.h"
#include "ibcc.h"

END_C_DECLS

#ifndef PRIx64
#if __WORDSIZE == 64
#define __PRI64_PREFIX	"l"
#else
#define __PRI64_PREFIX	"L"
#endif

#define PRId64		__PRI64_PREFIX"d"
#define PRIo64		__PRI64_PREFIX"o"
#define PRIu64		__PRI64_PREFIX"u"
#define PRIx64		__PRI64_PREFIX"x"
#endif

/**********************************************************************
 **********************************************************************/
boolean_t
ibisp_is_debug(void)
{
#if defined( _DEBUG_ )
  return TRUE;
#else
  return FALSE;
#endif /* defined( _DEBUG_ ) */
}


#define new_uint64_t uint64_t

#define uint8_array_t uint8_t

#define uint16_array_t uint16_t

#define uint32_array_t uint32_t

#define uint64_array_t uint64_t

#define ib_net16_array_t ib_net16_t

#define ib_net32_array_t ib_net32_t

#define ib_net64_array_t ib_net64_t


  static char ibis_tcl_error_msg[1024];
  static int  ibis_tcl_error;

  void ibis_set_tcl_error(char *err) {
    if (strlen(err) < 1024)
      strcpy(ibis_tcl_error_msg, err);
    else
      strncpy(ibis_tcl_error_msg, err, 1024);
    ibis_tcl_error = 1;
  }


#include <complib/cl_qmap.h>
#include <complib/cl_passivelock.h>
#include <complib/cl_debug.h>
#include <iba/ib_types.h>
#include <opensm/osm_madw.h>
#include <opensm/osm_log.h>
#include <opensm/osm_mad_pool.h>
#include <opensm/osm_msgdef.h>
#include "ibcr.h"


static ibcr_t *p_ibcr_global;

/*
   this function returns the string corresponding to the
   read cpu data
*/
char *
ibcr_get_cr_str(
  boolean_t is_multi,
  uint8_t num,
  ib_cr_space_t *p_cr_mads
  )
{
  char *p_res_str = 0;
  char buff[512];
  static int i, extra;

  if (p_cr_mads) {
    for (i=0;i<num;i++) {
      if (p_cr_mads[i].mad_header.method != VENDOR_GET_RESP) {
        if (is_multi) {
          sprintf(buff,"TARGET_ERROR : Fail to obtain CR mad response");
        } else {
          sprintf(buff,"ERROR : Fail to obtain CR mad response");
        }
      } else if (ibis_get_mad_status((ib_mad_t*)&p_cr_mads[i]) != 0) {
        if (is_multi) {
          sprintf(buff,"TARGET_ERROR : Got remote error:0x%x",
                  ibis_get_mad_status((ib_mad_t*)&p_cr_mads[i]));
        } else {
          sprintf(buff,"ERROR : Got remote error:0x%x",
                  ibis_get_mad_status((ib_mad_t*)&p_cr_mads[i]));
        }
      } else {
        sprintf(buff, "{vendor_key 0x%016" PRIx64 "} {data 0x%x}",
                cl_ntoh64(p_cr_mads[i].vendor_key),
                cl_ntoh32(p_cr_mads[i].data[0]));
      }

      if (is_multi) extra = 3; else extra = 0;

      if (p_res_str) {
        p_res_str =
          (char *)realloc(p_res_str,strlen(p_res_str)+strlen(buff) + 1+ extra);
      } else {
        p_res_str = (char *)malloc(strlen(buff) + 1+ extra);
        p_res_str[0] = '\0';
      }

      /* need an extra list wrap */
      if (is_multi) {
        strcat(p_res_str,"{");
        strcat(p_res_str, buff);
        strcat(p_res_str,"} ");
      } else {
        strcat(p_res_str, buff);
      }
    }
  }
  return(p_res_str);
}

int
ibcr_destroy_global(void)
{
	ibcr_destroy(p_ibcr_global);
	return (0);
}

int
ibcr_num_of_multi_max(void)
{
	return (IBCR_MULTI_MAX);
}

int
ibcr_read_global(
  uint16_t lid,
  uint32_t address,
  char **pp_new_cr_str)
{
	ib_api_status_t status;
   ib_cr_space_t   cr_space_mads_arr[1];

	status = ibcr_read(p_ibcr_global,lid,address,cr_space_mads_arr);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to read CR space");
   } else {
     *pp_new_cr_str = ibcr_get_cr_str(FALSE, 1, cr_space_mads_arr);
   }

	return(status);
}

int
ibcr_write_global(
  uint16_t lid,
  uint32_t data,
  uint32_t address)
{

	ib_api_status_t status;

	status = ibcr_write(p_ibcr_global,lid,data,address);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to write CR space");
   }
	return(status);
}

int
ibcr_multi_read_global(
  uint8_t num,
  uint16_t lid_list[],
  uint32_t address,
  char **pp_new_cr_str)
{
	ib_api_status_t status;
   ib_cr_space_t   cr_space_mads_arr[IBCR_MULTI_MAX];

	status =
     ibcr_multi_read(p_ibcr_global,num,lid_list,address,cr_space_mads_arr);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to read all targets CR space");
   } else {
     *pp_new_cr_str = ibcr_get_cr_str(TRUE, num, cr_space_mads_arr);
   }
	return(status);
}

int
ibcr_multi_write_global(
  uint8_t num,
  uint16_t lid_list[],
  uint32_t data,
  uint32_t address)
{

	ib_api_status_t status;

	status = ibcr_multi_write(p_ibcr_global,num,lid_list,data,address);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to write all targets CR space");
   }
	return(status);
}


#define uint16_cr_arr_t uint16_t

#include <complib/cl_qmap.h>
#include <complib/cl_passivelock.h>
#include <complib/cl_debug.h>
#include <iba/ib_types.h>
#include <opensm/osm_madw.h>
#include <opensm/osm_log.h>
#include <opensm/osm_mad_pool.h>
#include <opensm/osm_msgdef.h>
#include <inttypes.h>
#include "ibpm.h"


static ibpm_t *p_ibpm_global;

int
ibpm_num_of_multi_max(void)
{
	return (IBPM_MULTI_MAX);
}

/*
   this function returns the string corresponding to the
   port counters.
*/
char *
ibpm_get_port_counters_str(
  uint8_t num,
  ib_pm_port_counter_t *p_counters)
{
  char *p_res_str = 0;
  char buff[1024];
  static int i;

  buff[0] = '\0';
  for (i=0;i<num;i++) {
    /* format the string */
    if (p_counters[i].mad_header.method == VENDOR_GET_RESP) {
      sprintf(buff,"{{port_select %u } {counter_select %u } {symbol_error_counter %u } {link_error_recovery_counter %u } {link_down_counter %u } {port_rcv_errors %u } {port_rcv_remote_physical_errors %u } {port_rcv_switch_relay_errors %u } {port_xmit_discard %u } {port_xmit_constraint_errors %u } {port_rcv_constraint_errors %u } {local_link_integrity_errors %u } {excesive_buffer_errors %u } {vl15_dropped %u } {port_xmit_data %u } {port_rcv_data %u } {port_xmit_pkts %u } {port_rcv_pkts %u }} ",
              p_counters[i].port_select,
              cl_ntoh16(p_counters[i].counter_select),
              cl_ntoh16(p_counters[i].symbol_error_counter),
              p_counters[i].link_error_recovery_counter,
              p_counters[i].link_down_counter,
              cl_ntoh16(p_counters[i].port_rcv_errors),
              cl_ntoh16(p_counters[i].port_rcv_remote_physical_errors),
              cl_ntoh16(p_counters[i].port_rcv_switch_relay_errors),
              cl_ntoh16(p_counters[i].port_xmit_discard),
              p_counters[i].port_xmit_constraint_errors,
              p_counters[i].port_rcv_constraint_errors,
              (p_counters[i].lli_errors_exc_buf_errors & 0xf0) >> 4,
              (p_counters[i].lli_errors_exc_buf_errors & 0x0f),
              cl_ntoh16(p_counters[i].vl15_dropped),
              cl_ntoh32(p_counters[i].port_xmit_data),
              cl_ntoh32(p_counters[i].port_rcv_data),
              cl_ntoh32(p_counters[i].port_xmit_pkts),
              cl_ntoh32(p_counters[i].port_rcv_pkts));
    } else {
      sprintf(buff,"{TARGET_ERROR : Fail to obtain port counters} ");
    }

    if (p_res_str) {
      p_res_str = (char *)realloc(p_res_str,strlen(p_res_str)+strlen(buff) + 1);
    } else {
      p_res_str = (char *)malloc(strlen(buff) + 1);
      p_res_str[0] = '\0';
    }
    strcat(p_res_str, buff);
  }
  return(p_res_str);
}

/*
   this function returns the string corresponding to the
   extended port counters.
*/
char *
ibpm_get_port_counters_extended_str(
  uint8_t num,
  ib_pm_port_counter_extended_t *p_counters)
{
  char *p_res_str = 0;
  char buff[1024];
  static int i;

  buff[0] = '\0';
  for (i=0;i<num;i++) {
    /* format the string */
    if (p_counters[i].mad_header.method == VENDOR_GET_RESP) {
      sprintf(buff,"{{port_select %u} {counter_select %u} {port_xmit_data %"PRIu64"} {port_rcv_data %"PRIu64"} {port_xmit_pkts %"PRIu64"} {port_rcv_pkts %"PRIu64"} {port_ucast_xmit_pkts %"PRIu64"} {port_ucast_rcv_pkts %"PRIu64"} {port_mcast_xmit_pkts %"PRIu64"} {port_mcast_rcv_pkts %"PRIu64"} } ",
              p_counters[i].port_select,
              cl_ntoh16(p_counters[i].counter_select),
              cl_ntoh64(p_counters[i].port_xmit_data),
              cl_ntoh64(p_counters[i].port_rcv_data),
              cl_ntoh64(p_counters[i].port_xmit_pkts),
              cl_ntoh64(p_counters[i].port_rcv_pkts),
              cl_ntoh64(p_counters[i].port_ucast_xmit_pkts),
              cl_ntoh64(p_counters[i].port_ucast_rcv_pkts),
              cl_ntoh64(p_counters[i].port_mcast_xmit_pkts),
              cl_ntoh64(p_counters[i].port_mcast_rcv_pkts)
              );
    } else {
      sprintf(buff,"{TARGET_ERROR : Fail to obtain port counters} ");
    }

    if (p_res_str) {
      p_res_str = (char *)realloc(p_res_str,strlen(p_res_str)+strlen(buff) + 1);
    } else {
      p_res_str = (char *)malloc(strlen(buff) + 1);
      p_res_str[0] = '\0';
    }
    strcat(p_res_str, buff);
  }
  return(p_res_str);
}

int
ibpm_get_counters_global(
  uint16_t lid,
  uint8_t port_select,
  char **pp_new_counters_str)
{
  int status;
  ib_pm_port_counter_t single_counters_set;
  *pp_new_counters_str = NULL;
  status = (int) ibpm_get_counters(p_ibpm_global,lid,port_select,&single_counters_set);
  if (status) {
    ibis_set_tcl_error("ERROR : Fail to obtain port counters");
  } else {
    *pp_new_counters_str = ibpm_get_port_counters_str(1, &single_counters_set);
  }
  return(status);
}

int
ibpm_get_multi_counters_global(
   uint8_t num,
   uint16_t lid_list[],
   uint8_t port_select_list[],
   char **pp_new_counters_str)
{
  int status;
  ib_pm_port_counter_t *p_multi_counters_set;
  p_multi_counters_set = (ib_pm_port_counter_t *)malloc(sizeof(ib_pm_port_counter_t)*num);
  *pp_new_counters_str = NULL;

  status = (int) ibpm_get_multi_counters(
    p_ibpm_global,num,lid_list,port_select_list,p_multi_counters_set);
  if (status) {
    ibis_set_tcl_error("ERROR : Fail to obtain multiple port counters");
  } else {
    *pp_new_counters_str = ibpm_get_port_counters_str(num, p_multi_counters_set);
  }
  free(p_multi_counters_set);
  return(status);
}

int
ibpm_get_multi_counters_extended_global(
   uint8_t num,
   uint16_t lid_list[],
   uint8_t port_select_list[],
   char **pp_new_counters_str)
{
  int status;
  ib_pm_port_counter_extended_t *p_multi_counters_set;
  p_multi_counters_set =
    (ib_pm_port_counter_extended_t *)malloc(sizeof(ib_pm_port_counter_t)*num);
  *pp_new_counters_str = NULL;

  status = (int) ibpm_get_multi_counters_extended(
    p_ibpm_global,num,lid_list,port_select_list,p_multi_counters_set);
  if (status) {
    ibis_set_tcl_error("ERROR : Fail to obtain multiple port counters");
  } else {
    *pp_new_counters_str = ibpm_get_port_counters_extended_str(num, p_multi_counters_set);
  }
  free(p_multi_counters_set);
  return(status);
}

int
ibpm_clr_all_counters_global(
  uint16_t lid,
  uint8_t port_select)
{
  int status;
  status = (int) ibpm_clr_all_counters(p_ibpm_global,lid,port_select);
  if (status) {
    ibis_set_tcl_error("ERROR : Fail to clear port counters");
  }
  return(status);
}

int
ibpm_clr_all_multi_counters_global(
  uint8_t num,
  uint16_t lid_list[],
  uint8_t port_select_list[])
{
  int status;
  status = (int) ibpm_clr_all_multi_counters(p_ibpm_global,num,lid_list,port_select_list);

  if (status) {
    ibis_set_tcl_error("ERROR : Fail to clear multiple port counters");
  }
  return(status);
}


#define  uint16_pm_arr_t  uint16_t

#define  uint8_pm_arr_t  uint8_t

#include <complib/cl_qmap.h>
#include <complib/cl_passivelock.h>
#include <complib/cl_debug.h>
#include <iba/ib_types.h>
#include <opensm/osm_madw.h>
#include <opensm/osm_log.h>
#include <opensm/osm_mad_pool.h>
#include <opensm/osm_msgdef.h>
#include "ibvs.h"


static ibvs_t *p_ibvs_global;

int
ibvs_num_of_multi_max(void)
{
	return (IBVS_MULTI_MAX);
}

/*
   this function returns the string corresponding to the
   read cpu data
*/
char *
ibvs_get_vs_str(
  boolean_t is_multi,
  boolean_t is_read,
  uint8_t num,
  uint8_t size,
  uint8_t first_data_idx,
  ib_vs_t *p_vs_mads
  )
{
  char *p_res_str = 0;
  char buff[1024];
  int i,j, extra;

  if (p_vs_mads) {
    for (i=0;i<num;i++) {
      boolean_t space_in_resp = TRUE;

      if (p_vs_mads[i].mad_header.method != VENDOR_GET_RESP) {
        sprintf(buff,"TARGET_ERROR : Failed to obtain VS mad response");
      } else if (ibis_get_mad_status((ib_mad_t*)&p_vs_mads[i]) != 0) {
        sprintf(buff,"TARGET_ERROR : Got remote error:0x%x",
                ibis_get_mad_status((ib_mad_t*)&p_vs_mads[i]));
      } else if (is_read) {
        sprintf(buff, "{vendor_key 0x%016" PRIx64 "} ",
                cl_ntoh64(p_vs_mads[i].vendor_key));
        for (j=0; j < size; j++) {
          sprintf(buff,"%s {data%u 0x%x} ",
                  buff, j, cl_ntoh32(p_vs_mads[i].data[j+first_data_idx]));
        }
      } else {
	  // Write response - no data
	  // Note: The trailing space here is important !
	  sprintf(buff, "ACK ");
	  space_in_resp = 0;
      }

      if (is_multi && space_in_resp)
	extra = 3;
      else
	extra = 0;

      if (p_res_str) {
        p_res_str =
          (char *)realloc(p_res_str,strlen(p_res_str)+strlen(buff) + 1+ extra);
      } else {
        p_res_str = (char *)malloc(strlen(buff) + 1+ extra);
        p_res_str[0] = '\0';
      }

      /* need an extra list wrap */
      if (is_multi && space_in_resp) {
	  strcat(p_res_str,"{");
	  strcat(p_res_str, buff);
	  strcat(p_res_str,"} ");
      } else {
        strcat(p_res_str, buff);
      }
    }
  }
  return(p_res_str);
}

int
ibvs_cpu_read_global(
  uint16_t lid,
  uint8_t size,
  uint8_t cpu_traget_size,
  uint32_t address,
  char **pp_new_cpu_str)
{
	ib_api_status_t status;
   ib_vs_t         vs_mads[1];

	status =
     ibvs_cpu_read(p_ibvs_global,lid,size,cpu_traget_size,address,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to obtain port counters");
   } else {
     *pp_new_cpu_str =
       ibvs_get_vs_str(FALSE, TRUE, 1, IBVS_DATA_MAX, VS_CPU_DATA_OFFSET, vs_mads);
   }

   return(status);
}

int
ibvs_cpu_write_global(
  uint16_t lid,
  uint8_t size,
  uint8_t cpu_traget_size,
  uint32_t data[],
  uint32_t address)
{

	ib_api_status_t status;

	status =
     ibvs_cpu_write(p_ibvs_global,lid,size,cpu_traget_size,data,address);
   if (status)
     ibis_set_tcl_error("ERROR : Fail to clear port counters");
   return(status);
}

int
ibvs_i2c_read_global(
  uint16_t lid,
  uint8_t port_num,
  uint8_t device_id,
  uint8_t size,
  uint32_t address,
  char **pp_new_i2c_str)
{
	ib_api_status_t status;
   ib_vs_t         vs_mads[1];

	status =
     ibvs_i2c_read(
       p_ibvs_global,lid,port_num,size,device_id,address,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to obtain port counters");
   } else {
     *pp_new_i2c_str =
       ibvs_get_vs_str(FALSE, TRUE, 1, size / 4, VS_I2C_DATA_OFFSET, vs_mads);
   }

	return(status);
}

int
ibvs_multi_i2c_read_global(
  uint8_t num,
  uint16_t lid_list[],
  uint8_t port_num,
  uint8_t device_id,
  uint8_t size,
  uint32_t address,
  char **pp_new_i2c_str)
{
    ib_api_status_t status;
    ib_vs_t         vs_mads[IBVS_MULTI_MAX];

    status =
	ibvs_multi_i2c_read(p_ibvs_global,num,lid_list,port_num,size,device_id,address,vs_mads);
    if (status) {
	ibis_set_tcl_error("ERROR : Failed reading multiple i2c");
    } else {
	*pp_new_i2c_str =
	    ibvs_get_vs_str(TRUE, TRUE, num, size / 4, VS_I2C_DATA_OFFSET, vs_mads);
    }

    return(status);
}

int
ibvs_multi_i2c_write_global(
  uint8_t num,
  uint16_t lid_list[],
  uint8_t port_num,
  uint8_t device_id,
  uint8_t size,
  uint32_t address,
  uint32_t data[],
  char **pp_new_i2c_str)
{

    ib_api_status_t status;
    ib_vs_t         vs_mads[IBVS_MULTI_MAX];

    status =
	ibvs_multi_i2c_write(p_ibvs_global,num,lid_list,port_num,size,device_id,data,address,vs_mads);

    if (status) {
	ibis_set_tcl_error("ERROR : Failed writing multiple i2c");
    } else {
	*pp_new_i2c_str =
	    ibvs_get_vs_str(TRUE, FALSE, num, size / 4, VS_I2C_DATA_OFFSET, vs_mads);
    }

    return(status);
}

int
ibvs_i2c_write_global(
  uint16_t lid,
  uint8_t port_num,
  uint8_t device_id,
  uint8_t size,
  uint32_t address,
  uint32_t data[])
{

    ib_api_status_t status;

    status = ibvs_i2c_write(p_ibvs_global,lid,port_num,size,device_id,data,address);
    if (status)
	ibis_set_tcl_error("ERROR : Fail to write i2c");
    return(status);
}

int
ibvs_gpio_read_global(
  IN uint16_t lid,
  OUT	char **pp_new_gpio_str)
{
	ib_api_status_t status;
   ib_vs_t         vs_mads[1];

	status = ibvs_gpio_read(p_ibvs_global,lid,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to read gpio");
   } else {
     *pp_new_gpio_str =
       ibvs_get_vs_str(TRUE, TRUE, 1, IBVS_DATA_MAX, VS_GPIO_DATA_OFFSET, vs_mads);
   }
	return(status);
}

int
ibvs_gpio_write_global(
  IN uint16_t lid,
  IN uint64_t gpio_mask,
  IN uint64_t gpio_data)
{
	ib_api_status_t status;

	status = ibvs_gpio_write(p_ibvs_global,lid,gpio_mask,gpio_data );
   if (status)
     ibis_set_tcl_error("ERROR : Fail to write gpio");
	return(status);
}

int
ibvs_multi_sw_reset_global(
  uint8_t num,
  uint16_t lid_list[])
{
	ib_api_status_t status;

	status = ibvs_multi_sw_reset(p_ibvs_global,num,lid_list);
   if (status)
     ibis_set_tcl_error("ERROR : Fail to reset");

	return(status);
}

int
ibvs_multi_flash_open_global(
  uint8_t num,
  uint16_t lid_list[],
  uint32_t last,
  uint8_t size,
  uint32_t address,
  uint32_t data[],
  char **pp_new_flash_str)
{
	ib_api_status_t status;
	ib_vs_t vs_mads[IBVS_MULTI_MAX];

	status =
     ibvs_multi_flash_open(
       p_ibvs_global,num,lid_list,last,size,data,address,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to open flash");
   } else {
     *pp_new_flash_str =
       ibvs_get_vs_str(TRUE, TRUE, num, 4, VS_FLASH_DATA_OFFSET, vs_mads);
   }

	return(status);
}

int
ibvs_multi_flash_close_global(
  uint8_t num,
  uint16_t lid_list[],
  uint32_t force,
  char **pp_new_flash_str)
{
	ib_api_status_t status;
 	ib_vs_t vs_mads[IBVS_MULTI_MAX];

	status =
     ibvs_multi_flash_close(
       p_ibvs_global,num,lid_list,force,vs_mads);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to close flash");
   } else {
     *pp_new_flash_str =
       ibvs_get_vs_str(TRUE, TRUE, num, 4, VS_FLASH_DATA_OFFSET, vs_mads);
   }

	return(status);
}

int
ibvs_multi_flash_set_bank_global(
  uint8_t num,
  uint16_t lid_list[],
  uint32_t address,
  char **pp_new_flash_str)
{
	ib_api_status_t status;
 	ib_vs_t vs_mads[IBVS_MULTI_MAX];

	status =
     ibvs_multi_flash_set_bank(
       p_ibvs_global, num, lid_list, address, vs_mads);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to set flash bank");
   } else {
     *pp_new_flash_str =
       ibvs_get_vs_str(TRUE, TRUE, num, 4, VS_FLASH_DATA_OFFSET, vs_mads);
   }

	return(status);
}

int
ibvs_multi_flash_erase_global(
  uint8_t num,
  uint16_t lid_list[],
  uint32_t address,
  char **pp_new_flash_str)
{
	ib_api_status_t status;
 	ib_vs_t vs_mads[IBVS_MULTI_MAX];

	status =
     ibvs_multi_flash_erase(
       p_ibvs_global, num, lid_list, address, vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to erase flash sector");
   } else {
     *pp_new_flash_str =
       ibvs_get_vs_str(TRUE, TRUE, num, 4, VS_FLASH_DATA_OFFSET, vs_mads);
   }

	return(status);
}

int
ibvs_multi_flash_read_global(
  uint8_t num,
  uint16_t lid_list[],
  uint8_t size,
  uint32_t address,
  char **pp_new_flash_str)
{
	ib_api_status_t status;
 	ib_vs_t vs_mads[IBVS_MULTI_MAX];

	status =
     ibvs_multi_flash_read(
       p_ibvs_global, num, lid_list, size, address, vs_mads);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to read flash");
   } else {
     *pp_new_flash_str =
       ibvs_get_vs_str(TRUE, TRUE, num, size / 4, VS_FLASH_DATA_OFFSET, vs_mads);
   }

	return(status);
}

int
ibvs_multi_flash_write_global(
  uint8_t num,
  uint16_t lid_list[],
  uint8_t size,
  uint32_t address,
  uint32_t data[])
{
	ib_api_status_t status;

	status =
     ibvs_multi_flash_write(
       p_ibvs_global, num, lid_list, size, data, address);

   if (status) {
     ibis_set_tcl_error("ERROR : Fail to write flash");
   }
	return(status);
}

int
ibvs_mirror_read_global(
  IN uint16_t lid,
  OUT	char **pp_new_mirror_str)
{
   ib_api_status_t status;
   ib_vs_t         vs_mads[1];

   status = ibvs_mirror_read(p_ibvs_global,lid,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to read mirror");
   } else {
     *pp_new_mirror_str =
       ibvs_get_vs_str(FALSE, TRUE, 1, IBVS_DATA_MAX, VS_MIRROR_DATA_OFFSET, vs_mads);
   }
	return(status);
}

int
ibvs_mirror_write_global(
  IN uint16_t lid,
  IN uint32_t rx_mirror,
  IN uint32_t tx_mirror)
{
   ib_api_status_t status;

   status = ibvs_mirror_write(p_ibvs_global,lid,rx_mirror,tx_mirror );
   if (status)
     ibis_set_tcl_error("ERROR : Fail to write mirror");
	return(status);
}

int
ibvs_plft_map_get_global(
  IN uint16_t lid,
  IN uint8_t upper_ports,
  OUT	char **pp_new_plft_map_str)
{
   ib_api_status_t status;
   ib_vs_t         vs_mads[1];
	char *          buff;
	ib_vs_plft_map_t *p_map = (ib_vs_plft_map_t *)&vs_mads[0];

   status = ibvs_plft_map_get(p_ibvs_global,lid,upper_ports,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to get private LFT map");
		*pp_new_plft_map_str = NULL;
   } else {
		buff = (char *)malloc(1024);
		*pp_new_plft_map_str = buff;
		sprintf(buff,
				  "{ib_port0 0x%x} "
				  "{shared_plft_port0 0x%x} "
				  "{size0 0x%x} "
				  "{ib_port1 0x%x} "
				  "{shared_plft_port1 0x%x} "
				  "{size1 0x%x} "
				  "{ib_port2 0x%x} "
				  "{shared_plft_port2 0x%x} "
				  "{size2 0x%x} "
				  "{ib_port3 0x%x} "
				  "{shared_plft_port3 0x%x} "
				  "{size3 0x%x} "
				  "{ib_port4 0x%x} "
				  "{shared_plft_port4 0x%x} "
				  "{size4 0x%x} "
				  "{ib_port5 0x%x} "
				  "{shared_plft_port5 0x%x} "
				  "{size5 0x%x} "
				  "{ib_port6 0x%x} "
				  "{shared_plft_port6 0x%x} "
				  "{size6 0x%x} "
				  "{ib_port7 0x%x} "
				  "{shared_plft_port7 0x%x} "
				  "{reserved7 0x%x} "
				  "{size7 0x%x} "
				  "{ib_port8 0x%x} "
				  "{shared_plft_port8 0x%x} "
				  "{size8 0x%x} "
				  "{ib_port9 0x%x} "
				  "{shared_plft_port9 0x%x} "
				  "{reserved9 0x%x} "
				  "{size9 0x%x} "
				  "{ib_port10 0x%x} "
				  "{shared_plft_port10 0x%x} "
				  "{size10 0x%x} "
				  "{ib_port11 0x%x} "
				  "{shared_plft_port11 0x%x} "
				  "{size11 0x%x} "
				  "{ib_port12 0x%x} "
				  "{shared_plft_port12 0x%x} "
				  "{size12 0x%x}",
				  p_map->ib_port0,
				  p_map->shared_plft_port0,
				  p_map->size0,
				  p_map->ib_port1,
				  p_map->shared_plft_port1,
				  p_map->size1,
				  p_map->ib_port2,
				  p_map->shared_plft_port2,
				  p_map->size2,
				  p_map->ib_port3,
				  p_map->shared_plft_port3,
				  p_map->size3,
				  p_map->ib_port4,
				  p_map->shared_plft_port4,
				  p_map->size4,
				  p_map->ib_port5,
				  p_map->shared_plft_port5,
				  p_map->size5,
				  p_map->ib_port6,
				  p_map->shared_plft_port6,
				  p_map->size6,
				  p_map->ib_port7,
				  p_map->shared_plft_port7,
				  p_map->reserved7,
				  p_map->size7,
				  p_map->ib_port8,
				  p_map->shared_plft_port8,
				  p_map->size8,
				  p_map->ib_port9,
				  p_map->shared_plft_port9,
				  p_map->reserved9,
				  p_map->size9,
				  p_map->ib_port10,
				  p_map->shared_plft_port10,
				  p_map->size10,
				  p_map->ib_port11,
				  p_map->shared_plft_port11,
				  p_map->size11,
				  p_map->ib_port12,
				  p_map->shared_plft_port12,
				  p_map->size12
				  );
   }
	return(status);
}

int
ibvs_general_info_get_global(
  IN uint16_t lid,
  OUT	char **pp_gen_info_str)
{
   ib_api_status_t status;
   ib_vs_t         vs_mads[1];
	char *          buff;
	char            psid[17];
	ib_vs_gen_info_t *p_info = (ib_vs_gen_info_t *)&vs_mads[0];
   status = ibvs_general_info_get(p_ibvs_global,lid,vs_mads);
   if (status) {
     ibis_set_tcl_error("ERROR : Fail to get general info");
		*pp_gen_info_str = 0;
   } else {
		buff = (char *)malloc(1024);
		*pp_gen_info_str = buff;
		strncpy(psid, (char *)p_info->fw_psid, 16);
		psid[16] = '\0';
		sprintf(buff,
				  "{hw_rev 0x%x} "
				  "{hw_devid 0x%x} "
				  "{hw_uptime 0x%x} "
				  "{fw_major 0x%x} "
				  "{fw_minor 0x%x} "
				  "{fw_sub_minor 0x%x} "
				  "{fw_build_id 0x%x} "
				  "{fw_month 0x%x} "
				  "{fw_day 0x%x} "
				  "{fw_year 0x%x} "
				  "{fw_hour 0x%x} "
				  "{fw_psid \"%s\"} "
				  "{fw_ini_ver 0x%x} "
				  "{sw_major 0x%x} "
				  "{sw_minor 0x%x} "
				  "{sw_sub_minor 0x%x}",
				  cl_ntoh16(p_info->hw_rev),
				  cl_ntoh16(p_info->hw_devid),
				  cl_ntoh32(p_info->hw_uptime),
				  p_info->fw_major,
				  p_info->fw_minor,
				  p_info->fw_sub_minor,
				  cl_ntoh32(p_info->fw_build_id),
				  p_info->fw_month,
				  p_info->fw_day,
				  cl_ntoh16(p_info->fw_year),
				  cl_ntoh16(p_info->fw_hour),
				  psid,
				  cl_ntoh32(p_info->fw_ini_ver),
				  p_info->sw_major,
				  p_info->sw_minor,
				  p_info->sw_sub_minor);
   }
	return(status);
}


#define uint16_vs_arr_t uint16_t

#define uint32_vs_data_arr_t uint32_t

#include <complib/cl_qmap.h>
#include <complib/cl_passivelock.h>
#include <complib/cl_debug.h>
#include <iba/ib_types.h>
#include <opensm/osm_madw.h>
#include <opensm/osm_log.h>
#include <opensm/osm_mad_pool.h>
#include <opensm/osm_msgdef.h>
#include "ibbbm.h"


static ibbbm_t *p_ibbbm_global;

int
ibbbm_read_vpd_global(
  uint16_t lid,
  uint8_t vpd_device_selector,
  uint16_t bytes_num,
  uint16_t offset,
  ib_bbm_vpd_t *p_bbm_vpd_mad)
{
	ib_api_status_t status;

	status = ibbbm_read_vpd(p_ibbbm_global,lid,vpd_device_selector,bytes_num,offset,p_bbm_vpd_mad);
	;
	ibis_set_tcl_error("-E- Failed to read VPD");

	return(status);
}

int
ibbbm_write_vpd_global(
  uint16_t lid,
  uint8_t vpd_device_selector,
  uint16_t bytes_num,
  uint16_t offset,
  uint8_t *p_data)
{

	ib_api_status_t status;

	status = ibbbm_write_vpd(p_ibbbm_global,lid,vpd_device_selector,bytes_num,offset,p_data);
	;
	ibis_set_tcl_error("-E- Failed to write VPD");
	return(status);
}

int
ibbbm_read_vsd_vpd_global(
  uint16_t lid,
  ib_bbm_vsd_vpd_t *p_bbm_vsd_vpd_mad)
{
	ib_api_status_t status;
	ib_bbm_vpd_t *p_bbm_vpd_mad;

	p_bbm_vpd_mad = (ib_bbm_vpd_t *)p_bbm_vsd_vpd_mad;

	status = ibbbm_read_vpd(p_ibbbm_global,lid,IBBBM_VSD_VPD_DEV_SEL,IBBBM_VSD_VPD_SIZE,IBBBM_VSD_VPD_OFFSET,p_bbm_vpd_mad);
	;
	ibis_set_tcl_error("-E- Failed to read VSD VPD");
   return(status);
}

int
ibbbm_read_bsn_vpd_global(
  uint16_t lid,
  ib_bbm_bsn_vpd_t *p_bbm_bsn_vpd_mad)
{
	ib_api_status_t status;
	ib_bbm_vpd_t *p_bbm_vpd_mad;

	p_bbm_vpd_mad = (ib_bbm_vpd_t *)p_bbm_bsn_vpd_mad;

	status = ibbbm_read_vpd(p_ibbbm_global,lid,IBBBM_BSN_VPD_DEV_SEL,IBBBM_BSN_VPD_SIZE,IBBBM_BSN_VPD_OFFSET,p_bbm_vpd_mad);
	;
	ibis_set_tcl_error("-E- Failed to read BSN");

	return(status);
}

int
ibbbm_read_mod_vpd_global(
  uint16_t lid,
  ib_bbm_mod_vpd_t *p_bbm_mod_vpd_mad)
{
	ib_api_status_t status;
	ib_bbm_vpd_t *p_bbm_vpd_mad;

	p_bbm_vpd_mad = (ib_bbm_vpd_t *)p_bbm_mod_vpd_mad;

	status = ibbbm_read_vpd(p_ibbbm_global,lid,IBBBM_MOD_VPD_DEV_SEL,IBBBM_MOD_VPD_SIZE,IBBBM_MOD_VPD_OFFSET,p_bbm_vpd_mad);
	;
	ibis_set_tcl_error("-E- Failed to read Module VPD");

	return(status);
}

int
ibbbm_read_cha_vpd_global(
  uint16_t lid,
  ib_bbm_cha_vpd_t *p_bbm_cha_vpd_mad)
{
	ib_api_status_t status;
	ib_bbm_vpd_t *p_bbm_vpd_mad;

	p_bbm_vpd_mad = (ib_bbm_vpd_t *)p_bbm_cha_vpd_mad;

	status = ibbbm_read_vpd(p_ibbbm_global,lid,IBBBM_CHA_VPD_DEV_SEL,IBBBM_CHA_VPD_SIZE,IBBBM_CHA_VPD_OFFSET,p_bbm_vpd_mad);
	;
   ibis_set_tcl_error("-E- Failed to read Chassis VPD");
	return(status);
}


int
ibbbm_read_fw_ver_vpd_global(
  uint16_t lid,
  ib_bbm_fw_ver_vpd_t *p_bbm_fw_ver_vpd_mad)
{
	ib_api_status_t status;
	ib_bbm_vpd_t *p_bbm_vpd_mad;

	p_bbm_vpd_mad = (ib_bbm_vpd_t *)p_bbm_fw_ver_vpd_mad;

	status = ibbbm_read_vpd(p_ibbbm_global,lid,IBBBM_FW_VER_VPD_DEV_SEL,IBBBM_FW_VER_VPD_SIZE,IBBBM_FW_VER_VPD_OFFSET,p_bbm_vpd_mad);
	;

   ibis_set_tcl_error("-E- Failed to read FW Version.");

	return(status);
}


#include "stdio.h"
#include <errno.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>
#include <iba/ib_types.h>
#include <complib/cl_types.h>
#include <complib/cl_qmap.h>
#include <complib/cl_map.h>
#include <complib/cl_debug.h>
#include "ibis_api.h"
#ifdef OSM_BUILD_OPENIB
#include <vendor/osm_vendor_sa_api.h>
#else
#include <opensm/osm_vendor_sa_api.h>
#endif
#include "ibsac.h"

  /*
     TODO:  Add the following queries
     ClassPortInfo
     InformInfo
     SLtoVLMappingTableRecord
     VLArbitrationTableRecord
     ServiceRecord
     P_KeyTableRecord

     Not supported by OpenSM:
     Notice
     MulticastForwardingTableRecord
     InformInfoRecord

     Later:
     MultiPathRecord
  */

  /* we probably want to use our own naming for classes */
  typedef ib_node_record_t         sacNodeRec;
  typedef ib_node_info_t           sacNodeInfo;
  typedef ib_portinfo_record_t     sacPortRec;
  typedef ib_port_info_t           sacPortInfo;
  typedef ib_sminfo_record_t       sacSmRec;
  typedef ib_sm_info_t             sacSmInfo;
  typedef ib_switch_info_record_t  sacSwRec;
  typedef ib_switch_info_t         sacSwInfo;
  typedef ib_link_record_t         sacLinkRec;
  typedef ib_path_rec_t            sacPathRec;
  typedef ib_lft_record_t          sacLFTRec;
  typedef ib_member_rec_t          sacMCMRec;
  typedef ib_class_port_info_t     sacClassPortInfo;
  typedef ib_inform_info_t         sacInformInfo;
  typedef ib_service_record_t      sacServiceRec;
  typedef ib_slvl_table_t          sacSlVlTbl;
  typedef ib_slvl_table_record_t   sacSlVlRec;
  typedef ib_vl_arb_table_record_t sacVlArbRec;
  typedef ib_pkey_table_t          sacPKeyTbl;
  typedef ib_pkey_table_record_t   sacPKeyRec;
  typedef ib_guid_info_t           sacGuidInfo;
  typedef ib_guidinfo_record_t     sacGuidRec;
  typedef uint8_t                  ib_lft_t;


#include "swig_extended_obj.c"

  /* Pre allocated Query Objects */
  ib_node_record_t          ibsac_node_rec;             // ib_node_info_t
  ib_portinfo_record_t      ibsac_portinfo_rec;         // ib_port_info_t
  ib_sminfo_record_t        ibsac_sminfo_rec;           // ib_sm_info_t
  ib_switch_info_record_t   ibsac_swinfo_rec;           // ib_switch_info_t
  ib_link_record_t          ibsac_link_rec;             // no sub type
  ib_path_rec_t             ibsac_path_rec;             // no sub type
  ib_lft_record_t           ibsac_lft_rec;              // no sub type
  ib_member_rec_t           ibsac_mcm_rec;              // no sub type
  ib_class_port_info_t      ibsac_class_port_info;      // no sub type
  ib_inform_info_t          ibsac_inform_info;          // no sub type
  ib_service_record_t       ibsac_svc_rec;              // no sub type
  ib_slvl_table_record_t    ibsac_slvl_rec;             // ib_slvl_table_t
  ib_vl_arb_table_record_t  ibsac_vlarb_rec;            // ib_vl_arb_table_t
  ib_pkey_table_record_t    ibsac_pkey_rec;             // ib_pkey_table_t
  ib_guidinfo_record_t      ibsac_guidinfo_rec;         // ib_guid_info_t

  /* Query Functions for each record */
  /* These are TCL specific thus are here */

  char *ibsacNodeRecordQuery(
	 ib_node_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_node_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_NODE_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_node_record_t *)malloc(sizeof(ib_node_record_t));

		/* copy into it */
		*p_rec = *(osmv_get_query_node_rec( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("nr",p_rec);
		SWIG_AltMnglRegObj("ni",&(p_rec->node_info));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "nr", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacPortInfoRecordQuery(
	 ib_portinfo_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_portinfo_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_PORTINFO_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_portinfo_record_t *)malloc(sizeof(ib_portinfo_record_t));

		/* copy into it */
		*p_rec = *(osmv_get_query_portinfo_rec( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("pir",p_rec);
		SWIG_AltMnglRegObj("pi",&(p_rec->port_info));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "pir", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacSMInfoRecordQuery(
	 ib_sminfo_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_sminfo_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_SMINFO_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_sminfo_record_t *)malloc(sizeof(ib_sminfo_record_t));

		/* copy into it */
		*p_rec = *((ib_sminfo_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("smir",p_rec);
		SWIG_AltMnglRegObj("smi",&(p_rec->sm_info));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "smir", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacSwitchInfoRecordQuery(
	 ib_switch_info_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_switch_info_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, CL_NTOH16(0x0014), self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_switch_info_record_t *)malloc(sizeof(ib_switch_info_record_t));

		/* copy into it */
		*p_rec = *((ib_switch_info_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("swir",p_rec);
		SWIG_AltMnglRegObj("swi",&(p_rec->switch_info));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "swir", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacPathRecordQuery(
	 ib_path_rec_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_path_rec_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_PATH_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_path_rec_t *)malloc(sizeof(ib_path_rec_t));

		/* copy into it */
		*p_rec = *((ib_path_rec_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("path",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "path", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacLinkRecordQuery(
	 ib_link_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_link_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_LINK_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_link_record_t *)malloc(sizeof(ib_link_record_t));

		/* copy into it */
		*p_rec = *((ib_link_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("link",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "link", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacLFTRecordQuery(
	 ib_lft_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_lft_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_LFT_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_lft_record_t *)malloc(sizeof(ib_lft_record_t));

		/* copy into it */
		*p_rec = *((ib_lft_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("lft",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "lft", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacMCMemberRecordQuery(
	 ib_member_rec_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_member_rec_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_MCMEMBER_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_member_rec_t *)malloc(sizeof(ib_member_rec_t));

		/* copy into it */
		*p_rec = *((ib_member_rec_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("mcm",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "mcm", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacClassPortInfoQuery(
	 ib_class_port_info_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_class_port_info_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_CLASS_PORT_INFO, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_class_port_info_t *)malloc(sizeof(ib_class_port_info_t));

		/* copy into it */
		*p_rec = *((ib_class_port_info_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("cpi",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "cpi", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacInformInfoQuery(
	 ib_inform_info_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_inform_info_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj,  IB_MAD_ATTR_INFORM_INFO, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_inform_info_t *)malloc(sizeof(ib_inform_info_t));

		/* copy into it */
		*p_rec = *((ib_inform_info_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("info",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "info", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }


  char *ibsacServiceRecordQuery(
	 ib_service_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_service_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj,  IB_MAD_ATTR_SERVICE_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_service_record_t *)malloc(sizeof(ib_service_record_t));

		/* copy into it */
		*p_rec = *((ib_service_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("svc",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "svc", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacSl2VlRecordQuery(
	 ib_slvl_table_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_slvl_table_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_SLVL_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_slvl_table_record_t *)malloc(sizeof(ib_slvl_table_record_t));

		/* copy into it */
		*p_rec = *((ib_slvl_table_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("slvr",p_rec);
		SWIG_AltMnglRegObj("slvt",&(p_rec->slvl_tbl));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "slvr", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacVlArbRecordQuery(
	 ib_vl_arb_table_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_vl_arb_table_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_VLARB_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_vl_arb_table_record_t *)malloc(sizeof(ib_vl_arb_table_record_t));

		/* copy into it */
		*p_rec = *((ib_vl_arb_table_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("vlarb",p_rec);

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "vlarb", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

  char *ibsacPKeyRecordQuery(
	 ib_pkey_table_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_pkey_table_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_PKEY_TBL_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_pkey_table_record_t *)malloc(sizeof(ib_pkey_table_record_t));

		/* copy into it */
		*p_rec = *((ib_pkey_table_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("pkr",p_rec);
		SWIG_AltMnglRegObj("pkt",&(p_rec->pkey_tbl));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "pkr", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }

char *ibsacGuidRecordQuery(
	 ib_guidinfo_record_t *self,
	 uint64_t comp_mask,
	 uint8_t method) {
	 ib_guidinfo_record_t *p_rec;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_recs = 0;
	 osm_madw_t *p_result_madw;
	 char *p_res_str = NULL, *tmp;
	 Tcl_Obj *p_tclObj;
	 int nameLength;

	 status = ibsac_query(
		&IbisObj, IB_MAD_ATTR_GUIDINFO_RECORD, self, comp_mask, method,
		&num_recs, &p_result_madw
		);

	 for( i = 0; i < num_recs; i++ )
	 {
		/* we need to create a new node info and copy */
		p_rec = (ib_guidinfo_record_t *)malloc(sizeof(ib_guidinfo_record_t));

		/* copy into it */
		*p_rec = *((ib_guidinfo_record_t*)osmv_get_query_result( p_result_madw, i ));

		/* register it as a new object */
		SWIG_AltMnglRegObj("gr",p_rec);
		SWIG_AltMnglRegObj("gi",&(p_rec->guid_info));

		p_tclObj = Tcl_NewObj();

		/* get the assigned name */
		if (SWIG_AltMnglGetObjNameByPtr(p_tclObj, "gr", p_rec)) {
		  printf("-E- Fail to get name of object %p\n", p_rec);
		} else {
		  tmp = Tcl_GetStringFromObj(p_tclObj, &nameLength);

		  /* enlarge the result string length */
		  if (p_res_str)
			 p_res_str = (char *)realloc(p_res_str, strlen(p_res_str) + nameLength + 2);
		  else {
			 p_res_str = (char *)malloc(nameLength + 2);
			 p_res_str[0] = '\0';
		  }

		  strcat(p_res_str, tmp);
		  strcat(p_res_str, " ");
		}
		Tcl_DecrRefCount(p_tclObj);
	 }

	 if( p_result_madw != NULL )
		osm_mad_pool_put( &IbisObj.mad_pool, p_result_madw );

	 return(p_res_str);
  }


static int  _wrap_const_IB_NR_COMPMASK_LID = 0x1;
static int  _wrap_const_IB_NR_COMPMASK_RESERVED1 = 0x2;
static int  _wrap_const_IB_NR_COMPMASK_BASEVERSION = 0x4;
static int  _wrap_const_IB_NR_COMPMASK_CLASSVERSION = 0x8;
static int  _wrap_const_IB_NR_COMPMASK_NODETYPE = 0x10;
static int  _wrap_const_IB_NR_COMPMASK_NUMPORTS = 0x20;
static int  _wrap_const_IB_NR_COMPMASK_SYSIMAGEGUID = 0x40;
static int  _wrap_const_IB_NR_COMPMASK_NODEGUID = 0x80;
static int  _wrap_const_IB_NR_COMPMASK_PORTGUID = 0x100;
static int  _wrap_const_IB_NR_COMPMASK_PARTCAP = 0x200;
static int  _wrap_const_IB_NR_COMPMASK_DEVID = 0x400;
static int  _wrap_const_IB_NR_COMPMASK_REV = 0x800;
static int  _wrap_const_IB_NR_COMPMASK_PORTNUM = 0x1000;
static int  _wrap_const_IB_NR_COMPMASK_VENDID = 0x2000;
static int  _wrap_const_IB_NR_COMPMASK_NODEDESC = 0x4000;
static char * _wrap_const_IB_PIR_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_PIR_COMPMASK_PORTNUM = "0x2";
static char * _wrap_const_IB_PIR_COMPMASK_RESV1 = "0x4";
static char * _wrap_const_IB_PIR_COMPMASK_MKEY = "0x8";
static int  _wrap_const_IB_PIR_COMPMASK_GIDPRE = 0x10;
static int  _wrap_const_IB_PIR_COMPMASK_BASELID = 0x20;
static int  _wrap_const_IB_PIR_COMPMASK_SMLID = 0x40;
static int  _wrap_const_IB_PIR_COMPMASK_CAPMASK = 0x80;
static int  _wrap_const_IB_PIR_COMPMASK_DIAGCODE = 0x100;
static int  _wrap_const_IB_PIR_COMPMASK_MKEYLEASEPRD = 0x200;
static int  _wrap_const_IB_PIR_COMPMASK_LOCALPORTNUM = 0x400;
static int  _wrap_const_IB_PIR_COMPMASK_LNKWIDTHSUPPORT = 0x800;
static int  _wrap_const_IB_PIR_COMPMASK_LNKWIDTHACTIVE = 0x1000;
static int  _wrap_const_IB_PIR_COMPMASK_LINKWIDTHENABLED = 0x2000;
static int  _wrap_const_IB_PIR_COMPMASK_LNKSPEEDSUPPORT = 0x4000;
static int  _wrap_const_IB_PIR_COMPMASK_PORTSTATE = 0x10000;
static int  _wrap_const_IB_PIR_COMPMASK_PORTPHYSTATE = 0x20000;
static int  _wrap_const_IB_PIR_COMPMASK_LINKDWNDFLTSTATE = 0x40000;
static int  _wrap_const_IB_PIR_COMPMASK_MKEYPROTBITS = 0x80000;
static int  _wrap_const_IB_PIR_COMPMASK_LMC = 0x100000;
static int  _wrap_const_IB_PIR_COMPMASK_LINKSPEEDACTIVE = 0x200000;
static int  _wrap_const_IB_PIR_COMPMASK_LINKSPEEDENABLE = 0x400000;
static int  _wrap_const_IB_PIR_COMPMASK_NEIGHBORMTU = 0x800000;
static int  _wrap_const_IB_PIR_COMPMASK_MASTERSMSL = 0x1000000;
static int  _wrap_const_IB_PIR_COMPMASK_VLCAP = 0x2000000;
static int  _wrap_const_IB_PIR_COMPMASK_INITTYPE = 0x4000000;
static int  _wrap_const_IB_PIR_COMPMASK_VLHIGHLIMIT = 0x8000000;
static int  _wrap_const_IB_PIR_COMPMASK_VLARBHIGHCAP = 0x10000000;
static int  _wrap_const_IB_PIR_COMPMASK_VLARBLOWCAP = 0x20000000;
static int  _wrap_const_IB_PIR_COMPMASK_INITTYPEREPLY = 0x40000000;
static int  _wrap_const_IB_PIR_COMPMASK_MTUCAP = 0x80000000;
static char * _wrap_const_IB_PIR_COMPMASK_VLSTALLCNT = "0x100000000";
static char * _wrap_const_IB_PIR_COMPMASK_HOQLIFE = "0x200000000";
static char * _wrap_const_IB_PIR_COMPMASK_OPVLS = "0x400000000";
static char * _wrap_const_IB_PIR_COMPMASK_PARENFIN = "0x800000000";
static char * _wrap_const_IB_PIR_COMPMASK_PARENFOUT = "0x1000000000";
static char * _wrap_const_IB_PIR_COMPMASK_FILTERRAWIN = "0x2000000000";
static char * _wrap_const_IB_PIR_COMPMASK_FILTERRAWOUT = "0x4000000000";
static char * _wrap_const_IB_PIR_COMPMASK_MKEYVIO = "0x8000000000";
static char * _wrap_const_IB_PIR_COMPMASK_PKEYVIO = "0x10000000000";
static char * _wrap_const_IB_PIR_COMPMASK_QKEYVIO = "0x20000000000";
static char * _wrap_const_IB_PIR_COMPMASK_GUIDCAP = "0x40000000000";
static char * _wrap_const_IB_PIR_COMPMASK_RESV2 = "0x80000000000";
static char * _wrap_const_IB_PIR_COMPMASK_SUBNTO = "0x100000000000";
static char * _wrap_const_IB_PIR_COMPMASK_RESV3 = "0x200000000000";
static char * _wrap_const_IB_PIR_COMPMASK_RESPTIME = "0x400000000000";
static char * _wrap_const_IB_PIR_COMPMASK_LOCALPHYERR = "0x800000000000";
static char * _wrap_const_IB_PIR_COMPMASK_OVERRUNERR = "0x1000000000000";
static char * _wrap_const_IB_SMR_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_SMR_COMPMASK_GUID = "0x2";
static char * _wrap_const_IB_SMR_COMPMASK_SM_KEY = "0x4";
static char * _wrap_const_IB_SMR_COMPMASK_ACT_COUNT = "0x8";
static int  _wrap_const_IB_SMR_COMPMASK_STATE = 0x10;
static int  _wrap_const_IB_SMR_COMPMASK_PRI = 0x20;
static char * _wrap_const_IB_SWR_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_SWR_COMPMASK_LIN_CAP = "0x2";
static char * _wrap_const_IB_SWR_COMPMASK_RAND_CAP = "0x4";
static char * _wrap_const_IB_SWR_COMPMASK_MCAST_CAP = "0x8";
static char * _wrap_const_IB_SWR_COMPMASK_LIN_TOP = "0x10";
static char * _wrap_const_IB_SWR_COMPMASK_DEF_PORT = "0x20";
static char * _wrap_const_IB_SWR_COMPMASK_DEF_MCAST_PRI = "0x40";
static char * _wrap_const_IB_SWR_COMPMASK_DEF_MCAST_NOT = "0x80";
static char * _wrap_const_IB_SWR_COMPMASK_STATE = "0x100";
static char * _wrap_const_IB_SWR_COMPMASK_LIFE = "0x200";
static char * _wrap_const_IB_SWR_COMPMASK_LMC = "0x400";
static char * _wrap_const_IB_SWR_COMPMASK_ENFORCE_CAP = "0x800";
static char * _wrap_const_IB_SWR_COMPMASK_FLAGS = "0x1000";
static int  _wrap_const_IB_LR_COMPMASK_FROM_LID = 0x1;
static int  _wrap_const_IB_LR_COMPMASK_FROM_PORT = 0x2;
static int  _wrap_const_IB_LR_COMPMASK_TO_PORT = 0x4;
static int  _wrap_const_IB_LR_COMPMASK_TO_LID = 0x8;
static int  _wrap_const_IB_PR_COMPMASK_DGID = 0x4;
static int  _wrap_const_IB_PR_COMPMASK_SGID = 0x8;
static int  _wrap_const_IB_PR_COMPMASK_DLID = 0x10;
static int  _wrap_const_IB_PR_COMPMASK_SLID = 0x20;
static int  _wrap_const_IB_PR_COMPMASK_RAWTRAFIC = 0x40;
static int  _wrap_const_IB_PR_COMPMASK_RESV0 = 0x80;
static int  _wrap_const_IB_PR_COMPMASK_FLOWLABEL = 0x100;
static int  _wrap_const_IB_PR_COMPMASK_HOPLIMIT = 0x200;
static int  _wrap_const_IB_PR_COMPMASK_TCLASS = 0x400;
static int  _wrap_const_IB_PR_COMPMASK_REVERSIBLE = 0x800;
static int  _wrap_const_IB_PR_COMPMASK_NUMBPATH = 0x1000;
static int  _wrap_const_IB_PR_COMPMASK_PKEY = 0x2000;
static int  _wrap_const_IB_PR_COMPMASK_RESV1 = 0x4000;
static int  _wrap_const_IB_PR_COMPMASK_SL = 0x8000;
static int  _wrap_const_IB_PR_COMPMASK_MTUSELEC = 0x10000;
static int  _wrap_const_IB_PR_COMPMASK_MTU = 0x20000;
static int  _wrap_const_IB_PR_COMPMASK_RATESELEC = 0x40000;
static int  _wrap_const_IB_PR_COMPMASK_RATE = 0x80000;
static int  _wrap_const_IB_PR_COMPMASK_PKTLIFETIMESELEC = 0x100000;
static int  _wrap_const_IB_PR_COMPMASK_PFTLIFETIME = 0x200000;
static char * _wrap_const_IB_LFT_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_LFT_COMPMASK_BLOCK = "0x2";
static char * _wrap_const_IB_MCR_COMPMASK_GID = "0x1";
static char * _wrap_const_IB_MCR_COMPMASK_MGID = "0x1";
static char * _wrap_const_IB_MCR_COMPMASK_PORT_GID = "0x2";
static char * _wrap_const_IB_MCR_COMPMASK_QKEY = "0x4";
static char * _wrap_const_IB_MCR_COMPMASK_MLID = "0x8";
static char * _wrap_const_IB_MCR_COMPMASK_MTU_SEL = "0x10";
static char * _wrap_const_IB_MCR_COMPMASK_MTU = "0x20";
static char * _wrap_const_IB_MCR_COMPMASK_TCLASS = "0x40";
static char * _wrap_const_IB_MCR_COMPMASK_PKEY = "0x80";
static char * _wrap_const_IB_MCR_COMPMASK_RATE_SEL = "0x100";
static char * _wrap_const_IB_MCR_COMPMASK_RATE = "0x200";
static char * _wrap_const_IB_MCR_COMPMASK_LIFE_SEL = "0x400";
static char * _wrap_const_IB_MCR_COMPMASK_LIFE = "0x800";
static char * _wrap_const_IB_MCR_COMPMASK_SL = "0x1000";
static char * _wrap_const_IB_MCR_COMPMASK_FLOW = "0x2000";
static char * _wrap_const_IB_MCR_COMPMASK_HOP = "0x4000";
static char * _wrap_const_IB_MCR_COMPMASK_SCOPE = "0x8000";
static char * _wrap_const_IB_MCR_COMPMASK_JOIN_STATE = "0x10000";
static char * _wrap_const_IB_MCR_COMPMASK_PROXY = "0x20000";

typedef union {
	 struct _sac_inform_generic
	 {
		ib_net16_t		trap_num;
		ib_net32_t		qpn_resp_time_val;
      uint8_t        reserved2;
		uint8_t			node_type_msb;
		ib_net16_t		node_type_lsb;
	 } generic;

	 struct _sac_inform_vend
	 {
		ib_net16_t		dev_id;
		ib_net32_t		qpn_resp_time_val;
      uint8_t        reserved2;
		uint8_t			vendor_id_msb;
		ib_net16_t		vendor_id_lsb;
	 } vend;

  } sacInformInfo_g_or_v;


typedef struct {
		ib_net16_t		trap_num;
		ib_net32_t		qpn_resp_time_val;
      uint8_t        reserved2;
		uint8_t			node_type_msb;
		ib_net16_t		node_type_lsb;
	 } sacInformInfo_g_or_v_generic;


typedef struct {
		ib_net16_t		dev_id;
		ib_net32_t		qpn_resp_time_val;
      uint8_t        reserved2;
		uint8_t			vendor_id_msb;
		ib_net16_t		vendor_id_lsb;
	 } sacInformInfo_g_or_v_vend;

static char * _wrap_const_IB_SR_COMPMASK_SID = "0x1";
static char * _wrap_const_IB_SR_COMPMASK_SGID = "0x1";
static char * _wrap_const_IB_SR_COMPMASK_SPKEY = "0x2";
static char * _wrap_const_IB_SR_COMPMASK_RES1 = "0x4";
static char * _wrap_const_IB_SR_COMPMASK_SLEASE = "0x8";
static char * _wrap_const_IB_SR_COMPMASK_SKEY = "0x10";
static char * _wrap_const_IB_SR_COMPMASK_SNAME = "0x20";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_0 = "0x40";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_1 = "0x80";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_2 = "0x100";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_3 = "0x200";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_4 = "0x400";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_5 = "0x800";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_6 = "0x1000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_7 = "0x2000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_8 = "0x4000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_9 = "0x8000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_10 = "0x10000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_11 = "0x20000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_12 = "0x40000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_13 = "0x80000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_14 = "0x100000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA8_15 = "0x200000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_0 = "0x400000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_1 = "0x800000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_2 = "0x1000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_3 = "0x2000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_4 = "0x4000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_5 = "0x8000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_6 = "0x10000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA16_7 = "0x20000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA32_0 = "0x40000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA32_1 = "0x80000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA32_2 = "0x100000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA32_3 = "0x200000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA64_0 = "0x400000000";
static char * _wrap_const_IB_SR_COMPMASK_SDATA64_1 = "0x800000000";
static char * _wrap_const_IB_SLVL_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_SLVL_COMPMASK_IN_PORT = "0x2";
static char * _wrap_const_IB_SLVL_COMPMASK_OUT_PORT = "0x4";
static char * _wrap_const_IB_VLA_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_VLA_COMPMASK_OUT_PORT = "0x2";
static char * _wrap_const_IB_VLA_COMPMASK_BLOCK = "0x4";

#define sac_vl_arb_tbl_t ib_vl_arb_table_t
static char * _wrap_const_IB_PKEY_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_PKEY_COMPMASK_BLOCK = "0x2";
static char * _wrap_const_IB_PKEY_COMPMASK_PORT = "0x4";
static char * _wrap_const_IB_GIR_COMPMASK_LID = "0x1";
static char * _wrap_const_IB_GIR_COMPMASK_BLOCKNUM = "0x2";
static char * _wrap_const_IB_GIR_COMPMASK_GID0 = "0x10";
static char * _wrap_const_IB_GIR_COMPMASK_GID1 = "0x20";
static char * _wrap_const_IB_GIR_COMPMASK_GID2 = "0x40";
static char * _wrap_const_IB_GIR_COMPMASK_GID3 = "0x80";
static char * _wrap_const_IB_GIR_COMPMASK_GID4 = "0x100";
static char * _wrap_const_IB_GIR_COMPMASK_GID5 = "0x200";
static char * _wrap_const_IB_GIR_COMPMASK_GID6 = "0x400";
static char * _wrap_const_IB_GIR_COMPMASK_GID7 = "0x800";

#include "stdio.h"
#include <errno.h>
#include <stdlib.h>
#include <getopt.h>
#include <iba/ib_types.h>
#include <complib/cl_types.h>
#include <complib/cl_qmap.h>
#include <complib/cl_map.h>
#include <complib/cl_debug.h>
#include "ibis_api.h"

  /* the global pointer to this SM mads manager */
  static ibsm_t *gp_ibsm;

  /* the data section within a LFT mad */
  typedef struct _ibsm_lft_block {
    uint8_t lft[64];
  } ibsm_lft_block_t;

  /* the data section within a MFT mad */
  typedef struct _ibsm_mft_block {
    uint16_t mft[32];
  } ibsm_mft_block_t;

  /* we probably want to use our own naming for classes */
  typedef ib_node_info_t        smNodeInfo;
  typedef ib_port_info_t        smPortInfo;
  typedef ib_switch_info_t      smSwInfo;
  typedef ibsm_lft_block_t      smLftBlock;
  typedef ibsm_mft_block_t      smMftBlock;
  typedef ib_guid_info_t        smGuidInfo;
  typedef ib_pkey_table_t       smPkeyTable;
  typedef ib_slvl_table_t       smSlVlTable;
  typedef ib_vl_arb_table_t     smVlArbTable;
  typedef ib_node_desc_t        smNodeDesc;
  typedef ib_sm_info_t          smSMInfo;
  typedef ib_mad_notice_attr_t  smNotice;

  /* these are the globals to be used for set/get */
  ib_node_info_t          ibsm_node_info_obj;
  ib_port_info_t          ibsm_port_info_obj;
  ib_switch_info_t        ibsm_switch_info_obj;
  ibsm_lft_block_t        ibsm_lft_block_obj;
  ibsm_mft_block_t        ibsm_mft_block_obj;
  ib_guid_info_t          ibsm_guid_info_obj;
  ib_pkey_table_t         ibsm_pkey_table_obj;
  ib_slvl_table_t         ibsm_slvl_table_obj;
  ib_vl_arb_table_t       ibsm_vl_arb_table_obj;
  ib_node_desc_t          ibsm_node_desc_obj;
  ib_sm_info_t            ibsm_sm_info_obj;
  ib_mad_notice_attr_t    ibsm_notice_obj;

  /* TODO - define a Vendor Specific CR Read/Write attributes to use VL15 */


  int smMftGetAttrMod( uint16_t startLid, uint8_t startPort, uint32_t *p_attrMod )
    {
      if (startLid % 32)
      {
        printf("Error: Given startLid must be a multiply of 32: %u\n", startLid);
        return TCL_ERROR;
      }
      if (startPort % 16)
      {
        printf("Error: Given startPort must be a multiply of 16: %u\n", startPort);
        return TCL_ERROR;
      }

      /*
         always true due to the uint8_t
         if (startPort > 255)
         {
         printf("Error: Given startPort is out of range: %u > 255\n", startPort);
         return TCL_ERROR;
         }
      */
      *p_attrMod = ((startLid - 0xc000) / 32) + ((startPort / 16) << 28);
      return TCL_OK;
    }

  typedef uint8_t ibsm_node_desc_str_t;

typedef union {
	 struct _sm_notice_generic
	 {
		uint8_t		prod_type_msb;
		ib_net16_t	prod_type_lsb;
		ib_net16_t	trap_num;
	 }	generic;

	 struct _sm_notice_vend
	 {
		uint8_t		vend_id_msb;
		ib_net16_t	vend_id_lsb;
		ib_net16_t	dev_id;
	 } vend;
  } smNotice_g_or_v;


typedef union {
    struct _sm_raw_data
    {
      uint8_array_t	details[54];
    } raw_data;

    struct _sm_ntc_64_67
    {
      uint8_array_t  res[6];
      ib_gid_t   gid;	// the Node or Multicast Group that came in/out
    } ntc_64_67;

    struct _sm_ntc_128 {
      ib_net16_t sw_lid; // the sw lid of which link state changed
    } ntc_128;

    struct _sm_ntc_129_131 {
      ib_net16_t    pad;
      ib_net16_t    lid;		// lid and port number of the violation
      uint8_t       port_num;
    } ntc_129_131;

    struct _sm_ntc_144 {
      ib_net16_t    pad1;
      ib_net16_t    lid;		// lid where capability mask changed
      ib_net16_t    pad2;
      ib_net32_t    new_cap_mask; // new capability mask
    } ntc_144;

    struct _sm_ntc_145 {
      ib_net16_t    pad1;
      ib_net16_t    lid;		// lid where sys guid changed
      ib_net16_t    pad2;
      ib_net64_t    new_sys_guid; // new system image guid
    } ntc_145;

    struct _sm_ntc_256 {
      ib_net16_t    pad1;
      ib_net16_t    lid;
      ib_net16_t    pad2;
      uint8_t       method;
      uint8_t       pad3;
      ib_net16_t    attr_id;
      ib_net32_t    attr_mod;
      ib_net64_t    mkey;
      uint8_t       dr_slid;
      uint8_t       dr_trunc_hop;
      uint8_array_t dr_rtn_path[30];
    } ntc_256;

    struct _sm_ntc_257_258 // violation of p/q_key // 49
    {
      ib_net16_t    pad1;
      ib_net16_t    lid1;
      ib_net16_t    lid2;
      ib_net32_t    key;
      uint8_t       sl;
      ib_net32_t    qp1;
      ib_net32_t    qp2;
      ib_gid_t      gid1;
      ib_gid_t      gid2;
    } ntc_257_258;

    struct _sm_ntc_259 // p/q_key violation with sw info 53
    {
      ib_net16_t    data_valid;
      ib_net16_t    lid1;
      ib_net16_t    lid2;
      ib_net32_t    key;
      uint8_t       sl;
      ib_net32_t    qp1;
      uint8_t       qp2_msb;
      ib_net16_t    qp2_lsb;
      ib_gid_t      gid1;
      ib_gid_t      gid2;
      ib_net16_t    sw_lid;
      uint8_t       port_no;
    } ntc_259;

  } smNotice_data_details;


typedef struct {
		uint8_t		prod_type_msb;
		ib_net16_t	prod_type_lsb;
		ib_net16_t	trap_num;
	 } smNotice_g_or_v_generic;


typedef struct {
		uint8_t		vend_id_msb;
		ib_net16_t	vend_id_lsb;
		ib_net16_t	dev_id;
	 } smNotice_g_or_v_vend;


typedef struct {
      uint8_array_t	details[54];
    } smNotice_data_details_raw_data;


typedef struct {
      uint8_array_t  res[6];
      ib_gid_t   gid;	// the Node or Multicast Group that came in/out
    } smNotice_data_details_ntc_64_67;


typedef struct {
      ib_net16_t sw_lid; // the sw lid of which link state changed
    } smNotice_data_details_ntc_128;


typedef struct {
      ib_net16_t    pad;
      ib_net16_t    lid;		// lid and port number of the violation
      uint8_t       port_num;
    } smNotice_data_details_ntc_129_131;


typedef struct {
      ib_net16_t    pad1;
      ib_net16_t    lid;		// lid where capability mask changed
      ib_net16_t    pad2;
      ib_net32_t    new_cap_mask; // new capability mask
    } smNotice_data_details_ntc_144;


typedef struct {
      ib_net16_t    pad1;
      ib_net16_t    lid;		// lid where sys guid changed
      ib_net16_t    pad2;
      ib_net64_t    new_sys_guid; // new system image guid
    } smNotice_data_details_ntc_145;


typedef struct {
      ib_net16_t    pad1;
      ib_net16_t    lid;
      ib_net16_t    pad2;
      uint8_t       method;
      uint8_t       pad3;
      ib_net16_t    attr_id;
      ib_net32_t    attr_mod;
      ib_net64_t    mkey;
      uint8_t       dr_slid;
      uint8_t       dr_trunc_hop;
      uint8_array_t dr_rtn_path[30];
    } smNotice_data_details_ntc_256;


typedef struct {
      ib_net16_t    pad1;
      ib_net16_t    lid1;
      ib_net16_t    lid2;
      ib_net32_t    key;
      uint8_t       sl;
      ib_net32_t    qp1;
      ib_net32_t    qp2;
      ib_gid_t      gid1;
      ib_gid_t      gid2;
    } smNotice_data_details_ntc_257_258;


typedef struct {
      ib_net16_t    data_valid;
      ib_net16_t    lid1;
      ib_net16_t    lid2;
      ib_net32_t    key;
      uint8_t       sl;
      ib_net32_t    qp1;
      uint8_t       qp2_msb;
      ib_net16_t    qp2_lsb;
      ib_gid_t      gid1;
      ib_gid_t      gid2;
      ib_net16_t    sw_lid;
      uint8_t       port_no;
    } smNotice_data_details_ntc_259;


#include "stdio.h"
#include <errno.h>
#include <stdlib.h>
#include <getopt.h>
#include <iba/ib_types.h>
#include <complib/cl_types.h>
#include <complib/cl_qmap.h>
#include <complib/cl_map.h>
#include <complib/cl_debug.h>
#include "ibis_api.h"

	/* the global pointer to this CC mads manager */
	static ibcc_t *gp_ibcc;

	/* we probably want to use our own naming for classes */
	typedef ib_class_port_info_t       ccClassPortInfo;
	typedef ibcc_notice_attr_t         ccNotice;
	typedef ib_cong_info_t             ccCongestionInfo;
	typedef ib_cong_key_info_t         ccCongestionKeyInfo;
	typedef ibcc_ca_cong_log_t         ccCACongestionLog;
	typedef ibcc_sw_cong_log_t         ccSWCongestionLog;
	typedef ib_sw_cong_setting_t       ccSWCongestionSetting;
	typedef ib_sw_port_cong_setting_t  ccSWPortCongestionSetting;
	typedef ib_ca_cong_setting_t       ccCACongestionSetting;
	typedef ib_cc_tbl_t                ccTable;
	typedef ib_time_stamp_t            ccTimeStamp;

	/* these are the global objects to be used
	   for set/get (one for each attribute) */
	ib_class_port_info_t               ibcc_class_port_info_obj;
	ibcc_notice_attr_t                 ibcc_notice_obj;
	ib_cong_info_t                     ibcc_cong_info_obj;
	ib_cong_key_info_t                 ibcc_cong_key_info_obj;
	ibcc_ca_cong_log_t                 ibcc_ca_cong_log_obj;
	ibcc_sw_cong_log_t                 ibcc_sw_cong_log_obj;
	ib_sw_cong_setting_t               ibcc_sw_cong_setting_obj;
	ib_sw_port_cong_setting_t          ibcc_sw_port_cong_setting_obj;
	ib_ca_cong_setting_t               ibcc_ca_cong_setting_obj;
	ib_cc_tbl_t                        ibcc_table_obj;
	ib_time_stamp_t                    ibcc_time_stamp_obj;


  /* globals */
  ibis_t    IbisObj;
  static ibis_opt_t  *ibis_opt_p;
  ibis_opt_t IbisOpts;

  /* initialize the ibis object - is not done during init so we
     can play with the options ... */
  int ibis_ui_init(void)
  {
    ib_api_status_t status;
#ifdef OSM_BUILD_OPENIB
    complib_init();
#endif

	 status = ibis_init( &IbisOpts, IbisOpts.log_flags );
	 if( status != IB_SUCCESS ) {
		printf("-E- Error from ibis_init: %s.\n",
				 ib_get_err_str( status ));
		ibis_destroy();
		exit(1);
	 }

    status = ibcr_init(p_ibcr_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- fail to init ibcr_init.\n");
      ibcr_destroy( p_ibcr_global );
      exit(1);
    }

    status = ibpm_init(p_ibpm_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- fail to init ibpm_init.\n");
      ibpm_destroy( p_ibpm_global );
      exit(1);
    }

    status = ibvs_init(p_ibvs_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to init ibvs_init.\n");
      ibvs_destroy( p_ibvs_global );
      exit(1);
    }

    status = ibbbm_init(p_ibbbm_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to init ibbbm_init.\n");
      ibbbm_destroy( p_ibbbm_global );
      exit(1);
    }

    status = ibsm_init(gp_ibsm);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to init ibsm_init.\n");
      ibsm_destroy( gp_ibsm );
      exit(1);
    }

    status = ibcc_init(gp_ibcc);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to init ibcc_init.\n");
      ibcc_destroy( gp_ibcc );
      exit(1);
    }

    return 0;
  }

  /* destroy the osm object and close the complib.
     This function is called from by the Tcl_CreateExitHandler - meaning
     it will be called when calling 'exit' in the osm shell. */
  void
    ibis_exit( ClientData clientData ) {
    ibcr_destroy(p_ibcr_global);
    ibpm_destroy(p_ibpm_global);
    ibvs_destroy(p_ibvs_global);
    ibbbm_destroy(p_ibbbm_global);
    ibsm_destroy(gp_ibsm);
    ibcc_destroy(gp_ibcc);

    ibis_destroy();
    usleep(100);
    complib_exit();
  }

  int ibis_ui_destroy(void)
  {
    ibis_exit(NULL);
    return TCL_OK;
  }


  /* simply return the active port guid ibis is binded to */
  uint64_t ibis_get_port(void)
  {
    return (IbisObj.port_guid);
  }

  /* set the port we bind to and initialize sub packages */
  int ibis_set_port(uint64_t port_guid)
  {
    ib_api_status_t status;

    if (! IbisObj.initialized) {
      ibis_set_tcl_error("ibis was not initialized! Please use ibis_init before any call to ibis_*");
      ibis_tcl_error = 1;
      return 1;
    }

    IbisObj.port_guid = port_guid;

    status = ibcr_bind(p_ibcr_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to ibcr_bind.\n");
      ibcr_destroy( p_ibcr_global );
      exit(1);
    }

    status = ibpm_bind(p_ibpm_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to ibpm_bind.\n");
      ibpm_destroy( p_ibpm_global );
      exit(1);
    }

    status = ibvs_bind(p_ibvs_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to ibvs_bind.\n");
      ibvs_destroy( p_ibvs_global );
      exit(1);
    }

    status = ibbbm_bind(p_ibbbm_global);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to ibbbm_bind.\n");
      ibbbm_destroy( p_ibbbm_global );
      exit(1);
    }

    status = ibsm_bind(gp_ibsm);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to ibsm_bind.\n");
      ibsm_destroy( gp_ibsm );
      exit(1);
    }

    status = ibcc_bind(gp_ibcc);
    if( status != IB_SUCCESS )
    {
      printf("-E- Fail to ibcc_bind.\n");
      ibcc_destroy( gp_ibcc );
      exit(1);
    }

    if (ibsac_bind(&IbisObj))
    {
      printf("-E- Fail to ibsac_bind.\n");
      exit(1);
    }

    return 0;
  }

  int ibis_set_verbosity(int level) {
    if (IbisObj.initialized)
      osm_log_set_level( &(IbisObj.log), level );
    else
      IbisOpts.log_flags = level;

	 return TCL_OK;
  }

  int ibis_puts( osm_log_level_t verbosity, char *msg) {
	 osm_log(&(IbisObj.log), verbosity, msg );
	 return TCL_OK;
  }

  int ibis_set_transaction_timeout( uint32_t timeout_ms ) {
	 osm_log(&(IbisObj.log),
				OSM_LOG_VERBOSE,
				" Setting timeout to:%u[msec]\n", timeout_ms);
	 IbisOpts.transaction_timeout = timeout_ms;
	 return TCL_OK;
  }

  /* return the list of port guids and their status etc */
  static int ibis_get_local_ports_info (ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    Tcl_Obj * tcl_result;
	 ibis_t *p_ibis = &IbisObj;
	 uint32_t i;
	 ib_api_status_t status;
	 uint32_t num_ports = MAX_LOCAL_IBPORTS;
	 ib_port_attr_t attr_array[MAX_LOCAL_IBPORTS];
	 static char res[128];
	 Tcl_Obj *p_obj;

    memset(attr_array, 0, MAX_LOCAL_IBPORTS*sizeof(ib_port_attr_t));
    if (!IbisObj.initialized)
    {
      Tcl_SetStringObj(
        Tcl_GetObjResult(interp),
        "ibis was not yet initialized. please use ibis_init before.", -1);
      return TCL_ERROR;
    }

	 /* command options */
    tcl_result = Tcl_GetObjResult(interp);

    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_get_local_ports_info ",-1);
        return TCL_ERROR;
    }

    for (i = 0; i < num_ports; i++)
    {
      attr_array[i].num_pkeys = 0;
      attr_array[i].p_pkey_table = NULL;
    }
	 /*
		Call the transport layer for a list of local port
		GUID values.
	 */
    status = osm_vendor_get_all_port_attr(
      p_ibis->p_vendor,
      attr_array,
      &num_ports );
    if( status != IB_SUCCESS )
    {
      sprintf(ibis_tcl_error_msg,"-E- fail status:%x\n", status);
      ibis_tcl_error = 1;
      return( TCL_ERROR );
    }

	 /*
		 Go over all ports and build the return  value
	 */
	 for( i = 0; i < num_ports; i++ )
    {

      // start with 1 on host channel adapters.
      sprintf(res, "0x%016" PRIx64 " 0x%04X %s %u",
              cl_ntoh64( attr_array[i].port_guid ),
              attr_array[i].lid,
              ib_get_port_state_str( attr_array[i].link_state ),
              attr_array[i].port_num
              );

      p_obj = Tcl_NewStringObj(res, strlen(res));
      Tcl_ListObjAppendElement(interp, tcl_result, p_obj);
    }

    return TCL_OK;
  }

static int  _wrap_const_IBIS_LOG_NONE = 0x00;
static int  _wrap_const_IBIS_LOG_ERROR = 0x01;
static int  _wrap_const_IBIS_LOG_INFO = 0x02;
static int  _wrap_const_IBIS_LOG_VERBOSE = 0x04;
static int  _wrap_const_IBIS_LOG_DEBUG = 0x08;
static int  _wrap_const_IBIS_LOG_FUNCS = 0x10;
static int  _wrap_const_IBIS_LOG_FRAMES = 0x20;
extern char * ibisSourceVersion;


/* A TCL_AppInit() function that lets you build a new copy
 * of tclsh.
 *
 * The macro SWIG_init contains the name of the initialization
 * function in the wrapper file.
 */

#ifndef SWIG_RcFileName
char *SWIG_RcFileName = "~/.myapprc";
#endif


#ifdef MAC_TCL
extern int		MacintoshInit _ANSI_ARGS_((void));
#endif

int Tcl_AppInit(Tcl_Interp *interp){

  if (Tcl_Init(interp) == TCL_ERROR)
    return TCL_ERROR;

  /* Now initialize our functions */

  if (SWIG_init(interp) == TCL_ERROR)
    return TCL_ERROR;
#if TCL_MAJOR_VERSION > 7 || TCL_MAJOR_VERSION == 7 && TCL_MINOR_VERSION >= 5
   Tcl_SetVar(interp,"tcl_rcFileName",SWIG_RcFileName,TCL_GLOBAL_ONLY);
#else
   tcl_RcFileName = SWIG_RcFileName;
#endif
#ifdef SWIG_RcRsrcName
  Tcl_SetVar(interp,"tcl_rcRsrcName",SWIG_RcRsrcName,TCL_GLOBAL);
#endif

  return TCL_OK;
}

#if TCL_MAJOR_VERSION > 7 || TCL_MAJOR_VERSION == 7 && TCL_MINOR_VERSION >= 4
int main(int argc, char **argv) {
#ifdef MAC_TCL
    char *newArgv[2];

    if (MacintoshInit()  != TCL_OK) {
	Tcl_Exit(1);
    }

    argc = 1;
    newArgv[0] = "tclsh";
    newArgv[1] = NULL;
    argv = newArgv;
#endif

  Tcl_Main(argc, argv, Tcl_AppInit);
  return(0);

}
#else
extern int main();
#endif

static int _wrap_crDestroy(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. crDestroy ",-1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibcr_destroy_global();
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_crMultiMaxGet(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. crMultiMaxGet ",-1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibcr_num_of_multi_max();
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_crRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint32_t * _arg1;
    char ** _arg2;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint32_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg2 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. crRead lid address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibcr_read_global(*_arg0,*_arg1,_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg2,strlen(*_arg2));
  if (*_arg2) free(*_arg2);
}
    return TCL_OK;
}
static int _wrap_crWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint32_t * _arg1;
    uint32_t * _arg2;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint32_t  temp0;
    uint32_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. crWrite lid data address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibcr_write_global(*_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_crReadMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_cr_arr_t * _arg1;
    uint32_t * _arg2;
    char ** _arg3;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBCR_MULTI_MAX];
    uint32_t  temp1;

    clientData = clientData; objv = objv;
{
  _arg3 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. crReadMulti num lid_list address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);


    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBCR_MULTI_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp0[i] = strtoul(str, NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg1 = temp0;
    free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibcr_multi_read_global(*_arg0,_arg1,*_arg2,_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg3,strlen(*_arg3));
  if (*_arg3) free(*_arg3);
}
    return TCL_OK;
}
static int _wrap_crWriteMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_cr_arr_t * _arg1;
    uint32_t * _arg2;
    uint32_t * _arg3;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBCR_MULTI_MAX];
    uint32_t  temp1;
    uint32_t  temp2;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. crWriteMulti num lid_list data address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);


    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBCR_MULTI_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp0[i] = strtoul(str, NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg1 = temp0;
    free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibcr_multi_write_global(*_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_pmMultiMaxGet(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. pmMultiMaxGet ",-1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibpm_num_of_multi_max();
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_pmGetPortCounters(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    char ** _arg2;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg2 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. pmGetPortCounters lid port_select ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibpm_get_counters_global(*_arg0,*_arg1,_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg2,strlen(*_arg2));
  if (*_arg2) free(*_arg2);
}
    return TCL_OK;
}
static int _wrap_pmGetPortCountersMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_pm_arr_t * _arg1;
    uint8_pm_arr_t * _arg2;
    char ** _arg3;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBPM_MULTI_MAX];
    uint8_t  temp1[IBPM_MULTI_MAX];

    clientData = clientData; objv = objv;
{
  _arg3 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. pmGetPortCountersMulti num lid_list port_select_list ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);

    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBPM_MULTI_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp0[i] = atoi(str);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg1 = temp0;
    free(loc_buf);
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[3],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBPM_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp1[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }

  _arg2 = temp1;
  free(loc_buf);

}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibpm_get_multi_counters_global(*_arg0,_arg1,_arg2,_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg3,strlen(*_arg3));
  if (*_arg3) free(*_arg3);
}
    return TCL_OK;
}
static int _wrap_pmGetExtPortCountersMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_pm_arr_t * _arg1;
    uint8_pm_arr_t * _arg2;
    char ** _arg3;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBPM_MULTI_MAX];
    uint8_t  temp1[IBPM_MULTI_MAX];

    clientData = clientData; objv = objv;
{
  _arg3 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. pmGetExtPortCountersMulti num lid_list port_select_list ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);

    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBPM_MULTI_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp0[i] = atoi(str);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg1 = temp0;
    free(loc_buf);
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[3],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBPM_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp1[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }

  _arg2 = temp1;
  free(loc_buf);

}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibpm_get_multi_counters_extended_global(*_arg0,_arg1,_arg2,_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg3,strlen(*_arg3));
  if (*_arg3) free(*_arg3);
}
    return TCL_OK;
}
static int _wrap_pmClrAllCounters(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. pmClrAllCounters lid port_select ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibpm_clr_all_counters_global(*_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_pmClrAllCountersMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_pm_arr_t * _arg1;
    uint8_pm_arr_t * _arg2;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBPM_MULTI_MAX];
    uint8_t  temp1[IBPM_MULTI_MAX];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. pmClrAllCountersMulti num lid_list port_select_list ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);

    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBPM_MULTI_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp0[i] = atoi(str);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg1 = temp0;
    free(loc_buf);
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[3],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBPM_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp1[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }

  _arg2 = temp1;
  free(loc_buf);

}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibpm_clr_all_multi_counters_global(*_arg0,_arg1,_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsMultiMaxGet(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsMultiMaxGet ",-1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_num_of_multi_max();
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsCpuRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    uint8_t * _arg2;
    uint32_t * _arg3;
    char ** _arg4;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;
    uint32_t  temp2;

    clientData = clientData; objv = objv;
{
  _arg4 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsCpuRead lid size cpu_traget_size address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_cpu_read_global(*_arg0,*_arg1,*_arg2,*_arg3,_arg4);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg4,strlen(*_arg4));
  if (*_arg4) free(*_arg4);
}
    return TCL_OK;
}
static int _wrap_vsCpuWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    uint8_t * _arg2;
    uint32_vs_data_arr_t * _arg3;
    uint32_t * _arg4;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;
    uint32_t  temp2[IBVS_DATA_MAX];
    uint32_t  temp3;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 6) || (objc > 6)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsCpuWrite lid size cpu_traget_size data address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[4],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);
    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBVS_DATA_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp2[i] = (uint32_t)strtoll(str, (char **)NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg3 = temp2;
    free(loc_buf);
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_cpu_write_global(*_arg0,*_arg1,*_arg2,_arg3,*_arg4);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsI2cRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    uint32_t * _arg4;
    char ** _arg5;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;
    uint8_t  temp2;
    uint32_t  temp3;

    clientData = clientData; objv = objv;
{
  _arg5 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 6) || (objc > 6)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsI2cRead lid port_num device_id size address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_i2c_read_global(*_arg0,*_arg1,*_arg2,*_arg3,*_arg4,_arg5);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg5,strlen(*_arg5));
  if (*_arg5) free(*_arg5);
}
    return TCL_OK;
}
static int _wrap_vsI2cWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    uint32_t * _arg4;
    uint32_vs_data_arr_t * _arg5;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;
    uint8_t  temp2;
    uint32_t  temp3;
    uint32_t  temp4[IBVS_DATA_MAX];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 7) || (objc > 7)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsI2cWrite lid port_num device_id size address data ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[6],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);
    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBVS_DATA_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp4[i] = (uint32_t)strtoll(str, (char **)NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg5 = temp4;
    free(loc_buf);
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_i2c_write_global(*_arg0,*_arg1,*_arg2,*_arg3,*_arg4,_arg5);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsI2cReadMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    uint8_t * _arg4;
    uint32_t * _arg5;
    char ** _arg6;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint8_t  temp1;
    uint8_t  temp2;
    uint8_t  temp3;
    uint32_t  temp4;

    clientData = clientData; objv = objv;
{
  _arg6 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 7) || (objc > 7)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsI2cReadMulti num lid_list port_num device_id size address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
  temp4 = strtoul(Tcl_GetStringFromObj(objv[6],NULL), NULL, 0);
  _arg5 = &temp4;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_i2c_read_global(*_arg0,_arg1,*_arg2,*_arg3,*_arg4,*_arg5,_arg6);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg6,strlen(*_arg6));
  if (*_arg6) free(*_arg6);
}
    return TCL_OK;
}
static int _wrap_vsI2cWriteMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    uint8_t * _arg4;
    uint32_t * _arg5;
    uint32_vs_data_arr_t * _arg6;
    char ** _arg7;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint8_t  temp1;
    uint8_t  temp2;
    uint8_t  temp3;
    uint32_t  temp4;
    uint32_t  temp5[IBVS_DATA_MAX];

    clientData = clientData; objv = objv;
{
  _arg7 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 8) || (objc > 8)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsI2cWriteMulti num lid_list port_num device_id size address data ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
  temp4 = strtoul(Tcl_GetStringFromObj(objv[6],NULL), NULL, 0);
  _arg5 = &temp4;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[7],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);
    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBVS_DATA_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp5[i] = (uint32_t)strtoll(str, (char **)NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg6 = temp5;
    free(loc_buf);
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_i2c_write_global(*_arg0,_arg1,*_arg2,*_arg3,*_arg4,*_arg5,_arg6,_arg7);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg7,strlen(*_arg7));
  if (*_arg7) free(*_arg7);
}
    return TCL_OK;
}
static int _wrap_vsGpioRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    char ** _arg1;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;

    clientData = clientData; objv = objv;
{
  _arg1 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsGpioRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_gpio_read_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg1,strlen(*_arg1));
  if (*_arg1) free(*_arg1);
}
    return TCL_OK;
}
static int _wrap_vsGpioWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint64_t * _arg1;
    uint64_t * _arg2;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint64_t  temp0;
    uint64_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsGpioWrite lid gpio_mask gpio_data ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp0;
}
{
  temp1 = strtoull(Tcl_GetStringFromObj(objv[3],NULL), NULL,16);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_gpio_write_global(*_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsSWReset(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsSWReset num lid_list ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_sw_reset_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsFlashStartMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint32_t * _arg2;
    uint8_t * _arg3;
    uint32_t * _arg4;
    uint32_vs_data_arr_t * _arg5;
    char ** _arg6;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint32_t  temp1;
    uint8_t  temp2;
    uint32_t  temp3;
    uint32_t  temp4[IBVS_DATA_MAX];

    clientData = clientData; objv = objv;
{
  _arg6 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 7) || (objc > 7)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsFlashStartMulti num lid_list last size address data ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[6],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);
    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBVS_DATA_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp4[i] = (uint32_t)strtoll(str, (char **)NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg5 = temp4;
    free(loc_buf);
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_flash_open_global(*_arg0,_arg1,*_arg2,*_arg3,*_arg4,_arg5,_arg6);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg6,strlen(*_arg6));
  if (*_arg6) free(*_arg6);
}
    return TCL_OK;
}
static int _wrap_vsFlashStopMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint32_t * _arg2;
    char ** _arg3;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint32_t  temp1;

    clientData = clientData; objv = objv;
{
  _arg3 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsFlashStopMulti num lid_list force ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_flash_close_global(*_arg0,_arg1,*_arg2,_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg3,strlen(*_arg3));
  if (*_arg3) free(*_arg3);
}
    return TCL_OK;
}
static int _wrap_vsFlashSetBankMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint32_t * _arg2;
    char ** _arg3;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint32_t  temp1;

    clientData = clientData; objv = objv;
{
  _arg3 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsFlashSetBankMulti num lid_list address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_flash_set_bank_global(*_arg0,_arg1,*_arg2,_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg3,strlen(*_arg3));
  if (*_arg3) free(*_arg3);
}
    return TCL_OK;
}
static int _wrap_vsFlashEraseSectorMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint32_t * _arg2;
    char ** _arg3;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint32_t  temp1;

    clientData = clientData; objv = objv;
{
  _arg3 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsFlashEraseSectorMulti num lid_list address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_flash_erase_global(*_arg0,_arg1,*_arg2,_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg3,strlen(*_arg3));
  if (*_arg3) free(*_arg3);
}
    return TCL_OK;
}
static int _wrap_vsFlashReadSectorMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint8_t * _arg2;
    uint32_t * _arg3;
    char ** _arg4;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint8_t  temp1;
    uint32_t  temp2;

    clientData = clientData; objv = objv;
{
  _arg4 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsFlashReadSectorMulti num lid_list size address ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_flash_read_global(*_arg0,_arg1,*_arg2,*_arg3,_arg4);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg4,strlen(*_arg4));
  if (*_arg4) free(*_arg4);
}
    return TCL_OK;
}
static int _wrap_vsFlashWriteSectorMulti(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    uint16_vs_arr_t * _arg1;
    uint8_t * _arg2;
    uint32_t * _arg3;
    uint32_vs_data_arr_t * _arg4;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    uint16_t  temp0[IBVS_MULTI_MAX];
    uint8_t  temp1;
    uint32_t  temp2;
    uint32_t  temp3[IBVS_DATA_MAX];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 6) || (objc > 6)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsFlashWriteSectorMulti num lid_list size address data ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  char *str;
  char *str_tcl;
  int i;
  char *loc_buf;
  char *str_token = NULL;

  str_tcl = Tcl_GetStringFromObj(objv[2],NULL);
  loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
  strcpy(loc_buf,str_tcl);

  str = strtok_r(loc_buf," ", &str_token);
  for (i=0;i<IBVS_MULTI_MAX;i++) {
    if (str == NULL) {
      break;
    }
    temp0[i] = atoi(str);
    str = strtok_r(NULL," ",&str_token);
  }
  _arg1 = temp0;
  free(loc_buf);
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
    char *str;
    char *str_tcl;
    int i;
    char *loc_buf;
    char *str_token = NULL;

    str_tcl = Tcl_GetStringFromObj(objv[5],NULL);
    loc_buf = (char *)malloc((strlen(str_tcl)+1)*sizeof(char));
    strcpy(loc_buf,str_tcl);
    str = strtok_r(loc_buf," ", &str_token);
    for (i=0;i<IBVS_DATA_MAX;i++) {
	if (str == NULL) {
	    break;
	}
	temp3[i] = (uint32_t)strtoll(str, (char **)NULL, 0);
	str = strtok_r(NULL," ",&str_token);
    }
    _arg4 = temp3;
    free(loc_buf);
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_multi_flash_write_global(*_arg0,_arg1,*_arg2,*_arg3,_arg4);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsMirrorRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    char ** _arg1;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;

    clientData = clientData; objv = objv;
{
  _arg1 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsMirrorRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_mirror_read_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg1,strlen(*_arg1));
  if (*_arg1) free(*_arg1);
}
    return TCL_OK;
}
static int _wrap_vsMirrorWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint32_t * _arg1;
    uint32_t * _arg2;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint32_t  temp0;
    uint32_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsMirrorWrite lid rx_mirror tx_mirror ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_mirror_write_global(*_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_vsGetGeneralInfo(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    char ** _arg1;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;

    clientData = clientData; objv = objv;
{
  _arg1 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsGetGeneralInfo lid ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_general_info_get_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg1,strlen(*_arg1));
  if (*_arg1) free(*_arg1);
}
    return TCL_OK;
}
static int _wrap_vsGetPrivateLFTMap(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    char ** _arg2;
    char * p_c;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg2 = &p_c;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. vsGetPrivateLFTMap lid upper_ports ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibvs_plft_map_get_global(*_arg0,*_arg1,_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  Tcl_SetStringObj(tcl_result,*_arg2,strlen(*_arg2));
  if (*_arg2) free(*_arg2);
}
    return TCL_OK;
}
static int _wrap_bbmVpdRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    uint16_t * _arg2;
    uint16_t * _arg3;
    ib_bbm_vpd_t * _arg4;
    ib_bbm_vpd_t  temp;
    Tcl_Obj * tcl_result;
    uint16_t  temp0;
    uint8_t  temp1;
    uint16_t  temp2;
    uint16_t  temp3;

    clientData = clientData; objv = objv;
{
  _arg4 = &temp;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmVpdRead lid vpd_device_selector bytes_num offset ",-1);
        return TCL_ERROR;
    }
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp3;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_read_vpd_global(*_arg0,*_arg1,*_arg2,*_arg3,_arg4);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  if (_arg4) {
         static char buff[1624];
	 static int i;
	 sprintf(buff, "{b_key 0x%016" PRIx64 "} {bm_sequence 0x%x } {device_sel 0x%x } {bytes_num 0x%x } {offset 0x%x }",
                        cl_ntoh64(_arg4->b_key),
                        cl_ntoh16(_arg4->bm_sequence),
			(_arg4->vpd_device_selector),
			cl_ntoh16(_arg4->bytes_num),
			cl_ntoh16(_arg4->offset));
         for (i=0;i<cl_ntoh16(_arg4->bytes_num);i++) {
         	sprintf(buff,"%s {data%u 0x%x} ",buff,i,_arg4->data[i]);
         };

         Tcl_SetStringObj(tcl_result, buff, strlen(buff));
  } else {
         Tcl_SetStringObj(tcl_result, "", 0);
  }
}
    return TCL_OK;
}
static int _wrap_bbmVpdWrite(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    uint8_t * _arg1;
    uint16_t * _arg2;
    uint16_t * _arg3;
    uint8_t * _arg4;
    Tcl_Obj * tcl_result;
    uint16_t  temp;
    uint8_t  temp0;
    uint16_t  temp1;
    uint16_t  temp2;
    uint8_t  temp3;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 6) || (objc > 6)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmVpdWrite lid vpd_device_selector bytes_num offset p_data ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp1;
}
{
  temp2 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp2;
}
{
  temp3 = strtoul(Tcl_GetStringFromObj(objv[5],NULL), NULL, 0);
  _arg4 = &temp3;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_write_vpd_global(*_arg0,*_arg1,*_arg2,*_arg3,_arg4);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_bbmVSDRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    ib_bbm_bsn_vpd_t * _arg1;
    ib_bbm_bsn_vpd_t  temp;
    Tcl_Obj * tcl_result;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg1 = &temp;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmVSDRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_read_bsn_vpd_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  if (_arg1) {
         static char buff[512];
	 static int j;
	 sprintf(buff, "{b_key 0x%016" PRIx64 "} {bm_sequence 0x%x} {device_sel 0x%x} {bytes_num 0x%x} {offset 0x%x}",
                        cl_ntoh64(_arg1->b_key),
                        cl_ntoh16(_arg1->bm_sequence),
			(_arg1->vpd_device_selector),
		        cl_ntoh16(_arg1->bytes_num),
			cl_ntoh16(_arg1->offset));
	 for (j=0;j<IBBBM_BSN_VPD_SIZE;j++) {
		sprintf(buff,"%s {bsn%u 0x%x} ",buff,j,_arg1->bsn[j]);
	 };

         Tcl_SetStringObj(tcl_result, buff, strlen(buff));
  } else {
         Tcl_SetStringObj(tcl_result, "", 0);
  }
}
    return TCL_OK;
}
static int _wrap_bbmBSNRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    ib_bbm_bsn_vpd_t * _arg1;
    ib_bbm_bsn_vpd_t  temp;
    Tcl_Obj * tcl_result;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg1 = &temp;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmBSNRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_read_bsn_vpd_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  if (_arg1) {
         static char buff[512];
	 static int j;
	 sprintf(buff, "{b_key 0x%016" PRIx64 "} {bm_sequence 0x%x} {device_sel 0x%x} {bytes_num 0x%x} {offset 0x%x}",
                        cl_ntoh64(_arg1->b_key),
                        cl_ntoh16(_arg1->bm_sequence),
			(_arg1->vpd_device_selector),
		        cl_ntoh16(_arg1->bytes_num),
			cl_ntoh16(_arg1->offset));
	 for (j=0;j<IBBBM_BSN_VPD_SIZE;j++) {
		sprintf(buff,"%s {bsn%u 0x%x} ",buff,j,_arg1->bsn[j]);
	 };

         Tcl_SetStringObj(tcl_result, buff, strlen(buff));
  } else {
         Tcl_SetStringObj(tcl_result, "", 0);
  }
}
    return TCL_OK;
}
static int _wrap_bbmModRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    ib_bbm_mod_vpd_t * _arg1;
    ib_bbm_mod_vpd_t  temp;
    Tcl_Obj * tcl_result;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg1 = &temp;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmModRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_read_mod_vpd_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  if (_arg1) {
         static char buff[1624];
	 static int i;
	 sprintf(buff, "{b_key 0x%016" PRIx64 "} {bm_sequence 0x%x } {device_sel 0x%x } {bytes_num 0x%x } {offset 0x%x } {temp_sensor_count 0x%x }",
                        cl_ntoh64(_arg1->b_key),
                        cl_ntoh16(_arg1->bm_sequence),
			(_arg1->vpd_device_selector),
			cl_ntoh16(_arg1->bytes_num),
			cl_ntoh16(_arg1->offset),
			_arg1->temp_sensor_count);

         for (i=0;i<IBBBM_MOD_VPD_TEMP_SIZE;i++) {
         	sprintf(buff,"%s {temp%u 0x%x} ",buff,i+1,cl_ntoh16(_arg1->temp_sensor_record[i]));
         };

	 sprintf(buff,"%s {power_sup_count 0x%x} ",buff,_arg1->power_sup_count);

	 for (i=0;i<IBBBM_MOD_VPD_PWR_SIZE;i++) {
         	sprintf(buff,"%s {power%u 0x%x} ",buff,i+1,cl_ntoh32(_arg1->power_sup_record[i]));
         };

         Tcl_SetStringObj(tcl_result, buff, strlen(buff));
  } else {
         Tcl_SetStringObj(tcl_result, "", 0);
  }
}
    return TCL_OK;
}
static int _wrap_bbmChaRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    ib_bbm_cha_vpd_t * _arg1;
    ib_bbm_cha_vpd_t  temp;
    Tcl_Obj * tcl_result;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg1 = &temp;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmChaRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_read_cha_vpd_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  if (_arg1) {
         static char buff[1624];
	 static int i;
	 sprintf(buff, "{b_key 0x%016" PRIx64 "} {bm_sequence 0x%x } {device_sel 0x%x } {bytes_num 0x%x } {offset 0x%x } {temp_sensor_count 0x%x }",
                        cl_ntoh64(_arg1->b_key),
                        cl_ntoh16(_arg1->bm_sequence),
			(_arg1->vpd_device_selector),
		        cl_ntoh16(_arg1->bytes_num),
			cl_ntoh16(_arg1->offset),
			_arg1->temp_sensor_count);

	 for (i=0;i<IBBBM_CHA_VPD_TEMP_SIZE;i++) {
         	sprintf(buff,"%s {temp%u 0x%x} ",buff,i+1,cl_ntoh16(_arg1->temp_sensor_record[i]));
         };

	 sprintf(buff,"%s {power_sup_count 0x%x} ",buff,_arg1->power_sup_count);

	 for (i=0;i<IBBBM_CHA_VPD_PWR_SIZE;i++) {
         	sprintf(buff,"%s {power%u 0x%x} ",buff,i+1,cl_ntoh32(_arg1->power_sup_record[i]));
         };

	 sprintf(buff,"%s {fan_count 0x%x} ",buff,_arg1->fan_count);

   	 for (i=0;i<IBBBM_CHA_VPD_FAN_SIZE;i++) {
         	sprintf(buff,"%s {fan%u 0x%x} ",buff,i+1,cl_ntoh16(_arg1->fan_record[i]));
         };

         Tcl_SetStringObj(tcl_result, buff, strlen(buff));
  } else {
         Tcl_SetStringObj(tcl_result, "", 0);
  }
}
    return TCL_OK;
}
static int _wrap_bbmFWVerRead(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint16_t * _arg0;
    ib_bbm_fw_ver_vpd_t * _arg1;
    ib_bbm_fw_ver_vpd_t  temp;
    Tcl_Obj * tcl_result;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
{
  _arg1 = &temp;
}
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. bbmFWVerRead lid ",-1);
        return TCL_ERROR;
    }
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibbbm_read_fw_ver_vpd_global(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
{
  if (_arg1) {
         static char buff[512];
	 sprintf(buff, "{b_key 0x%016" PRIx64 "} {bm_sequence 0x%x} {device_sel 0x%x} {bytes_num 0x%x} {offset 0x%x} {maj_fw_ver 0x%x} {min_fw_ver 0x%x} {sub_min_fw_ver 0x%x}",
                        cl_ntoh64(_arg1->b_key),
                        cl_ntoh16(_arg1->bm_sequence),
			(_arg1->vpd_device_selector),
		        cl_ntoh16(_arg1->bytes_num),
			cl_ntoh16(_arg1->offset),
			_arg1->maj_fw_ver,
			_arg1->min_fw_ver,
			_arg1->sub_min_fw_ver);

         Tcl_SetStringObj(tcl_result, buff, strlen(buff));
  } else {
         Tcl_SetStringObj(tcl_result, "", 0);
  }
}
    return TCL_OK;
}
static int _wrap_ibis_puts(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint8_t * _arg0;
    char * _arg1;
    Tcl_Obj * tcl_result;
    uint8_t  temp;
    int templength;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_puts verbosity msg ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
    if ((_arg1 = Tcl_GetStringFromObj(objv[2], &templength)) == NULL) return TCL_ERROR;
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ibis_puts(*_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_ibis_init(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_init ",-1);
        return TCL_ERROR;
    }
    _result = (int )ibis_ui_init();
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_ibis_set_verbosity(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    int  _arg0;
    Tcl_Obj * tcl_result;
    int tempint;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_set_verbosity level ",-1);
        return TCL_ERROR;
    }
    if (Tcl_GetIntFromObj(interp,objv[1],&tempint) == TCL_ERROR) return TCL_ERROR;
    _arg0 = (int ) tempint;
    _result = (int )ibis_set_verbosity(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_ibis_set_port(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint64_t * _arg0;
    Tcl_Obj * tcl_result;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_set_port guid ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[1],NULL), NULL,16);
  _arg0 = &temp;
}
    _result = (int )ibis_set_port(*_arg0);
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_ibis_get_port(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    new_uint64_t * _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_get_port ",-1);
        return TCL_ERROR;
    }
    _result = (new_uint64_t *) malloc(sizeof(new_uint64_t ));
    *(_result) = ibis_get_port();
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
  free( _result );
}
    return TCL_OK;
}
static int _wrap_ibis_set_transaction_timeout(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    uint32_t * _arg0;
    Tcl_Obj * tcl_result;
    uint32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_set_transaction_timeout timeout_ms ",-1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[1],NULL), NULL, 0);
  _arg0 = &temp;
}
    _result = (int )ibis_set_transaction_timeout(*_arg0);
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int _wrap_ibis_exit(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    Tcl_Obj * tcl_result;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 1) || (objc > 1)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_exit ",-1);
        return TCL_ERROR;
    }
    _result = (int )ibis_ui_destroy();
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
#define _ib_node_info_base_version_set(_swigobj,_swigval) (_swigobj->base_version = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_base_version_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_base_version_set { sacNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_base_version_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_base_version_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_base_version_get(_swigobj) (&_swigobj->base_version)
static int _wrap_sacNodeInfo_base_version_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_base_version_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_base_version_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_base_version_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_class_version_set(_swigobj,_swigval) (_swigobj->class_version = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_class_version_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_class_version_set { sacNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_class_version_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_class_version_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_class_version_get(_swigobj) (&_swigobj->class_version)
static int _wrap_sacNodeInfo_class_version_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_class_version_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_class_version_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_class_version_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_node_type_set(_swigobj,_swigval) (_swigobj->node_type = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_node_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_node_type_set { sacNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_node_type_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_node_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_node_type_get(_swigobj) (&_swigobj->node_type)
static int _wrap_sacNodeInfo_node_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_node_type_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_node_type_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_node_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_num_ports_set(_swigobj,_swigval) (_swigobj->num_ports = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_num_ports_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_num_ports_set { sacNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_num_ports_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_num_ports_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_num_ports_get(_swigobj) (&_swigobj->num_ports)
static int _wrap_sacNodeInfo_num_ports_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_num_ports_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_num_ports_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_node_info_num_ports_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_sys_guid_set(_swigobj,_swigval) (_swigobj->sys_guid = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_sys_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacNodeInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_sys_guid_set { sacNodeInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_sys_guid_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_node_info_sys_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_sys_guid_get(_swigobj) (&_swigobj->sys_guid)
static int _wrap_sacNodeInfo_sys_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_sys_guid_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_sys_guid_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_node_info_sys_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_node_guid_set(_swigobj,_swigval) (_swigobj->node_guid = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_node_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacNodeInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_node_guid_set { sacNodeInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_node_guid_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_node_info_node_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_node_guid_get(_swigobj) (&_swigobj->node_guid)
static int _wrap_sacNodeInfo_node_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_node_guid_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_node_guid_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_node_info_node_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_port_guid_set(_swigobj,_swigval) (_swigobj->port_guid = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_port_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacNodeInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_port_guid_set { sacNodeInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_port_guid_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_node_info_port_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_port_guid_get(_swigobj) (&_swigobj->port_guid)
static int _wrap_sacNodeInfo_port_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_port_guid_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_port_guid_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_node_info_port_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_partition_cap_set(_swigobj,_swigval) (_swigobj->partition_cap = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_partition_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacNodeInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_partition_cap_set { sacNodeInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_partition_cap_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_node_info_partition_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_partition_cap_get(_swigobj) (&_swigobj->partition_cap)
static int _wrap_sacNodeInfo_partition_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_partition_cap_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_partition_cap_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_node_info_partition_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_device_id_set(_swigobj,_swigval) (_swigobj->device_id = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_device_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacNodeInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_device_id_set { sacNodeInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_device_id_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_node_info_device_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_device_id_get(_swigobj) (&_swigobj->device_id)
static int _wrap_sacNodeInfo_device_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_device_id_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_device_id_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_node_info_device_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_revision_set(_swigobj,_swigval) (_swigobj->revision = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_revision_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacNodeInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_revision_set { sacNodeInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_revision_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_node_info_revision_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_revision_get(_swigobj) (&_swigobj->revision)
static int _wrap_sacNodeInfo_revision_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_revision_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_revision_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_node_info_revision_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_port_num_vendor_id_set(_swigobj,_swigval) (_swigobj->port_num_vendor_id = *(_swigval),_swigval)
static int _wrap_sacNodeInfo_port_num_vendor_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacNodeInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_port_num_vendor_id_set { sacNodeInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_port_num_vendor_id_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_node_info_port_num_vendor_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_info_port_num_vendor_id_get(_swigobj) (&_swigobj->port_num_vendor_id)
static int _wrap_sacNodeInfo_port_num_vendor_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_port_num_vendor_id_get { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_port_num_vendor_id_get. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_node_info_port_num_vendor_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static void  sacNodeInfo_delete(sacNodeInfo *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacNodeInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeInfo_delete { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeInfo_delete. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacNodeInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacNodeInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacNodeInfo methods : { dump cget configure delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacNodeInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacNodeInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-base_version") == 0) {
                    cmd = _wrap_sacNodeInfo_base_version_set;
                }  else if (strcmp(_str,"-class_version") == 0) {
                    cmd = _wrap_sacNodeInfo_class_version_set;
                }  else if (strcmp(_str,"-node_type") == 0) {
                    cmd = _wrap_sacNodeInfo_node_type_set;
                }  else if (strcmp(_str,"-num_ports") == 0) {
                    cmd = _wrap_sacNodeInfo_num_ports_set;
                }  else if (strcmp(_str,"-sys_guid") == 0) {
                    cmd = _wrap_sacNodeInfo_sys_guid_set;
                }  else if (strcmp(_str,"-node_guid") == 0) {
                    cmd = _wrap_sacNodeInfo_node_guid_set;
                }  else if (strcmp(_str,"-port_guid") == 0) {
                    cmd = _wrap_sacNodeInfo_port_guid_set;
                }  else if (strcmp(_str,"-partition_cap") == 0) {
                    cmd = _wrap_sacNodeInfo_partition_cap_set;
                }  else if (strcmp(_str,"-device_id") == 0) {
                    cmd = _wrap_sacNodeInfo_device_id_set;
                }  else if (strcmp(_str,"-revision") == 0) {
                    cmd = _wrap_sacNodeInfo_revision_set;
                }  else if (strcmp(_str,"-port_num_vendor_id") == 0) {
                    cmd = _wrap_sacNodeInfo_port_num_vendor_id_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-base_version") == 0) {
                    cmd = _wrap_sacNodeInfo_base_version_get;
                }  else if (strcmp(_str,"-class_version") == 0) {
                    cmd = _wrap_sacNodeInfo_class_version_get;
                }  else if (strcmp(_str,"-node_type") == 0) {
                    cmd = _wrap_sacNodeInfo_node_type_get;
                }  else if (strcmp(_str,"-num_ports") == 0) {
                    cmd = _wrap_sacNodeInfo_num_ports_get;
                }  else if (strcmp(_str,"-sys_guid") == 0) {
                    cmd = _wrap_sacNodeInfo_sys_guid_get;
                }  else if (strcmp(_str,"-node_guid") == 0) {
                    cmd = _wrap_sacNodeInfo_node_guid_get;
                }  else if (strcmp(_str,"-port_guid") == 0) {
                    cmd = _wrap_sacNodeInfo_port_guid_get;
                }  else if (strcmp(_str,"-partition_cap") == 0) {
                    cmd = _wrap_sacNodeInfo_partition_cap_get;
                }  else if (strcmp(_str,"-device_id") == 0) {
                    cmd = _wrap_sacNodeInfo_device_id_get;
                }  else if (strcmp(_str,"-revision") == 0) {
                    cmd = _wrap_sacNodeInfo_revision_get;
                }  else if (strcmp(_str,"-port_num_vendor_id") == 0) {
                    cmd = _wrap_sacNodeInfo_port_num_vendor_id_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacNodeInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacNodeInfo_base_version_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-base_version ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_class_version_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-class_version ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_node_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_num_ports_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-num_ports ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_sys_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sys_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_node_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_port_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_partition_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-partition_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_device_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-device_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_revision_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-revision ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeInfo_port_num_vendor_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_num_vendor_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacNodeInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacNodeInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacNodeInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacNodeInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacNodeInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacNodeInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_node_record_t_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacNodeRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacNodeRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_lid_set { sacNodeRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_lid_set. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_node_record_t_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_record_t_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacNodeRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacNodeRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_lid_get { sacNodeRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_lid_get. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_node_record_t_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_record_t_node_info_set(_swigobj,_swigval) (_swigobj->node_info = *(_swigval),_swigval)
static int _wrap_sacNodeRec_node_info_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacNodeInfo * _result;
    sacNodeRec * _arg0;
    sacNodeInfo * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_node_info_set { sacNodeRec * } { sacNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_node_info_set. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacNodeRec_node_info_set. Expected _sacNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacNodeInfo *)_ib_node_record_t_node_info_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacNodeInfo_p");
    return TCL_OK;
}
#define _ib_node_record_t_node_info_get(_swigobj) (&_swigobj->node_info)
static int _wrap_sacNodeRec_node_info_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacNodeInfo * _result;
    sacNodeRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_node_info_get { sacNodeRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_node_info_get. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacNodeInfo *)_ib_node_record_t_node_info_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacNodeInfo_p");
    return TCL_OK;
}
#define _ib_node_record_t_node_desc_set(_swigobj,_swigval) (_swigobj->node_desc = *(_swigval),_swigval)
static int _wrap_sacNodeRec_node_desc_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_node_desc_t * _result;
    sacNodeRec * _arg0;
    ib_node_desc_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_node_desc_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_node_desc_set { sacNodeRec * } { ib_node_desc_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_node_desc_set. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  strcpy((char *)temp.description, Tcl_GetStringFromObj(objv[2],NULL));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_node_desc_t *)_ib_node_record_t_node_desc_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  /* we must make sure we do not overflow the node desc length */
  char buff[IB_NODE_DESCRIPTION_SIZE];
  strncpy(buff,(char *)_result,IB_NODE_DESCRIPTION_SIZE - 1);
  buff[IB_NODE_DESCRIPTION_SIZE - 1] = '\0';
  Tcl_SetStringObj(tcl_result, buff, strlen(buff));
}
    return TCL_OK;
}
#define _ib_node_record_t_node_desc_get(_swigobj) (&_swigobj->node_desc)
static int _wrap_sacNodeRec_node_desc_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_node_desc_t * _result;
    sacNodeRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_node_desc_get { sacNodeRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_node_desc_get. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_node_desc_t *)_ib_node_record_t_node_desc_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  /* we must make sure we do not overflow the node desc length */
  char buff[IB_NODE_DESCRIPTION_SIZE];
  strncpy(buff,(char *)_result,IB_NODE_DESCRIPTION_SIZE - 1);
  buff[IB_NODE_DESCRIPTION_SIZE - 1] = '\0';
  Tcl_SetStringObj(tcl_result, buff, strlen(buff));
}
    return TCL_OK;
}
static char * sacNodeRec_get(sacNodeRec *self,uint64_t  comp_mask) {
	 return(ibsacNodeRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GET));
  }
static int _wrap_sacNodeRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacNodeRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_get { sacNodeRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_get. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacNodeRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacNodeRec_getTable(sacNodeRec *self,uint64_t  comp_mask) {
	 return(ibsacNodeRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacNodeRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacNodeRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_getTable { sacNodeRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_getTable. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacNodeRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacNodeRec_delete(sacNodeRec *self) {
	 /* we need to de-register both the node info and node record */
	 SWIG_AltMnglUnregObj(&(self->node_info));
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacNodeRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacNodeRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacNodeRec_delete { sacNodeRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacNodeRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacNodeRec_delete. Expected _sacNodeRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacNodeRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacNodeRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacNodeRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacNodeRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacNodeRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacNodeRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacNodeRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacNodeRec_lid_set;
                }  else if (strcmp(_str,"-node_info") == 0) {
                    cmd = _wrap_sacNodeRec_node_info_set;
                }  else if (strcmp(_str,"-node_desc") == 0) {
                    cmd = _wrap_sacNodeRec_node_desc_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -node_info -node_desc  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -node_info -node_desc  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacNodeRec_lid_get;
                }  else if (strcmp(_str,"-node_info") == 0) {
                    cmd = _wrap_sacNodeRec_node_info_get;
                }  else if (strcmp(_str,"-node_desc") == 0) {
                    cmd = _wrap_sacNodeRec_node_desc_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacNodeRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -node_info -node_desc  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -node_info -node_desc  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacNodeRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeRec_node_info_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_info ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacNodeRec_node_desc_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_desc ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacNodeRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacNodeRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacNodeRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacNodeRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacNodeRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacNodeRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_port_info_m_key_set(_swigobj,_swigval) (_swigobj->m_key = *(_swigval),_swigval)
static int _wrap_sacPortInfo_m_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacPortInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_m_key_set { sacPortInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_m_key_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_port_info_m_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_m_key_get(_swigobj) (&_swigobj->m_key)
static int _wrap_sacPortInfo_m_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_m_key_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_m_key_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_port_info_m_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_subnet_prefix_set(_swigobj,_swigval) (_swigobj->subnet_prefix = *(_swigval),_swigval)
static int _wrap_sacPortInfo_subnet_prefix_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacPortInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_subnet_prefix_set { sacPortInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_subnet_prefix_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_port_info_subnet_prefix_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_subnet_prefix_get(_swigobj) (&_swigobj->subnet_prefix)
static int _wrap_sacPortInfo_subnet_prefix_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_subnet_prefix_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_subnet_prefix_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_port_info_subnet_prefix_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_base_lid_set(_swigobj,_swigval) (_swigobj->base_lid = *(_swigval),_swigval)
static int _wrap_sacPortInfo_base_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_base_lid_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_base_lid_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_base_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_base_lid_get(_swigobj) (&_swigobj->base_lid)
static int _wrap_sacPortInfo_base_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_base_lid_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_base_lid_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_base_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_master_sm_base_lid_set(_swigobj,_swigval) (_swigobj->master_sm_base_lid = *(_swigval),_swigval)
static int _wrap_sacPortInfo_master_sm_base_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_master_sm_base_lid_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_master_sm_base_lid_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_master_sm_base_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_master_sm_base_lid_get(_swigobj) (&_swigobj->master_sm_base_lid)
static int _wrap_sacPortInfo_master_sm_base_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_master_sm_base_lid_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_master_sm_base_lid_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_master_sm_base_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_capability_mask_set(_swigobj,_swigval) (_swigobj->capability_mask = *(_swigval),_swigval)
static int _wrap_sacPortInfo_capability_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_capability_mask_set { sacPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_capability_mask_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_port_info_capability_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_capability_mask_get(_swigobj) (&_swigobj->capability_mask)
static int _wrap_sacPortInfo_capability_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_capability_mask_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_capability_mask_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_port_info_capability_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_diag_code_set(_swigobj,_swigval) (_swigobj->diag_code = *(_swigval),_swigval)
static int _wrap_sacPortInfo_diag_code_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_diag_code_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_diag_code_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_diag_code_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_diag_code_get(_swigobj) (&_swigobj->diag_code)
static int _wrap_sacPortInfo_diag_code_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_diag_code_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_diag_code_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_diag_code_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_m_key_lease_period_set(_swigobj,_swigval) (_swigobj->m_key_lease_period = *(_swigval),_swigval)
static int _wrap_sacPortInfo_m_key_lease_period_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_m_key_lease_period_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_m_key_lease_period_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_m_key_lease_period_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_m_key_lease_period_get(_swigobj) (&_swigobj->m_key_lease_period)
static int _wrap_sacPortInfo_m_key_lease_period_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_m_key_lease_period_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_m_key_lease_period_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_m_key_lease_period_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_local_port_num_set(_swigobj,_swigval) (_swigobj->local_port_num = *(_swigval),_swigval)
static int _wrap_sacPortInfo_local_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_local_port_num_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_local_port_num_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_local_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_local_port_num_get(_swigobj) (&_swigobj->local_port_num)
static int _wrap_sacPortInfo_local_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_local_port_num_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_local_port_num_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_local_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_width_enabled_set(_swigobj,_swigval) (_swigobj->link_width_enabled = *(_swigval),_swigval)
static int _wrap_sacPortInfo_link_width_enabled_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_width_enabled_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_width_enabled_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_width_enabled_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_width_enabled_get(_swigobj) (&_swigobj->link_width_enabled)
static int _wrap_sacPortInfo_link_width_enabled_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_width_enabled_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_width_enabled_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_width_enabled_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_width_supported_set(_swigobj,_swigval) (_swigobj->link_width_supported = *(_swigval),_swigval)
static int _wrap_sacPortInfo_link_width_supported_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_width_supported_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_width_supported_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_width_supported_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_width_supported_get(_swigobj) (&_swigobj->link_width_supported)
static int _wrap_sacPortInfo_link_width_supported_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_width_supported_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_width_supported_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_width_supported_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_width_active_set(_swigobj,_swigval) (_swigobj->link_width_active = *(_swigval),_swigval)
static int _wrap_sacPortInfo_link_width_active_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_width_active_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_width_active_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_width_active_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_width_active_get(_swigobj) (&_swigobj->link_width_active)
static int _wrap_sacPortInfo_link_width_active_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_width_active_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_width_active_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_width_active_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_state_info1_set(_swigobj,_swigval) (_swigobj->state_info1 = *(_swigval),_swigval)
static int _wrap_sacPortInfo_state_info1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_state_info1_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_state_info1_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_state_info1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_state_info1_get(_swigobj) (&_swigobj->state_info1)
static int _wrap_sacPortInfo_state_info1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_state_info1_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_state_info1_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_state_info1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_state_info2_set(_swigobj,_swigval) (_swigobj->state_info2 = *(_swigval),_swigval)
static int _wrap_sacPortInfo_state_info2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_state_info2_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_state_info2_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_state_info2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_state_info2_get(_swigobj) (&_swigobj->state_info2)
static int _wrap_sacPortInfo_state_info2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_state_info2_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_state_info2_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_state_info2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_mkey_lmc_set(_swigobj,_swigval) (_swigobj->mkey_lmc = *(_swigval),_swigval)
static int _wrap_sacPortInfo_mkey_lmc_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_mkey_lmc_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_mkey_lmc_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_mkey_lmc_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_mkey_lmc_get(_swigobj) (&_swigobj->mkey_lmc)
static int _wrap_sacPortInfo_mkey_lmc_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_mkey_lmc_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_mkey_lmc_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_mkey_lmc_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_speed_set(_swigobj,_swigval) (_swigobj->link_speed = *(_swigval),_swigval)
static int _wrap_sacPortInfo_link_speed_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_speed_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_speed_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_speed_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_link_speed_get(_swigobj) (&_swigobj->link_speed)
static int _wrap_sacPortInfo_link_speed_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_link_speed_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_link_speed_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_link_speed_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_mtu_smsl_set(_swigobj,_swigval) (_swigobj->mtu_smsl = *(_swigval),_swigval)
static int _wrap_sacPortInfo_mtu_smsl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_mtu_smsl_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_mtu_smsl_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_mtu_smsl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_mtu_smsl_get(_swigobj) (&_swigobj->mtu_smsl)
static int _wrap_sacPortInfo_mtu_smsl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_mtu_smsl_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_mtu_smsl_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_mtu_smsl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_cap_set(_swigobj,_swigval) (_swigobj->vl_cap = *(_swigval),_swigval)
static int _wrap_sacPortInfo_vl_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_cap_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_cap_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_cap_get(_swigobj) (&_swigobj->vl_cap)
static int _wrap_sacPortInfo_vl_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_cap_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_cap_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_high_limit_set(_swigobj,_swigval) (_swigobj->vl_high_limit = *(_swigval),_swigval)
static int _wrap_sacPortInfo_vl_high_limit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_high_limit_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_high_limit_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_high_limit_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_high_limit_get(_swigobj) (&_swigobj->vl_high_limit)
static int _wrap_sacPortInfo_vl_high_limit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_high_limit_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_high_limit_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_high_limit_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_arb_high_cap_set(_swigobj,_swigval) (_swigobj->vl_arb_high_cap = *(_swigval),_swigval)
static int _wrap_sacPortInfo_vl_arb_high_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_arb_high_cap_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_arb_high_cap_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_arb_high_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_arb_high_cap_get(_swigobj) (&_swigobj->vl_arb_high_cap)
static int _wrap_sacPortInfo_vl_arb_high_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_arb_high_cap_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_arb_high_cap_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_arb_high_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_arb_low_cap_set(_swigobj,_swigval) (_swigobj->vl_arb_low_cap = *(_swigval),_swigval)
static int _wrap_sacPortInfo_vl_arb_low_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_arb_low_cap_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_arb_low_cap_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_arb_low_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_arb_low_cap_get(_swigobj) (&_swigobj->vl_arb_low_cap)
static int _wrap_sacPortInfo_vl_arb_low_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_arb_low_cap_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_arb_low_cap_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_arb_low_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_mtu_cap_set(_swigobj,_swigval) (_swigobj->mtu_cap = *(_swigval),_swigval)
static int _wrap_sacPortInfo_mtu_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_mtu_cap_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_mtu_cap_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_mtu_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_mtu_cap_get(_swigobj) (&_swigobj->mtu_cap)
static int _wrap_sacPortInfo_mtu_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_mtu_cap_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_mtu_cap_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_mtu_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_stall_life_set(_swigobj,_swigval) (_swigobj->vl_stall_life = *(_swigval),_swigval)
static int _wrap_sacPortInfo_vl_stall_life_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_stall_life_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_stall_life_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_stall_life_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_stall_life_get(_swigobj) (&_swigobj->vl_stall_life)
static int _wrap_sacPortInfo_vl_stall_life_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_stall_life_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_stall_life_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_stall_life_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_enforce_set(_swigobj,_swigval) (_swigobj->vl_enforce = *(_swigval),_swigval)
static int _wrap_sacPortInfo_vl_enforce_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_enforce_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_enforce_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_enforce_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_vl_enforce_get(_swigobj) (&_swigobj->vl_enforce)
static int _wrap_sacPortInfo_vl_enforce_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_vl_enforce_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_vl_enforce_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_vl_enforce_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_m_key_violations_set(_swigobj,_swigval) (_swigobj->m_key_violations = *(_swigval),_swigval)
static int _wrap_sacPortInfo_m_key_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_m_key_violations_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_m_key_violations_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_m_key_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_m_key_violations_get(_swigobj) (&_swigobj->m_key_violations)
static int _wrap_sacPortInfo_m_key_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_m_key_violations_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_m_key_violations_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_m_key_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_p_key_violations_set(_swigobj,_swigval) (_swigobj->p_key_violations = *(_swigval),_swigval)
static int _wrap_sacPortInfo_p_key_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_p_key_violations_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_p_key_violations_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_p_key_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_p_key_violations_get(_swigobj) (&_swigobj->p_key_violations)
static int _wrap_sacPortInfo_p_key_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_p_key_violations_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_p_key_violations_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_p_key_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_q_key_violations_set(_swigobj,_swigval) (_swigobj->q_key_violations = *(_swigval),_swigval)
static int _wrap_sacPortInfo_q_key_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_q_key_violations_set { sacPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_q_key_violations_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_q_key_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_q_key_violations_get(_swigobj) (&_swigobj->q_key_violations)
static int _wrap_sacPortInfo_q_key_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_q_key_violations_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_q_key_violations_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_port_info_q_key_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_guid_cap_set(_swigobj,_swigval) (_swigobj->guid_cap = *(_swigval),_swigval)
static int _wrap_sacPortInfo_guid_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_guid_cap_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_guid_cap_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_guid_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_guid_cap_get(_swigobj) (&_swigobj->guid_cap)
static int _wrap_sacPortInfo_guid_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_guid_cap_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_guid_cap_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_guid_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_subnet_timeout_set(_swigobj,_swigval) (_swigobj->subnet_timeout = *(_swigval),_swigval)
static int _wrap_sacPortInfo_subnet_timeout_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_subnet_timeout_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_subnet_timeout_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_subnet_timeout_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_subnet_timeout_get(_swigobj) (&_swigobj->subnet_timeout)
static int _wrap_sacPortInfo_subnet_timeout_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_subnet_timeout_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_subnet_timeout_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_subnet_timeout_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_resp_time_value_set(_swigobj,_swigval) (_swigobj->resp_time_value = *(_swigval),_swigval)
static int _wrap_sacPortInfo_resp_time_value_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_resp_time_value_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_resp_time_value_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_resp_time_value_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_resp_time_value_get(_swigobj) (&_swigobj->resp_time_value)
static int _wrap_sacPortInfo_resp_time_value_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_resp_time_value_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_resp_time_value_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_resp_time_value_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_error_threshold_set(_swigobj,_swigval) (_swigobj->error_threshold = *(_swigval),_swigval)
static int _wrap_sacPortInfo_error_threshold_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_error_threshold_set { sacPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_error_threshold_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_error_threshold_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_port_info_error_threshold_get(_swigobj) (&_swigobj->error_threshold)
static int _wrap_sacPortInfo_error_threshold_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_error_threshold_get { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_error_threshold_get. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_port_info_error_threshold_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static void  sacPortInfo_delete(sacPortInfo *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacPortInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortInfo_delete { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortInfo_delete. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacPortInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacPortInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacPortInfo methods : { dump cget configure delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacPortInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacPortInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-m_key") == 0) {
                    cmd = _wrap_sacPortInfo_m_key_set;
                }  else if (strcmp(_str,"-subnet_prefix") == 0) {
                    cmd = _wrap_sacPortInfo_subnet_prefix_set;
                }  else if (strcmp(_str,"-base_lid") == 0) {
                    cmd = _wrap_sacPortInfo_base_lid_set;
                }  else if (strcmp(_str,"-master_sm_base_lid") == 0) {
                    cmd = _wrap_sacPortInfo_master_sm_base_lid_set;
                }  else if (strcmp(_str,"-capability_mask") == 0) {
                    cmd = _wrap_sacPortInfo_capability_mask_set;
                }  else if (strcmp(_str,"-diag_code") == 0) {
                    cmd = _wrap_sacPortInfo_diag_code_set;
                }  else if (strcmp(_str,"-m_key_lease_period") == 0) {
                    cmd = _wrap_sacPortInfo_m_key_lease_period_set;
                }  else if (strcmp(_str,"-local_port_num") == 0) {
                    cmd = _wrap_sacPortInfo_local_port_num_set;
                }  else if (strcmp(_str,"-link_width_enabled") == 0) {
                    cmd = _wrap_sacPortInfo_link_width_enabled_set;
                }  else if (strcmp(_str,"-link_width_supported") == 0) {
                    cmd = _wrap_sacPortInfo_link_width_supported_set;
                }  else if (strcmp(_str,"-link_width_active") == 0) {
                    cmd = _wrap_sacPortInfo_link_width_active_set;
                }  else if (strcmp(_str,"-state_info1") == 0) {
                    cmd = _wrap_sacPortInfo_state_info1_set;
                }  else if (strcmp(_str,"-state_info2") == 0) {
                    cmd = _wrap_sacPortInfo_state_info2_set;
                }  else if (strcmp(_str,"-mkey_lmc") == 0) {
                    cmd = _wrap_sacPortInfo_mkey_lmc_set;
                }  else if (strcmp(_str,"-link_speed") == 0) {
                    cmd = _wrap_sacPortInfo_link_speed_set;
                }  else if (strcmp(_str,"-mtu_smsl") == 0) {
                    cmd = _wrap_sacPortInfo_mtu_smsl_set;
                }  else if (strcmp(_str,"-vl_cap") == 0) {
                    cmd = _wrap_sacPortInfo_vl_cap_set;
                }  else if (strcmp(_str,"-vl_high_limit") == 0) {
                    cmd = _wrap_sacPortInfo_vl_high_limit_set;
                }  else if (strcmp(_str,"-vl_arb_high_cap") == 0) {
                    cmd = _wrap_sacPortInfo_vl_arb_high_cap_set;
                }  else if (strcmp(_str,"-vl_arb_low_cap") == 0) {
                    cmd = _wrap_sacPortInfo_vl_arb_low_cap_set;
                }  else if (strcmp(_str,"-mtu_cap") == 0) {
                    cmd = _wrap_sacPortInfo_mtu_cap_set;
                }  else if (strcmp(_str,"-vl_stall_life") == 0) {
                    cmd = _wrap_sacPortInfo_vl_stall_life_set;
                }  else if (strcmp(_str,"-vl_enforce") == 0) {
                    cmd = _wrap_sacPortInfo_vl_enforce_set;
                }  else if (strcmp(_str,"-m_key_violations") == 0) {
                    cmd = _wrap_sacPortInfo_m_key_violations_set;
                }  else if (strcmp(_str,"-p_key_violations") == 0) {
                    cmd = _wrap_sacPortInfo_p_key_violations_set;
                }  else if (strcmp(_str,"-q_key_violations") == 0) {
                    cmd = _wrap_sacPortInfo_q_key_violations_set;
                }  else if (strcmp(_str,"-guid_cap") == 0) {
                    cmd = _wrap_sacPortInfo_guid_cap_set;
                }  else if (strcmp(_str,"-subnet_timeout") == 0) {
                    cmd = _wrap_sacPortInfo_subnet_timeout_set;
                }  else if (strcmp(_str,"-resp_time_value") == 0) {
                    cmd = _wrap_sacPortInfo_resp_time_value_set;
                }  else if (strcmp(_str,"-error_threshold") == 0) {
                    cmd = _wrap_sacPortInfo_error_threshold_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-m_key") == 0) {
                    cmd = _wrap_sacPortInfo_m_key_get;
                }  else if (strcmp(_str,"-subnet_prefix") == 0) {
                    cmd = _wrap_sacPortInfo_subnet_prefix_get;
                }  else if (strcmp(_str,"-base_lid") == 0) {
                    cmd = _wrap_sacPortInfo_base_lid_get;
                }  else if (strcmp(_str,"-master_sm_base_lid") == 0) {
                    cmd = _wrap_sacPortInfo_master_sm_base_lid_get;
                }  else if (strcmp(_str,"-capability_mask") == 0) {
                    cmd = _wrap_sacPortInfo_capability_mask_get;
                }  else if (strcmp(_str,"-diag_code") == 0) {
                    cmd = _wrap_sacPortInfo_diag_code_get;
                }  else if (strcmp(_str,"-m_key_lease_period") == 0) {
                    cmd = _wrap_sacPortInfo_m_key_lease_period_get;
                }  else if (strcmp(_str,"-local_port_num") == 0) {
                    cmd = _wrap_sacPortInfo_local_port_num_get;
                }  else if (strcmp(_str,"-link_width_enabled") == 0) {
                    cmd = _wrap_sacPortInfo_link_width_enabled_get;
                }  else if (strcmp(_str,"-link_width_supported") == 0) {
                    cmd = _wrap_sacPortInfo_link_width_supported_get;
                }  else if (strcmp(_str,"-link_width_active") == 0) {
                    cmd = _wrap_sacPortInfo_link_width_active_get;
                }  else if (strcmp(_str,"-state_info1") == 0) {
                    cmd = _wrap_sacPortInfo_state_info1_get;
                }  else if (strcmp(_str,"-state_info2") == 0) {
                    cmd = _wrap_sacPortInfo_state_info2_get;
                }  else if (strcmp(_str,"-mkey_lmc") == 0) {
                    cmd = _wrap_sacPortInfo_mkey_lmc_get;
                }  else if (strcmp(_str,"-link_speed") == 0) {
                    cmd = _wrap_sacPortInfo_link_speed_get;
                }  else if (strcmp(_str,"-mtu_smsl") == 0) {
                    cmd = _wrap_sacPortInfo_mtu_smsl_get;
                }  else if (strcmp(_str,"-vl_cap") == 0) {
                    cmd = _wrap_sacPortInfo_vl_cap_get;
                }  else if (strcmp(_str,"-vl_high_limit") == 0) {
                    cmd = _wrap_sacPortInfo_vl_high_limit_get;
                }  else if (strcmp(_str,"-vl_arb_high_cap") == 0) {
                    cmd = _wrap_sacPortInfo_vl_arb_high_cap_get;
                }  else if (strcmp(_str,"-vl_arb_low_cap") == 0) {
                    cmd = _wrap_sacPortInfo_vl_arb_low_cap_get;
                }  else if (strcmp(_str,"-mtu_cap") == 0) {
                    cmd = _wrap_sacPortInfo_mtu_cap_get;
                }  else if (strcmp(_str,"-vl_stall_life") == 0) {
                    cmd = _wrap_sacPortInfo_vl_stall_life_get;
                }  else if (strcmp(_str,"-vl_enforce") == 0) {
                    cmd = _wrap_sacPortInfo_vl_enforce_get;
                }  else if (strcmp(_str,"-m_key_violations") == 0) {
                    cmd = _wrap_sacPortInfo_m_key_violations_get;
                }  else if (strcmp(_str,"-p_key_violations") == 0) {
                    cmd = _wrap_sacPortInfo_p_key_violations_get;
                }  else if (strcmp(_str,"-q_key_violations") == 0) {
                    cmd = _wrap_sacPortInfo_q_key_violations_get;
                }  else if (strcmp(_str,"-guid_cap") == 0) {
                    cmd = _wrap_sacPortInfo_guid_cap_get;
                }  else if (strcmp(_str,"-subnet_timeout") == 0) {
                    cmd = _wrap_sacPortInfo_subnet_timeout_get;
                }  else if (strcmp(_str,"-resp_time_value") == 0) {
                    cmd = _wrap_sacPortInfo_resp_time_value_get;
                }  else if (strcmp(_str,"-error_threshold") == 0) {
                    cmd = _wrap_sacPortInfo_error_threshold_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacPortInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacPortInfo_m_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_subnet_prefix_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-subnet_prefix ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_base_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-base_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_master_sm_base_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-master_sm_base_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_capability_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-capability_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_diag_code_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-diag_code ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_m_key_lease_period_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key_lease_period ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_local_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-local_port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_link_width_enabled_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_width_enabled ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_link_width_supported_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_width_supported ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_link_width_active_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_width_active ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_state_info1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-state_info1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_state_info2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-state_info2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_mkey_lmc_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mkey_lmc ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_link_speed_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_speed ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_mtu_smsl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mtu_smsl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_vl_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_vl_high_limit_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_high_limit ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_vl_arb_high_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_arb_high_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_vl_arb_low_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_arb_low_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_mtu_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mtu_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_vl_stall_life_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_stall_life ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_vl_enforce_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_enforce ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_m_key_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key_violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_p_key_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-p_key_violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_q_key_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-q_key_violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_guid_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_subnet_timeout_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-subnet_timeout ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_resp_time_value_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resp_time_value ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortInfo_error_threshold_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-error_threshold ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacPortInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacPortInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacPortInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacPortInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacPortInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacPortInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_portinfo_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacPortRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_lid_set { sacPortRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_lid_set. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_portinfo_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_portinfo_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacPortRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPortRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_lid_get { sacPortRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_lid_get. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_portinfo_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_portinfo_record_port_num_set(_swigobj,_swigval) (_swigobj->port_num = *(_swigval),_swigval)
static int _wrap_sacPortRec_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_port_num_set { sacPortRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_port_num_set. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_portinfo_record_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_portinfo_record_port_num_get(_swigobj) (&_swigobj->port_num)
static int _wrap_sacPortRec_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPortRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_port_num_get { sacPortRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_port_num_get. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_portinfo_record_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_portinfo_record_port_info_set(_swigobj,_swigval) (_swigobj->port_info = *(_swigval),_swigval)
static int _wrap_sacPortRec_port_info_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPortInfo * _result;
    sacPortRec * _arg0;
    sacPortInfo * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_port_info_set { sacPortRec * } { sacPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_port_info_set. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacPortRec_port_info_set. Expected _sacPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacPortInfo *)_ib_portinfo_record_port_info_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacPortInfo_p");
    return TCL_OK;
}
#define _ib_portinfo_record_port_info_get(_swigobj) (&_swigobj->port_info)
static int _wrap_sacPortRec_port_info_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPortInfo * _result;
    sacPortRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_port_info_get { sacPortRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_port_info_get. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacPortInfo *)_ib_portinfo_record_port_info_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacPortInfo_p");
    return TCL_OK;
}
static char * sacPortRec_get(sacPortRec *self,uint64_t  comp_mask) {
	 return(ibsacPortInfoRecordQuery(self, cl_hton64(comp_mask),
                                    IB_MAD_METHOD_GET));
  }
static int _wrap_sacPortRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacPortRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_get { sacPortRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_get. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacPortRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacPortRec_getTable(sacPortRec *self,uint64_t  comp_mask) {
	 return(ibsacPortInfoRecordQuery(self, cl_hton64(comp_mask),
                                    IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacPortRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacPortRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_getTable { sacPortRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_getTable. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacPortRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacPortRec_delete(sacPortRec *self) {
	 /* we need to de-register both the node info and node record */
	 SWIG_AltMnglUnregObj(&(self->port_info));
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacPortRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPortRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPortRec_delete { sacPortRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPortRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPortRec_delete. Expected _sacPortRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacPortRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacPortRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacPortRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacPortRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacPortRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacPortRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacPortRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacPortRec_lid_set;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_sacPortRec_port_num_set;
                }  else if (strcmp(_str,"-port_info") == 0) {
                    cmd = _wrap_sacPortRec_port_info_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -port_num -port_info  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -port_num -port_info  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacPortRec_lid_get;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_sacPortRec_port_num_get;
                }  else if (strcmp(_str,"-port_info") == 0) {
                    cmd = _wrap_sacPortRec_port_info_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacPortRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -port_num -port_info  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -port_num -port_info  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacPortRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortRec_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPortRec_port_info_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_info ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacPortRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacPortRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacPortRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacPortRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacPortRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacPortRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_sm_info_guid_set(_swigobj,_swigval) (_swigobj->guid = *(_swigval),_swigval)
static int _wrap_sacSmInfo_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacSmInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_guid_set { sacSmInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_guid_set. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_sm_info_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_guid_get(_swigobj) (&_swigobj->guid)
static int _wrap_sacSmInfo_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacSmInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_guid_get { sacSmInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_guid_get. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_sm_info_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_sm_key_set(_swigobj,_swigval) (_swigobj->sm_key = *(_swigval),_swigval)
static int _wrap_sacSmInfo_sm_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacSmInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_sm_key_set { sacSmInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_sm_key_set. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_sm_info_sm_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_sm_key_get(_swigobj) (&_swigobj->sm_key)
static int _wrap_sacSmInfo_sm_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacSmInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_sm_key_get { sacSmInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_sm_key_get. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_sm_info_sm_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_act_count_set(_swigobj,_swigval) (_swigobj->act_count = *(_swigval),_swigval)
static int _wrap_sacSmInfo_act_count_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacSmInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_act_count_set { sacSmInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_act_count_set. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_sm_info_act_count_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_act_count_get(_swigobj) (&_swigobj->act_count)
static int _wrap_sacSmInfo_act_count_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacSmInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_act_count_get { sacSmInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_act_count_get. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_sm_info_act_count_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_pri_state_set(_swigobj,_swigval) (_swigobj->pri_state = *(_swigval),_swigval)
static int _wrap_sacSmInfo_pri_state_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSmInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_pri_state_set { sacSmInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_pri_state_set. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sm_info_pri_state_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sm_info_pri_state_get(_swigobj) (&_swigobj->pri_state)
static int _wrap_sacSmInfo_pri_state_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSmInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_pri_state_get { sacSmInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_pri_state_get. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sm_info_pri_state_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static void  sacSmInfo_delete(sacSmInfo *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacSmInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSmInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmInfo_delete { sacSmInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmInfo_delete. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacSmInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacSmInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacSmInfo methods : { dump cget configure delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacSmInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacSmInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_sacSmInfo_guid_set;
                }  else if (strcmp(_str,"-sm_key") == 0) {
                    cmd = _wrap_sacSmInfo_sm_key_set;
                }  else if (strcmp(_str,"-act_count") == 0) {
                    cmd = _wrap_sacSmInfo_act_count_set;
                }  else if (strcmp(_str,"-pri_state") == 0) {
                    cmd = _wrap_sacSmInfo_pri_state_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -guid -sm_key -act_count -pri_state  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -guid -sm_key -act_count -pri_state  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_sacSmInfo_guid_get;
                }  else if (strcmp(_str,"-sm_key") == 0) {
                    cmd = _wrap_sacSmInfo_sm_key_get;
                }  else if (strcmp(_str,"-act_count") == 0) {
                    cmd = _wrap_sacSmInfo_act_count_get;
                }  else if (strcmp(_str,"-pri_state") == 0) {
                    cmd = _wrap_sacSmInfo_pri_state_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacSmInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -guid -sm_key -act_count -pri_state  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -guid -sm_key -act_count -pri_state  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacSmInfo_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSmInfo_sm_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sm_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSmInfo_act_count_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-act_count ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSmInfo_pri_state_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pri_state ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacSmInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacSmInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacSmInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacSmInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacSmInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacSmInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_sminfo_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacSmRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSmRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_lid_set { sacSmRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_lid_set. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sminfo_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sminfo_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacSmRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSmRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_lid_get { sacSmRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_lid_get. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sminfo_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sminfo_record_sm_info_set(_swigobj,_swigval) (_swigobj->sm_info = *(_swigval),_swigval)
static int _wrap_sacSmRec_sm_info_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSmInfo * _result;
    sacSmRec * _arg0;
    sacSmInfo * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_sm_info_set { sacSmRec * } { sacSmInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_sm_info_set. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacSmInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacSmRec_sm_info_set. Expected _sacSmInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacSmInfo *)_ib_sminfo_record_sm_info_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacSmInfo_p");
    return TCL_OK;
}
#define _ib_sminfo_record_sm_info_get(_swigobj) (&_swigobj->sm_info)
static int _wrap_sacSmRec_sm_info_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSmInfo * _result;
    sacSmRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_sm_info_get { sacSmRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_sm_info_get. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacSmInfo *)_ib_sminfo_record_sm_info_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacSmInfo_p");
    return TCL_OK;
}
static char * sacSmRec_get(sacSmRec *self,uint64_t  comp_mask) {
	 return(ibsacSMInfoRecordQuery(self, cl_hton64(comp_mask),
                                  IB_MAD_METHOD_GET));
  }
static int _wrap_sacSmRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacSmRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_get { sacSmRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_get. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacSmRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacSmRec_getTable(sacSmRec *self,uint64_t  comp_mask) {
	 return(ibsacSMInfoRecordQuery(self, cl_hton64(comp_mask),
                                  IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacSmRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacSmRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_getTable { sacSmRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_getTable. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacSmRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacSmRec_delete(sacSmRec *self) {
	 /* we need to de-register both the node info and node record */
	 SWIG_AltMnglUnregObj(&(self->sm_info));
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacSmRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSmRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSmRec_delete { sacSmRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSmRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSmRec_delete. Expected _sacSmRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacSmRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacSmRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacSmRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacSmRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacSmRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacSmRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacSmRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacSmRec_lid_set;
                }  else if (strcmp(_str,"-sm_info") == 0) {
                    cmd = _wrap_sacSmRec_sm_info_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -sm_info  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -sm_info  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacSmRec_lid_get;
                }  else if (strcmp(_str,"-sm_info") == 0) {
                    cmd = _wrap_sacSmRec_sm_info_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacSmRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -sm_info  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -sm_info  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacSmRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSmRec_sm_info_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sm_info ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacSmRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacSmRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacSmRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacSmRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacSmRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacSmRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_switch_info_lin_cap_set(_swigobj,_swigval) (_swigobj->lin_cap = *(_swigval),_swigval)
static int _wrap_sacSwInfo_lin_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_lin_cap_set { sacSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_lin_cap_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_lin_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_lin_cap_get(_swigobj) (&_swigobj->lin_cap)
static int _wrap_sacSwInfo_lin_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_lin_cap_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_lin_cap_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_lin_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_rand_cap_set(_swigobj,_swigval) (_swigobj->rand_cap = *(_swigval),_swigval)
static int _wrap_sacSwInfo_rand_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_rand_cap_set { sacSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_rand_cap_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_rand_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_rand_cap_get(_swigobj) (&_swigobj->rand_cap)
static int _wrap_sacSwInfo_rand_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_rand_cap_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_rand_cap_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_rand_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_mcast_cap_set(_swigobj,_swigval) (_swigobj->mcast_cap = *(_swigval),_swigval)
static int _wrap_sacSwInfo_mcast_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_mcast_cap_set { sacSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_mcast_cap_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_mcast_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_mcast_cap_get(_swigobj) (&_swigobj->mcast_cap)
static int _wrap_sacSwInfo_mcast_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_mcast_cap_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_mcast_cap_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_mcast_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_lin_top_set(_swigobj,_swigval) (_swigobj->lin_top = *(_swigval),_swigval)
static int _wrap_sacSwInfo_lin_top_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_lin_top_set { sacSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_lin_top_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_lin_top_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_lin_top_get(_swigobj) (&_swigobj->lin_top)
static int _wrap_sacSwInfo_lin_top_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_lin_top_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_lin_top_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_lin_top_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_def_port_set(_swigobj,_swigval) (_swigobj->def_port = *(_swigval),_swigval)
static int _wrap_sacSwInfo_def_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_def_port_set { sacSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_def_port_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_def_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_def_port_get(_swigobj) (&_swigobj->def_port)
static int _wrap_sacSwInfo_def_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_def_port_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_def_port_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_def_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_def_mcast_pri_port_set(_swigobj,_swigval) (_swigobj->def_mcast_pri_port = *(_swigval),_swigval)
static int _wrap_sacSwInfo_def_mcast_pri_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_def_mcast_pri_port_set { sacSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_def_mcast_pri_port_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_def_mcast_pri_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_def_mcast_pri_port_get(_swigobj) (&_swigobj->def_mcast_pri_port)
static int _wrap_sacSwInfo_def_mcast_pri_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_def_mcast_pri_port_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_def_mcast_pri_port_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_def_mcast_pri_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_def_mcast_not_port_set(_swigobj,_swigval) (_swigobj->def_mcast_not_port = *(_swigval),_swigval)
static int _wrap_sacSwInfo_def_mcast_not_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_def_mcast_not_port_set { sacSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_def_mcast_not_port_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_def_mcast_not_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_def_mcast_not_port_get(_swigobj) (&_swigobj->def_mcast_not_port)
static int _wrap_sacSwInfo_def_mcast_not_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_def_mcast_not_port_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_def_mcast_not_port_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_def_mcast_not_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_life_state_set(_swigobj,_swigval) (_swigobj->life_state = *(_swigval),_swigval)
static int _wrap_sacSwInfo_life_state_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_life_state_set { sacSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_life_state_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_life_state_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_life_state_get(_swigobj) (&_swigobj->life_state)
static int _wrap_sacSwInfo_life_state_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_life_state_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_life_state_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_life_state_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_lids_per_port_set(_swigobj,_swigval) (_swigobj->lids_per_port = *(_swigval),_swigval)
static int _wrap_sacSwInfo_lids_per_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_lids_per_port_set { sacSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_lids_per_port_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_lids_per_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_lids_per_port_get(_swigobj) (&_swigobj->lids_per_port)
static int _wrap_sacSwInfo_lids_per_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_lids_per_port_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_lids_per_port_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_lids_per_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_enforce_cap_set(_swigobj,_swigval) (_swigobj->enforce_cap = *(_swigval),_swigval)
static int _wrap_sacSwInfo_enforce_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_enforce_cap_set { sacSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_enforce_cap_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_enforce_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_enforce_cap_get(_swigobj) (&_swigobj->enforce_cap)
static int _wrap_sacSwInfo_enforce_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_enforce_cap_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_enforce_cap_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_enforce_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_flags_set(_swigobj,_swigval) (_swigobj->flags = *(_swigval),_swigval)
static int _wrap_sacSwInfo_flags_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_flags_set { sacSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_flags_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_flags_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_flags_get(_swigobj) (&_swigobj->flags)
static int _wrap_sacSwInfo_flags_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_flags_get { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_flags_get. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_switch_info_flags_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static void  sacSwInfo_delete(sacSwInfo *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacSwInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwInfo_delete { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwInfo_delete. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacSwInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacSwInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacSwInfo methods : { dump cget configure delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacSwInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacSwInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lin_cap") == 0) {
                    cmd = _wrap_sacSwInfo_lin_cap_set;
                }  else if (strcmp(_str,"-rand_cap") == 0) {
                    cmd = _wrap_sacSwInfo_rand_cap_set;
                }  else if (strcmp(_str,"-mcast_cap") == 0) {
                    cmd = _wrap_sacSwInfo_mcast_cap_set;
                }  else if (strcmp(_str,"-lin_top") == 0) {
                    cmd = _wrap_sacSwInfo_lin_top_set;
                }  else if (strcmp(_str,"-def_port") == 0) {
                    cmd = _wrap_sacSwInfo_def_port_set;
                }  else if (strcmp(_str,"-def_mcast_pri_port") == 0) {
                    cmd = _wrap_sacSwInfo_def_mcast_pri_port_set;
                }  else if (strcmp(_str,"-def_mcast_not_port") == 0) {
                    cmd = _wrap_sacSwInfo_def_mcast_not_port_set;
                }  else if (strcmp(_str,"-life_state") == 0) {
                    cmd = _wrap_sacSwInfo_life_state_set;
                }  else if (strcmp(_str,"-lids_per_port") == 0) {
                    cmd = _wrap_sacSwInfo_lids_per_port_set;
                }  else if (strcmp(_str,"-enforce_cap") == 0) {
                    cmd = _wrap_sacSwInfo_enforce_cap_set;
                }  else if (strcmp(_str,"-flags") == 0) {
                    cmd = _wrap_sacSwInfo_flags_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lin_cap") == 0) {
                    cmd = _wrap_sacSwInfo_lin_cap_get;
                }  else if (strcmp(_str,"-rand_cap") == 0) {
                    cmd = _wrap_sacSwInfo_rand_cap_get;
                }  else if (strcmp(_str,"-mcast_cap") == 0) {
                    cmd = _wrap_sacSwInfo_mcast_cap_get;
                }  else if (strcmp(_str,"-lin_top") == 0) {
                    cmd = _wrap_sacSwInfo_lin_top_get;
                }  else if (strcmp(_str,"-def_port") == 0) {
                    cmd = _wrap_sacSwInfo_def_port_get;
                }  else if (strcmp(_str,"-def_mcast_pri_port") == 0) {
                    cmd = _wrap_sacSwInfo_def_mcast_pri_port_get;
                }  else if (strcmp(_str,"-def_mcast_not_port") == 0) {
                    cmd = _wrap_sacSwInfo_def_mcast_not_port_get;
                }  else if (strcmp(_str,"-life_state") == 0) {
                    cmd = _wrap_sacSwInfo_life_state_get;
                }  else if (strcmp(_str,"-lids_per_port") == 0) {
                    cmd = _wrap_sacSwInfo_lids_per_port_get;
                }  else if (strcmp(_str,"-enforce_cap") == 0) {
                    cmd = _wrap_sacSwInfo_enforce_cap_get;
                }  else if (strcmp(_str,"-flags") == 0) {
                    cmd = _wrap_sacSwInfo_flags_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacSwInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacSwInfo_lin_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lin_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_rand_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-rand_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_mcast_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mcast_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_lin_top_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lin_top ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_def_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-def_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_def_mcast_pri_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-def_mcast_pri_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_def_mcast_not_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-def_mcast_not_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_life_state_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-life_state ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_lids_per_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lids_per_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_enforce_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-enforce_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwInfo_flags_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-flags ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacSwInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacSwInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacSwInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacSwInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacSwInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacSwInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_switch_info_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacSwRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_lid_set { sacSwRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_lid_set. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacSwRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSwRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_lid_get { sacSwRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_lid_get. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_switch_info_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_switch_info_record_switch_info_set(_swigobj,_swigval) (_swigobj->switch_info = *(_swigval),_swigval)
static int _wrap_sacSwRec_switch_info_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSwInfo * _result;
    sacSwRec * _arg0;
    sacSwInfo * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_switch_info_set { sacSwRec * } { sacSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_switch_info_set. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacSwRec_switch_info_set. Expected _sacSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacSwInfo *)_ib_switch_info_record_switch_info_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacSwInfo_p");
    return TCL_OK;
}
#define _ib_switch_info_record_switch_info_get(_swigobj) (&_swigobj->switch_info)
static int _wrap_sacSwRec_switch_info_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSwInfo * _result;
    sacSwRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_switch_info_get { sacSwRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_switch_info_get. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacSwInfo *)_ib_switch_info_record_switch_info_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacSwInfo_p");
    return TCL_OK;
}
static char * sacSwRec_get(sacSwRec *self,uint64_t  comp_mask) {
	 return(ibsacSwitchInfoRecordQuery(self, cl_hton64(comp_mask),
                                      IB_MAD_METHOD_GET));
  }
static int _wrap_sacSwRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacSwRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_get { sacSwRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_get. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacSwRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacSwRec_getTable(sacSwRec *self,uint64_t  comp_mask) {
	 return(ibsacSwitchInfoRecordQuery(self, cl_hton64(comp_mask),
                                      IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacSwRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacSwRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_getTable { sacSwRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_getTable. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacSwRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacSwRec_delete(sacSwRec *self) {
	 /* we need to de-register both the node info and node record */
	 SWIG_AltMnglUnregObj(&(self->switch_info));
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacSwRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSwRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSwRec_delete { sacSwRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSwRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSwRec_delete. Expected _sacSwRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacSwRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacSwRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacSwRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacSwRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacSwRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacSwRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacSwRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacSwRec_lid_set;
                }  else if (strcmp(_str,"-switch_info") == 0) {
                    cmd = _wrap_sacSwRec_switch_info_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -switch_info  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -switch_info  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacSwRec_lid_get;
                }  else if (strcmp(_str,"-switch_info") == 0) {
                    cmd = _wrap_sacSwRec_switch_info_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacSwRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -switch_info  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -switch_info  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacSwRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSwRec_switch_info_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-switch_info ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacSwRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacSwRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacSwRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacSwRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacSwRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacSwRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_link_record_from_lid_set(_swigobj,_swigval) (_swigobj->from_lid = *(_swigval),_swigval)
static int _wrap_sacLinkRec_from_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLinkRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_from_lid_set { sacLinkRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_from_lid_set. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_link_record_from_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_from_lid_get(_swigobj) (&_swigobj->from_lid)
static int _wrap_sacLinkRec_from_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLinkRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_from_lid_get { sacLinkRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_from_lid_get. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_link_record_from_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_from_port_num_set(_swigobj,_swigval) (_swigobj->from_port_num = *(_swigval),_swigval)
static int _wrap_sacLinkRec_from_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacLinkRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_from_port_num_set { sacLinkRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_from_port_num_set. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_link_record_from_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_from_port_num_get(_swigobj) (&_swigobj->from_port_num)
static int _wrap_sacLinkRec_from_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacLinkRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_from_port_num_get { sacLinkRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_from_port_num_get. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_link_record_from_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_to_port_num_set(_swigobj,_swigval) (_swigobj->to_port_num = *(_swigval),_swigval)
static int _wrap_sacLinkRec_to_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacLinkRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_to_port_num_set { sacLinkRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_to_port_num_set. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_link_record_to_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_to_port_num_get(_swigobj) (&_swigobj->to_port_num)
static int _wrap_sacLinkRec_to_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacLinkRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_to_port_num_get { sacLinkRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_to_port_num_get. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_link_record_to_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_to_lid_set(_swigobj,_swigval) (_swigobj->to_lid = *(_swigval),_swigval)
static int _wrap_sacLinkRec_to_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLinkRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_to_lid_set { sacLinkRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_to_lid_set. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_link_record_to_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_link_record_to_lid_get(_swigobj) (&_swigobj->to_lid)
static int _wrap_sacLinkRec_to_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLinkRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_to_lid_get { sacLinkRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_to_lid_get. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_link_record_to_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static char * sacLinkRec_get(sacLinkRec *self,uint64_t  comp_mask) {
	 return(ibsacLinkRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GET));
  }
static int _wrap_sacLinkRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacLinkRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_get { sacLinkRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_get. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacLinkRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacLinkRec_getTable(sacLinkRec *self,uint64_t  comp_mask) {
	 return(ibsacLinkRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacLinkRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacLinkRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_getTable { sacLinkRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_getTable. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacLinkRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacLinkRec_delete(sacLinkRec *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacLinkRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacLinkRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLinkRec_delete { sacLinkRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLinkRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLinkRec_delete. Expected _sacLinkRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacLinkRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacLinkRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacLinkRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacLinkRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacLinkRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacLinkRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacLinkRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-from_lid") == 0) {
                    cmd = _wrap_sacLinkRec_from_lid_set;
                }  else if (strcmp(_str,"-from_port_num") == 0) {
                    cmd = _wrap_sacLinkRec_from_port_num_set;
                }  else if (strcmp(_str,"-to_port_num") == 0) {
                    cmd = _wrap_sacLinkRec_to_port_num_set;
                }  else if (strcmp(_str,"-to_lid") == 0) {
                    cmd = _wrap_sacLinkRec_to_lid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -from_lid -from_port_num -to_port_num -to_lid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -from_lid -from_port_num -to_port_num -to_lid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-from_lid") == 0) {
                    cmd = _wrap_sacLinkRec_from_lid_get;
                }  else if (strcmp(_str,"-from_port_num") == 0) {
                    cmd = _wrap_sacLinkRec_from_port_num_get;
                }  else if (strcmp(_str,"-to_port_num") == 0) {
                    cmd = _wrap_sacLinkRec_to_port_num_get;
                }  else if (strcmp(_str,"-to_lid") == 0) {
                    cmd = _wrap_sacLinkRec_to_lid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacLinkRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -from_lid -from_port_num -to_port_num -to_lid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -from_lid -from_port_num -to_port_num -to_lid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacLinkRec_from_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-from_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacLinkRec_from_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-from_port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacLinkRec_to_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-to_port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacLinkRec_to_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-to_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacLinkRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacLinkRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacLinkRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacLinkRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacLinkRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacLinkRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_path_rec_service_id_set(_swigobj,_swigval) (_swigobj->service_id = *(_swigval),_swigval)
static int _wrap_sacPathRec_service_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacPathRec * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_service_id_set { sacPathRec * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_service_id_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_path_rec_service_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_service_id_get(_swigobj) (&_swigobj->service_id)
static int _wrap_sacPathRec_service_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_service_id_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_service_id_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_path_rec_service_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_dgid_set(_swigobj,_swigval) (_swigobj->dgid = *(_swigval),_swigval)
static int _wrap_sacPathRec_dgid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacPathRec * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_dgid_set { sacPathRec * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_dgid_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_path_rec_dgid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_dgid_get(_swigobj) (&_swigobj->dgid)
static int _wrap_sacPathRec_dgid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_dgid_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_dgid_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_path_rec_dgid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_sgid_set(_swigobj,_swigval) (_swigobj->sgid = *(_swigval),_swigval)
static int _wrap_sacPathRec_sgid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacPathRec * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_sgid_set { sacPathRec * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_sgid_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_path_rec_sgid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_sgid_get(_swigobj) (&_swigobj->sgid)
static int _wrap_sacPathRec_sgid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_sgid_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_sgid_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_path_rec_sgid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_dlid_set(_swigobj,_swigval) (_swigobj->dlid = *(_swigval),_swigval)
static int _wrap_sacPathRec_dlid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_dlid_set { sacPathRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_dlid_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_dlid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_dlid_get(_swigobj) (&_swigobj->dlid)
static int _wrap_sacPathRec_dlid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_dlid_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_dlid_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_dlid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_slid_set(_swigobj,_swigval) (_swigobj->slid = *(_swigval),_swigval)
static int _wrap_sacPathRec_slid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_slid_set { sacPathRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_slid_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_slid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_slid_get(_swigobj) (&_swigobj->slid)
static int _wrap_sacPathRec_slid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_slid_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_slid_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_slid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_hop_flow_raw_set(_swigobj,_swigval) (_swigobj->hop_flow_raw = *(_swigval),_swigval)
static int _wrap_sacPathRec_hop_flow_raw_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacPathRec * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_hop_flow_raw_set { sacPathRec * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_hop_flow_raw_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_path_rec_hop_flow_raw_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_hop_flow_raw_get(_swigobj) (&_swigobj->hop_flow_raw)
static int _wrap_sacPathRec_hop_flow_raw_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_hop_flow_raw_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_hop_flow_raw_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_path_rec_hop_flow_raw_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_tclass_set(_swigobj,_swigval) (_swigobj->tclass = *(_swigval),_swigval)
static int _wrap_sacPathRec_tclass_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_tclass_set { sacPathRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_tclass_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_tclass_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_tclass_get(_swigobj) (&_swigobj->tclass)
static int _wrap_sacPathRec_tclass_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_tclass_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_tclass_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_tclass_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_num_path_set(_swigobj,_swigval) (_swigobj->num_path = *(_swigval),_swigval)
static int _wrap_sacPathRec_num_path_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_num_path_set { sacPathRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_num_path_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_num_path_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_num_path_get(_swigobj) (&_swigobj->num_path)
static int _wrap_sacPathRec_num_path_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_num_path_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_num_path_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_num_path_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_pkey_set(_swigobj,_swigval) (_swigobj->pkey = *(_swigval),_swigval)
static int _wrap_sacPathRec_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_pkey_set { sacPathRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_pkey_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_pkey_get(_swigobj) (&_swigobj->pkey)
static int _wrap_sacPathRec_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_pkey_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_pkey_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_qos_class_sl_set(_swigobj,_swigval) (_swigobj->qos_class_sl = *(_swigval),_swigval)
static int _wrap_sacPathRec_qos_class_sl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_qos_class_sl_set { sacPathRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_qos_class_sl_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_qos_class_sl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_qos_class_sl_get(_swigobj) (&_swigobj->qos_class_sl)
static int _wrap_sacPathRec_qos_class_sl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_qos_class_sl_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_qos_class_sl_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_path_rec_qos_class_sl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_mtu_set(_swigobj,_swigval) (_swigobj->mtu = *(_swigval),_swigval)
static int _wrap_sacPathRec_mtu_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_mtu_set { sacPathRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_mtu_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_mtu_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_mtu_get(_swigobj) (&_swigobj->mtu)
static int _wrap_sacPathRec_mtu_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_mtu_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_mtu_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_mtu_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_rate_set(_swigobj,_swigval) (_swigobj->rate = *(_swigval),_swigval)
static int _wrap_sacPathRec_rate_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_rate_set { sacPathRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_rate_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_rate_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_rate_get(_swigobj) (&_swigobj->rate)
static int _wrap_sacPathRec_rate_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_rate_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_rate_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_rate_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_pkt_life_set(_swigobj,_swigval) (_swigobj->pkt_life = *(_swigval),_swigval)
static int _wrap_sacPathRec_pkt_life_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_pkt_life_set { sacPathRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_pkt_life_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_pkt_life_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_pkt_life_get(_swigobj) (&_swigobj->pkt_life)
static int _wrap_sacPathRec_pkt_life_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_pkt_life_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_pkt_life_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_pkt_life_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_preference_set(_swigobj,_swigval) (_swigobj->preference = *(_swigval),_swigval)
static int _wrap_sacPathRec_preference_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_preference_set { sacPathRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_preference_set. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_preference_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_path_rec_preference_get(_swigobj) (&_swigobj->preference)
static int _wrap_sacPathRec_preference_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_preference_get { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_preference_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_path_rec_preference_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static char * sacPathRec_get(sacPathRec *self,uint64_t  comp_mask) {
	 return(ibsacPathRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GET));
  }
static int _wrap_sacPathRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacPathRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_get { sacPathRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_get. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacPathRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacPathRec_getTable(sacPathRec *self,uint64_t  comp_mask) {
	 return(ibsacPathRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacPathRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacPathRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_getTable { sacPathRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_getTable. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacPathRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacPathRec_delete(sacPathRec *self) {
    free(self);
	 SWIG_AltMnglUnregObj(self);
  }
static int _wrap_sacPathRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPathRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPathRec_delete { sacPathRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPathRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPathRec_delete. Expected _sacPathRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacPathRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacPathRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacPathRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacPathRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacPathRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacPathRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacPathRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-service_id") == 0) {
                    cmd = _wrap_sacPathRec_service_id_set;
                }  else if (strcmp(_str,"-dgid") == 0) {
                    cmd = _wrap_sacPathRec_dgid_set;
                }  else if (strcmp(_str,"-sgid") == 0) {
                    cmd = _wrap_sacPathRec_sgid_set;
                }  else if (strcmp(_str,"-dlid") == 0) {
                    cmd = _wrap_sacPathRec_dlid_set;
                }  else if (strcmp(_str,"-slid") == 0) {
                    cmd = _wrap_sacPathRec_slid_set;
                }  else if (strcmp(_str,"-hop_flow_raw") == 0) {
                    cmd = _wrap_sacPathRec_hop_flow_raw_set;
                }  else if (strcmp(_str,"-tclass") == 0) {
                    cmd = _wrap_sacPathRec_tclass_set;
                }  else if (strcmp(_str,"-num_path") == 0) {
                    cmd = _wrap_sacPathRec_num_path_set;
                }  else if (strcmp(_str,"-pkey") == 0) {
                    cmd = _wrap_sacPathRec_pkey_set;
                }  else if (strcmp(_str,"-qos_class_sl") == 0) {
                    cmd = _wrap_sacPathRec_qos_class_sl_set;
                }  else if (strcmp(_str,"-mtu") == 0) {
                    cmd = _wrap_sacPathRec_mtu_set;
                }  else if (strcmp(_str,"-rate") == 0) {
                    cmd = _wrap_sacPathRec_rate_set;
                }  else if (strcmp(_str,"-pkt_life") == 0) {
                    cmd = _wrap_sacPathRec_pkt_life_set;
                }  else if (strcmp(_str,"-preference") == 0) {
                    cmd = _wrap_sacPathRec_preference_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -service_id -dgid -sgid -dlid -slid -hop_flow_raw -tclass -num_path -pkey -qos_class_sl -mtu -rate -pkt_life -preference  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -service_id -dgid -sgid -dlid -slid -hop_flow_raw -tclass -num_path -pkey -qos_class_sl -mtu -rate -pkt_life -preference  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-service_id") == 0) {
                    cmd = _wrap_sacPathRec_service_id_get;
                }  else if (strcmp(_str,"-dgid") == 0) {
                    cmd = _wrap_sacPathRec_dgid_get;
                }  else if (strcmp(_str,"-sgid") == 0) {
                    cmd = _wrap_sacPathRec_sgid_get;
                }  else if (strcmp(_str,"-dlid") == 0) {
                    cmd = _wrap_sacPathRec_dlid_get;
                }  else if (strcmp(_str,"-slid") == 0) {
                    cmd = _wrap_sacPathRec_slid_get;
                }  else if (strcmp(_str,"-hop_flow_raw") == 0) {
                    cmd = _wrap_sacPathRec_hop_flow_raw_get;
                }  else if (strcmp(_str,"-tclass") == 0) {
                    cmd = _wrap_sacPathRec_tclass_get;
                }  else if (strcmp(_str,"-num_path") == 0) {
                    cmd = _wrap_sacPathRec_num_path_get;
                }  else if (strcmp(_str,"-pkey") == 0) {
                    cmd = _wrap_sacPathRec_pkey_get;
                }  else if (strcmp(_str,"-qos_class_sl") == 0) {
                    cmd = _wrap_sacPathRec_qos_class_sl_get;
                }  else if (strcmp(_str,"-mtu") == 0) {
                    cmd = _wrap_sacPathRec_mtu_get;
                }  else if (strcmp(_str,"-rate") == 0) {
                    cmd = _wrap_sacPathRec_rate_get;
                }  else if (strcmp(_str,"-pkt_life") == 0) {
                    cmd = _wrap_sacPathRec_pkt_life_get;
                }  else if (strcmp(_str,"-preference") == 0) {
                    cmd = _wrap_sacPathRec_preference_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacPathRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -service_id -dgid -sgid -dlid -slid -hop_flow_raw -tclass -num_path -pkey -qos_class_sl -mtu -rate -pkt_life -preference  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -service_id -dgid -sgid -dlid -slid -hop_flow_raw -tclass -num_path -pkey -qos_class_sl -mtu -rate -pkt_life -preference  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacPathRec_service_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_dgid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dgid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_sgid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sgid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_dlid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dlid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_slid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-slid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_hop_flow_raw_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-hop_flow_raw ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_tclass_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-tclass ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_num_path_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-num_path ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_qos_class_sl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qos_class_sl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_mtu_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mtu ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_rate_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-rate ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_pkt_life_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkt_life ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPathRec_preference_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-preference ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacPathRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacPathRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacPathRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacPathRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacPathRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacPathRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_lft_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacLFTRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLFTRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_lid_set { sacLFTRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_lid_set. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_lft_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_lft_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacLFTRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLFTRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_lid_get { sacLFTRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_lid_get. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_lft_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_lft_record_block_num_set(_swigobj,_swigval) (_swigobj->block_num = *(_swigval),_swigval)
static int _wrap_sacLFTRec_block_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLFTRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_block_num_set { sacLFTRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_block_num_set. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_lft_record_block_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_lft_record_block_num_get(_swigobj) (&_swigobj->block_num)
static int _wrap_sacLFTRec_block_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacLFTRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_block_num_get { sacLFTRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_block_num_get. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_lft_record_block_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static ib_lft_t * _ib_lft_record_lft_set(sacLFTRec *obj, ib_lft_t val[64]) {
{
  int i;
  int m = 64;
  if (m > 64) m = 64;
  for (i=0; i <64 ; i++) {
    obj->lft[i] = *(val+i);
  }
}
    return (ib_lft_t *) val;
}
static int _wrap_sacLFTRec_lft_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_lft_t * _result;
    sacLFTRec * _arg0;
    ib_lft_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_lft_set { sacLFTRec * } { ib_lft_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_lft_set. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_ib_lft_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacLFTRec_lft_set. Expected _ib_lft_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_lft_t *)_ib_lft_record_lft_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buf[12];
  int i;
  for (i = 0; i < 64; i++) {
	 sprintf(buf, "{%u %u} ", i, _result[i]);
	 Tcl_AppendToObj(tcl_result, buf, -1);
  }
}
    return TCL_OK;
}
#define _ib_lft_record_lft_get(_swigobj) ((ib_lft_t *) _swigobj->lft)
static int _wrap_sacLFTRec_lft_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_lft_t * _result;
    sacLFTRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_lft_get { sacLFTRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_lft_get. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_lft_t *)_ib_lft_record_lft_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buf[12];
  int i;
  for (i = 0; i < 64; i++) {
	 sprintf(buf, "{%u %u} ", i, _result[i]);
	 Tcl_AppendToObj(tcl_result, buf, -1);
  }
}
    return TCL_OK;
}
static char * sacLFTRec_get(sacLFTRec *self,uint64_t  comp_mask) {
	 return(ibsacLFTRecordQuery(self, cl_hton64(comp_mask),
                               IB_MAD_METHOD_GET));
  }
static int _wrap_sacLFTRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacLFTRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_get { sacLFTRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_get. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacLFTRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacLFTRec_getTable(sacLFTRec *self,uint64_t  comp_mask) {
	 return(ibsacLFTRecordQuery(self, cl_hton64(comp_mask),
                               IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacLFTRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacLFTRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_getTable { sacLFTRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_getTable. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacLFTRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacLFTRec_delete(sacLFTRec *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacLFTRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacLFTRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacLFTRec_delete { sacLFTRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacLFTRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacLFTRec_delete. Expected _sacLFTRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacLFTRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacLFTRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacLFTRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacLFTRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacLFTRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacLFTRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacLFTRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacLFTRec_lid_set;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacLFTRec_block_num_set;
                }  else if (strcmp(_str,"-lft") == 0) {
                    cmd = _wrap_sacLFTRec_lft_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -block_num -lft  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -block_num -lft  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacLFTRec_lid_get;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacLFTRec_block_num_get;
                }  else if (strcmp(_str,"-lft") == 0) {
                    cmd = _wrap_sacLFTRec_lft_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacLFTRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -block_num -lft  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -block_num -lft  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacLFTRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacLFTRec_block_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-block_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacLFTRec_lft_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lft ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacLFTRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacLFTRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacLFTRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacLFTRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacLFTRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacLFTRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_member_rec_mgid_set(_swigobj,_swigval) (_swigobj->mgid = *(_swigval),_swigval)
static int _wrap_sacMCMRec_mgid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacMCMRec * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_mgid_set { sacMCMRec * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_mgid_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_member_rec_mgid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_mgid_get(_swigobj) (&_swigobj->mgid)
static int _wrap_sacMCMRec_mgid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_mgid_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_mgid_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_member_rec_mgid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_port_gid_set(_swigobj,_swigval) (_swigobj->port_gid = *(_swigval),_swigval)
static int _wrap_sacMCMRec_port_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacMCMRec * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_port_gid_set { sacMCMRec * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_port_gid_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_member_rec_port_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_port_gid_get(_swigobj) (&_swigobj->port_gid)
static int _wrap_sacMCMRec_port_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_port_gid_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_port_gid_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_member_rec_port_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_qkey_set(_swigobj,_swigval) (_swigobj->qkey = *(_swigval),_swigval)
static int _wrap_sacMCMRec_qkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacMCMRec * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_qkey_set { sacMCMRec * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_qkey_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_member_rec_qkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_qkey_get(_swigobj) (&_swigobj->qkey)
static int _wrap_sacMCMRec_qkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_qkey_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_qkey_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_member_rec_qkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_mlid_set(_swigobj,_swigval) (_swigobj->mlid = *(_swigval),_swigval)
static int _wrap_sacMCMRec_mlid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacMCMRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_mlid_set { sacMCMRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_mlid_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_member_rec_mlid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_mlid_get(_swigobj) (&_swigobj->mlid)
static int _wrap_sacMCMRec_mlid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_mlid_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_mlid_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_member_rec_mlid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_mtu_set(_swigobj,_swigval) (_swigobj->mtu = *(_swigval),_swigval)
static int _wrap_sacMCMRec_mtu_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_mtu_set { sacMCMRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_mtu_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_mtu_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_mtu_get(_swigobj) (&_swigobj->mtu)
static int _wrap_sacMCMRec_mtu_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_mtu_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_mtu_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_mtu_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_tclass_set(_swigobj,_swigval) (_swigobj->tclass = *(_swigval),_swigval)
static int _wrap_sacMCMRec_tclass_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_tclass_set { sacMCMRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_tclass_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_tclass_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_tclass_get(_swigobj) (&_swigobj->tclass)
static int _wrap_sacMCMRec_tclass_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_tclass_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_tclass_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_tclass_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_pkey_set(_swigobj,_swigval) (_swigobj->pkey = *(_swigval),_swigval)
static int _wrap_sacMCMRec_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacMCMRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_pkey_set { sacMCMRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_pkey_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_member_rec_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_pkey_get(_swigobj) (&_swigobj->pkey)
static int _wrap_sacMCMRec_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_pkey_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_pkey_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_member_rec_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_rate_set(_swigobj,_swigval) (_swigobj->rate = *(_swigval),_swigval)
static int _wrap_sacMCMRec_rate_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_rate_set { sacMCMRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_rate_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_rate_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_rate_get(_swigobj) (&_swigobj->rate)
static int _wrap_sacMCMRec_rate_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_rate_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_rate_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_rate_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_pkt_life_set(_swigobj,_swigval) (_swigobj->pkt_life = *(_swigval),_swigval)
static int _wrap_sacMCMRec_pkt_life_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_pkt_life_set { sacMCMRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_pkt_life_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_pkt_life_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_pkt_life_get(_swigobj) (&_swigobj->pkt_life)
static int _wrap_sacMCMRec_pkt_life_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_pkt_life_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_pkt_life_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_pkt_life_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_sl_flow_hop_set(_swigobj,_swigval) (_swigobj->sl_flow_hop = *(_swigval),_swigval)
static int _wrap_sacMCMRec_sl_flow_hop_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacMCMRec * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_sl_flow_hop_set { sacMCMRec * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_sl_flow_hop_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_member_rec_sl_flow_hop_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_sl_flow_hop_get(_swigobj) (&_swigobj->sl_flow_hop)
static int _wrap_sacMCMRec_sl_flow_hop_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_sl_flow_hop_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_sl_flow_hop_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_member_rec_sl_flow_hop_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_scope_state_set(_swigobj,_swigval) (_swigobj->scope_state = *(_swigval),_swigval)
static int _wrap_sacMCMRec_scope_state_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_scope_state_set { sacMCMRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_scope_state_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_scope_state_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_member_rec_scope_state_get(_swigobj) (&_swigobj->scope_state)
static int _wrap_sacMCMRec_scope_state_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_scope_state_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_scope_state_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_member_rec_scope_state_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static char * sacMCMRec_get(sacMCMRec *self,uint64_t  comp_mask) {
	 return(ibsacMCMemberRecordQuery(self, cl_hton64(comp_mask),
                                    IB_MAD_METHOD_GET));
  }
static int _wrap_sacMCMRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacMCMRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_get { sacMCMRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacMCMRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacMCMRec_getTable(sacMCMRec *self,uint64_t  comp_mask) {
	 return(ibsacMCMemberRecordQuery(self, cl_hton64(comp_mask),
                                    IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacMCMRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacMCMRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_getTable { sacMCMRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_getTable. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacMCMRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacMCMRec_set(sacMCMRec *self,uint64_t  comp_mask) {
   return(ibsacMCMemberRecordQuery(self, cl_hton64(comp_mask),
                                   IB_MAD_METHOD_SET));
 }
static int _wrap_sacMCMRec_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacMCMRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_set { sacMCMRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacMCMRec_set(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacMCMRec_del(sacMCMRec *self,uint64_t  comp_mask) {
   return(ibsacMCMemberRecordQuery(self, cl_hton64(comp_mask),
                                   IB_MAD_METHOD_DELETE));
 }
static int _wrap_sacMCMRec_del(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacMCMRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_del { sacMCMRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_del. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacMCMRec_del(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static int  sacMCMRec_proxy_join_get(sacMCMRec *self) {
   return(self->proxy_join);
 }
static int _wrap_sacMCMRec_proxy_join_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_proxy_join_get { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_proxy_join_get. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )sacMCMRec_proxy_join_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static void  sacMCMRec_proxy_join_set(sacMCMRec *self,uint8_t  proxy_join) {
    self->proxy_join = proxy_join;
  }
static int _wrap_sacMCMRec_proxy_join_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacMCMRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_proxy_join_set { sacMCMRec * } proxy_join ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_proxy_join_set. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacMCMRec_proxy_join_set(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
static void  sacMCMRec_obj_delete(sacMCMRec *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacMCMRec_obj_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacMCMRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacMCMRec_obj_delete { sacMCMRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacMCMRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacMCMRec_obj_delete. Expected _sacMCMRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacMCMRec_obj_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacMCMRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacMCMRec methods : { dump cget configure get getTable set del proxy_join_get proxy_join_set obj_delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacMCMRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacMCMRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacMCMRec_getTable;
    }    else if (strcmp(_str,"set") == 0) {
        cmd = _wrap_sacMCMRec_set;
    }    else if (strcmp(_str,"del") == 0) {
        cmd = _wrap_sacMCMRec_del;
    }    else if (strcmp(_str,"proxy_join_get") == 0) {
        cmd = _wrap_sacMCMRec_proxy_join_get;
    }    else if (strcmp(_str,"proxy_join_set") == 0) {
        cmd = _wrap_sacMCMRec_proxy_join_set;
    }    else if (strcmp(_str,"obj_delete") == 0) {
        cmd = _wrap_sacMCMRec_obj_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-mgid") == 0) {
                    cmd = _wrap_sacMCMRec_mgid_set;
                }  else if (strcmp(_str,"-port_gid") == 0) {
                    cmd = _wrap_sacMCMRec_port_gid_set;
                }  else if (strcmp(_str,"-qkey") == 0) {
                    cmd = _wrap_sacMCMRec_qkey_set;
                }  else if (strcmp(_str,"-mlid") == 0) {
                    cmd = _wrap_sacMCMRec_mlid_set;
                }  else if (strcmp(_str,"-mtu") == 0) {
                    cmd = _wrap_sacMCMRec_mtu_set;
                }  else if (strcmp(_str,"-tclass") == 0) {
                    cmd = _wrap_sacMCMRec_tclass_set;
                }  else if (strcmp(_str,"-pkey") == 0) {
                    cmd = _wrap_sacMCMRec_pkey_set;
                }  else if (strcmp(_str,"-rate") == 0) {
                    cmd = _wrap_sacMCMRec_rate_set;
                }  else if (strcmp(_str,"-pkt_life") == 0) {
                    cmd = _wrap_sacMCMRec_pkt_life_set;
                }  else if (strcmp(_str,"-sl_flow_hop") == 0) {
                    cmd = _wrap_sacMCMRec_sl_flow_hop_set;
                }  else if (strcmp(_str,"-scope_state") == 0) {
                    cmd = _wrap_sacMCMRec_scope_state_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -mgid -port_gid -qkey -mlid -mtu -tclass -pkey -rate -pkt_life -sl_flow_hop -scope_state  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -mgid -port_gid -qkey -mlid -mtu -tclass -pkey -rate -pkt_life -sl_flow_hop -scope_state  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-mgid") == 0) {
                    cmd = _wrap_sacMCMRec_mgid_get;
                }  else if (strcmp(_str,"-port_gid") == 0) {
                    cmd = _wrap_sacMCMRec_port_gid_get;
                }  else if (strcmp(_str,"-qkey") == 0) {
                    cmd = _wrap_sacMCMRec_qkey_get;
                }  else if (strcmp(_str,"-mlid") == 0) {
                    cmd = _wrap_sacMCMRec_mlid_get;
                }  else if (strcmp(_str,"-mtu") == 0) {
                    cmd = _wrap_sacMCMRec_mtu_get;
                }  else if (strcmp(_str,"-tclass") == 0) {
                    cmd = _wrap_sacMCMRec_tclass_get;
                }  else if (strcmp(_str,"-pkey") == 0) {
                    cmd = _wrap_sacMCMRec_pkey_get;
                }  else if (strcmp(_str,"-rate") == 0) {
                    cmd = _wrap_sacMCMRec_rate_get;
                }  else if (strcmp(_str,"-pkt_life") == 0) {
                    cmd = _wrap_sacMCMRec_pkt_life_get;
                }  else if (strcmp(_str,"-sl_flow_hop") == 0) {
                    cmd = _wrap_sacMCMRec_sl_flow_hop_get;
                }  else if (strcmp(_str,"-scope_state") == 0) {
                    cmd = _wrap_sacMCMRec_scope_state_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacMCMRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -mgid -port_gid -qkey -mlid -mtu -tclass -pkey -rate -pkt_life -sl_flow_hop -scope_state  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -mgid -port_gid -qkey -mlid -mtu -tclass -pkey -rate -pkt_life -sl_flow_hop -scope_state  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacMCMRec_mgid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mgid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_port_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_qkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_mlid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mlid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_mtu_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mtu ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_tclass_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-tclass ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_rate_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-rate ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_pkt_life_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkt_life ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_sl_flow_hop_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sl_flow_hop ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacMCMRec_scope_state_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-scope_state ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable set del proxy_join_get proxy_join_set obj_delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacMCMRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacMCMRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacMCMRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacMCMRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacMCMRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacMCMRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsac_class_port_info_base_ver_set(_swigobj,_swigval) (_swigobj->base_ver = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_base_ver_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacClassPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_base_ver_set { sacClassPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_base_ver_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_class_port_info_base_ver_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_base_ver_get(_swigobj) (&_swigobj->base_ver)
static int _wrap_sacClassPortInfo_base_ver_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_base_ver_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_base_ver_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_class_port_info_base_ver_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_class_ver_set(_swigobj,_swigval) (_swigobj->class_ver = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_class_ver_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacClassPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_class_ver_set { sacClassPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_class_ver_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_class_port_info_class_ver_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_class_ver_get(_swigobj) (&_swigobj->class_ver)
static int _wrap_sacClassPortInfo_class_ver_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_class_ver_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_class_ver_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_class_port_info_class_ver_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_cap_mask_set(_swigobj,_swigval) (_swigobj->cap_mask = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_cap_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_cap_mask_set { sacClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_cap_mask_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_cap_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_cap_mask_get(_swigobj) (&_swigobj->cap_mask)
static int _wrap_sacClassPortInfo_cap_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_cap_mask_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_cap_mask_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_cap_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_cap_mask2_resp_time_set(_swigobj,_swigval) (_swigobj->cap_mask2_resp_time = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_cap_mask2_resp_time_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_cap_mask2_resp_time_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_cap_mask2_resp_time_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_cap_mask2_resp_time_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_cap_mask2_resp_time_get(_swigobj) (&_swigobj->cap_mask2_resp_time)
static int _wrap_sacClassPortInfo_cap_mask2_resp_time_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_cap_mask2_resp_time_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_cap_mask2_resp_time_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_cap_mask2_resp_time_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_gid_set(_swigobj,_swigval) (_swigobj->redir_gid = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_redir_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacClassPortInfo * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_gid_set { sacClassPortInfo * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_gid_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsac_class_port_info_redir_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_gid_get(_swigobj) (&_swigobj->redir_gid)
static int _wrap_sacClassPortInfo_redir_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_gid_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_gid_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsac_class_port_info_redir_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_tc_sl_fl_set(_swigobj,_swigval) (_swigobj->redir_tc_sl_fl = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_redir_tc_sl_fl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_tc_sl_fl_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_tc_sl_fl_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_redir_tc_sl_fl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_tc_sl_fl_get(_swigobj) (&_swigobj->redir_tc_sl_fl)
static int _wrap_sacClassPortInfo_redir_tc_sl_fl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_tc_sl_fl_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_tc_sl_fl_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_redir_tc_sl_fl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_lid_set(_swigobj,_swigval) (_swigobj->redir_lid = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_redir_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_lid_set { sacClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_lid_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_redir_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_lid_get(_swigobj) (&_swigobj->redir_lid)
static int _wrap_sacClassPortInfo_redir_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_lid_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_lid_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_redir_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_pkey_set(_swigobj,_swigval) (_swigobj->redir_pkey = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_redir_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_pkey_set { sacClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_pkey_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_redir_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_pkey_get(_swigobj) (&_swigobj->redir_pkey)
static int _wrap_sacClassPortInfo_redir_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_pkey_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_pkey_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_redir_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_qp_set(_swigobj,_swigval) (_swigobj->redir_qp = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_redir_qp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_qp_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_qp_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_redir_qp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_qp_get(_swigobj) (&_swigobj->redir_qp)
static int _wrap_sacClassPortInfo_redir_qp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_qp_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_qp_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_redir_qp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_qkey_set(_swigobj,_swigval) (_swigobj->redir_qkey = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_redir_qkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_qkey_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_qkey_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_redir_qkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_redir_qkey_get(_swigobj) (&_swigobj->redir_qkey)
static int _wrap_sacClassPortInfo_redir_qkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_redir_qkey_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_redir_qkey_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_redir_qkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_gid_set(_swigobj,_swigval) (_swigobj->trap_gid = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_trap_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacClassPortInfo * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_gid_set { sacClassPortInfo * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_gid_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsac_class_port_info_trap_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_gid_get(_swigobj) (&_swigobj->trap_gid)
static int _wrap_sacClassPortInfo_trap_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_gid_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_gid_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsac_class_port_info_trap_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_tc_sl_fl_set(_swigobj,_swigval) (_swigobj->trap_tc_sl_fl = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_trap_tc_sl_fl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_tc_sl_fl_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_tc_sl_fl_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_trap_tc_sl_fl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_tc_sl_fl_get(_swigobj) (&_swigobj->trap_tc_sl_fl)
static int _wrap_sacClassPortInfo_trap_tc_sl_fl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_tc_sl_fl_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_tc_sl_fl_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_trap_tc_sl_fl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_lid_set(_swigobj,_swigval) (_swigobj->trap_lid = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_trap_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_lid_set { sacClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_lid_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_trap_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_lid_get(_swigobj) (&_swigobj->trap_lid)
static int _wrap_sacClassPortInfo_trap_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_lid_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_lid_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_trap_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_pkey_set(_swigobj,_swigval) (_swigobj->trap_pkey = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_trap_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_pkey_set { sacClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_pkey_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_trap_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_pkey_get(_swigobj) (&_swigobj->trap_pkey)
static int _wrap_sacClassPortInfo_trap_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_pkey_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_pkey_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_class_port_info_trap_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_hop_qp_set(_swigobj,_swigval) (_swigobj->trap_hop_qp = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_trap_hop_qp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_hop_qp_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_hop_qp_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_trap_hop_qp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_hop_qp_get(_swigobj) (&_swigobj->trap_hop_qp)
static int _wrap_sacClassPortInfo_trap_hop_qp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_hop_qp_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_hop_qp_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_trap_hop_qp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_qkey_set(_swigobj,_swigval) (_swigobj->trap_qkey = *(_swigval),_swigval)
static int _wrap_sacClassPortInfo_trap_qkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_qkey_set { sacClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_qkey_set. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_trap_qkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_class_port_info_trap_qkey_get(_swigobj) (&_swigobj->trap_qkey)
static int _wrap_sacClassPortInfo_trap_qkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_trap_qkey_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_trap_qkey_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsac_class_port_info_trap_qkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static char * sacClassPortInfo_get(sacClassPortInfo *self) {
    return(ibsacClassPortInfoQuery(self, 0, IB_MAD_METHOD_GET));
  }
static int _wrap_sacClassPortInfo_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_get { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_get. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacClassPortInfo_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacClassPortInfo_delete(sacClassPortInfo *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacClassPortInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacClassPortInfo_delete { sacClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacClassPortInfo_delete. Expected _sacClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacClassPortInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacClassPortInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacClassPortInfo methods : { dump cget configure get delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacClassPortInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacClassPortInfo_get;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacClassPortInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-base_ver") == 0) {
                    cmd = _wrap_sacClassPortInfo_base_ver_set;
                }  else if (strcmp(_str,"-class_ver") == 0) {
                    cmd = _wrap_sacClassPortInfo_class_ver_set;
                }  else if (strcmp(_str,"-cap_mask") == 0) {
                    cmd = _wrap_sacClassPortInfo_cap_mask_set;
                }  else if (strcmp(_str,"-cap_mask2_resp_time") == 0) {
                    cmd = _wrap_sacClassPortInfo_cap_mask2_resp_time_set;
                }  else if (strcmp(_str,"-redir_gid") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_gid_set;
                }  else if (strcmp(_str,"-redir_tc_sl_fl") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_tc_sl_fl_set;
                }  else if (strcmp(_str,"-redir_lid") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_lid_set;
                }  else if (strcmp(_str,"-redir_pkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_pkey_set;
                }  else if (strcmp(_str,"-redir_qp") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_qp_set;
                }  else if (strcmp(_str,"-redir_qkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_qkey_set;
                }  else if (strcmp(_str,"-trap_gid") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_gid_set;
                }  else if (strcmp(_str,"-trap_tc_sl_fl") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_tc_sl_fl_set;
                }  else if (strcmp(_str,"-trap_lid") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_lid_set;
                }  else if (strcmp(_str,"-trap_pkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_pkey_set;
                }  else if (strcmp(_str,"-trap_hop_qp") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_hop_qp_set;
                }  else if (strcmp(_str,"-trap_qkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_qkey_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-base_ver") == 0) {
                    cmd = _wrap_sacClassPortInfo_base_ver_get;
                }  else if (strcmp(_str,"-class_ver") == 0) {
                    cmd = _wrap_sacClassPortInfo_class_ver_get;
                }  else if (strcmp(_str,"-cap_mask") == 0) {
                    cmd = _wrap_sacClassPortInfo_cap_mask_get;
                }  else if (strcmp(_str,"-cap_mask2_resp_time") == 0) {
                    cmd = _wrap_sacClassPortInfo_cap_mask2_resp_time_get;
                }  else if (strcmp(_str,"-redir_gid") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_gid_get;
                }  else if (strcmp(_str,"-redir_tc_sl_fl") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_tc_sl_fl_get;
                }  else if (strcmp(_str,"-redir_lid") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_lid_get;
                }  else if (strcmp(_str,"-redir_pkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_pkey_get;
                }  else if (strcmp(_str,"-redir_qp") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_qp_get;
                }  else if (strcmp(_str,"-redir_qkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_redir_qkey_get;
                }  else if (strcmp(_str,"-trap_gid") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_gid_get;
                }  else if (strcmp(_str,"-trap_tc_sl_fl") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_tc_sl_fl_get;
                }  else if (strcmp(_str,"-trap_lid") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_lid_get;
                }  else if (strcmp(_str,"-trap_pkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_pkey_get;
                }  else if (strcmp(_str,"-trap_hop_qp") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_hop_qp_get;
                }  else if (strcmp(_str,"-trap_qkey") == 0) {
                    cmd = _wrap_sacClassPortInfo_trap_qkey_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacClassPortInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacClassPortInfo_base_ver_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-base_ver ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_class_ver_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-class_ver ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_cap_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cap_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_cap_mask2_resp_time_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cap_mask2_resp_time ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_redir_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_redir_tc_sl_fl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_tc_sl_fl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_redir_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_redir_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_redir_qp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_qp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_redir_qkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_qkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_trap_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_trap_tc_sl_fl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_tc_sl_fl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_trap_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_trap_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_trap_hop_qp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_hop_qp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacClassPortInfo_trap_qkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_qkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacClassPortInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacClassPortInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacClassPortInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacClassPortInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacClassPortInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacClassPortInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsac_inform_info_gid_set(_swigobj,_swigval) (_swigobj->gid = *(_swigval),_swigval)
static int _wrap_sacInformInfo_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacInformInfo * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_gid_set { sacInformInfo * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_gid_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsac_inform_info_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_gid_get(_swigobj) (&_swigobj->gid)
static int _wrap_sacInformInfo_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_gid_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_gid_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsac_inform_info_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_lid_range_begin_set(_swigobj,_swigval) (_swigobj->lid_range_begin = *(_swigval),_swigval)
static int _wrap_sacInformInfo_lid_range_begin_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_lid_range_begin_set { sacInformInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_lid_range_begin_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_lid_range_begin_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_lid_range_begin_get(_swigobj) (&_swigobj->lid_range_begin)
static int _wrap_sacInformInfo_lid_range_begin_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_lid_range_begin_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_lid_range_begin_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_lid_range_begin_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_lid_range_end_set(_swigobj,_swigval) (_swigobj->lid_range_end = *(_swigval),_swigval)
static int _wrap_sacInformInfo_lid_range_end_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_lid_range_end_set { sacInformInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_lid_range_end_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_lid_range_end_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_lid_range_end_get(_swigobj) (&_swigobj->lid_range_end)
static int _wrap_sacInformInfo_lid_range_end_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_lid_range_end_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_lid_range_end_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_lid_range_end_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_reserved1_set(_swigobj,_swigval) (_swigobj->reserved1 = *(_swigval),_swigval)
static int _wrap_sacInformInfo_reserved1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_reserved1_set { sacInformInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_reserved1_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_reserved1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_reserved1_get(_swigobj) (&_swigobj->reserved1)
static int _wrap_sacInformInfo_reserved1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_reserved1_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_reserved1_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_reserved1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_is_generic_set(_swigobj,_swigval) (_swigobj->is_generic = *(_swigval),_swigval)
static int _wrap_sacInformInfo_is_generic_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_is_generic_set { sacInformInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_is_generic_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_inform_info_is_generic_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_is_generic_get(_swigobj) (&_swigobj->is_generic)
static int _wrap_sacInformInfo_is_generic_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_is_generic_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_is_generic_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_inform_info_is_generic_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_subscribe_set(_swigobj,_swigval) (_swigobj->subscribe = *(_swigval),_swigval)
static int _wrap_sacInformInfo_subscribe_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_subscribe_set { sacInformInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_subscribe_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_inform_info_subscribe_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_subscribe_get(_swigobj) (&_swigobj->subscribe)
static int _wrap_sacInformInfo_subscribe_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_subscribe_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_subscribe_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsac_inform_info_subscribe_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_trap_type_set(_swigobj,_swigval) (_swigobj->trap_type = *(_swigval),_swigval)
static int _wrap_sacInformInfo_trap_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_trap_type_set { sacInformInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_trap_type_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_trap_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_trap_type_get(_swigobj) (&_swigobj->trap_type)
static int _wrap_sacInformInfo_trap_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_trap_type_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_trap_type_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsac_inform_info_trap_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsac_inform_info_g_or_v_get(_swigobj) (&_swigobj->g_or_v)
static int _wrap_sacInformInfo_g_or_v_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacInformInfo_g_or_v * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_get { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_get. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacInformInfo_g_or_v *)_ibsac_inform_info_g_or_v_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacInformInfo_g_or_v_p");
    return TCL_OK;
}
static char * sacInformInfo_set(sacInformInfo *self) {
    return(ibsacInformInfoQuery(self, 0, IB_MAD_METHOD_SET));
  }
static int _wrap_sacInformInfo_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_set { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_set. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacInformInfo_set(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacInformInfo_delete(sacInformInfo *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacInformInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacInformInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_delete { sacInformInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_delete. Expected _sacInformInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacInformInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacInformInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacInformInfo methods : { dump cget configure set delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacInformInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"set") == 0) {
        cmd = _wrap_sacInformInfo_set;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacInformInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-gid") == 0) {
                    cmd = _wrap_sacInformInfo_gid_set;
                }  else if (strcmp(_str,"-lid_range_begin") == 0) {
                    cmd = _wrap_sacInformInfo_lid_range_begin_set;
                }  else if (strcmp(_str,"-lid_range_end") == 0) {
                    cmd = _wrap_sacInformInfo_lid_range_end_set;
                }  else if (strcmp(_str,"-reserved1") == 0) {
                    cmd = _wrap_sacInformInfo_reserved1_set;
                }  else if (strcmp(_str,"-is_generic") == 0) {
                    cmd = _wrap_sacInformInfo_is_generic_set;
                }  else if (strcmp(_str,"-subscribe") == 0) {
                    cmd = _wrap_sacInformInfo_subscribe_set;
                }  else if (strcmp(_str,"-trap_type") == 0) {
                    cmd = _wrap_sacInformInfo_trap_type_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -gid -lid_range_begin -lid_range_end -reserved1 -is_generic -subscribe -trap_type  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -gid -lid_range_begin -lid_range_end -reserved1 -is_generic -subscribe -trap_type  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-gid") == 0) {
                    cmd = _wrap_sacInformInfo_gid_get;
                }  else if (strcmp(_str,"-lid_range_begin") == 0) {
                    cmd = _wrap_sacInformInfo_lid_range_begin_get;
                }  else if (strcmp(_str,"-lid_range_end") == 0) {
                    cmd = _wrap_sacInformInfo_lid_range_end_get;
                }  else if (strcmp(_str,"-reserved1") == 0) {
                    cmd = _wrap_sacInformInfo_reserved1_get;
                }  else if (strcmp(_str,"-is_generic") == 0) {
                    cmd = _wrap_sacInformInfo_is_generic_get;
                }  else if (strcmp(_str,"-subscribe") == 0) {
                    cmd = _wrap_sacInformInfo_subscribe_get;
                }  else if (strcmp(_str,"-trap_type") == 0) {
                    cmd = _wrap_sacInformInfo_trap_type_get;
                }  else if (strcmp(_str,"-g_or_v") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacInformInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -gid -lid_range_begin -lid_range_end -reserved1 -is_generic -subscribe -trap_type -g_or_v  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -gid -lid_range_begin -lid_range_end -reserved1 -is_generic -subscribe -trap_type -g_or_v  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacInformInfo_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_lid_range_begin_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid_range_begin ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_lid_range_end_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid_range_end ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_reserved1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_is_generic_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-is_generic ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_subscribe_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-subscribe ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_trap_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-g_or_v ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure set delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacInformInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacInformInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacInformInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacInformInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacInformInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacInformInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define sacInformInfo_g_or_v_generic_get(_swigobj) (&_swigobj->generic)
static int _wrap_sacInformInfo_g_or_v_generic_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacInformInfo_g_or_v_generic * _result;
    sacInformInfo_g_or_v * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_get { sacInformInfo_g_or_v * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_get. Expected _sacInformInfo_g_or_v_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacInformInfo_g_or_v_generic *)sacInformInfo_g_or_v_generic_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacInformInfo_g_or_v_generic_p");
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_get(_swigobj) (&_swigobj->vend)
static int _wrap_sacInformInfo_g_or_v_vend_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacInformInfo_g_or_v_vend * _result;
    sacInformInfo_g_or_v * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_get { sacInformInfo_g_or_v * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_get. Expected _sacInformInfo_g_or_v_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacInformInfo_g_or_v_vend *)sacInformInfo_g_or_v_vend_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacInformInfo_g_or_v_vend_p");
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacInformInfo_g_or_vMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacInformInfo_g_or_v methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacInformInfo_g_or_v_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);

          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be {  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-generic") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_get;
                }  else if (strcmp(_str,"-vend") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacInformInfo_g_or_v_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -generic -vend  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -generic -vend  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacInformInfo_g_or_v_generic_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_vend_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vend ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacInformInfo_g_or_vCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacInformInfo_g_or_v * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacInformInfo_g_or_v_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacInformInfo_g_or_v_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacInformInfo_g_or_v object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacInformInfo_g_or_vMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define sacInformInfo_g_or_v_generic_trap_num_set(_swigobj,_swigval) (_swigobj->trap_num = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_generic_trap_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_trap_num_set { sacInformInfo_g_or_v_generic * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_trap_num_set. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_generic_trap_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_trap_num_get(_swigobj) (&_swigobj->trap_num)
static int _wrap_sacInformInfo_g_or_v_generic_trap_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_trap_num_get { sacInformInfo_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_trap_num_get. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_generic_trap_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_qpn_resp_time_val_set(_swigobj,_swigval) (_swigobj->qpn_resp_time_val = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_qpn_resp_time_val_set { sacInformInfo_g_or_v_generic * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_qpn_resp_time_val_set. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)sacInformInfo_g_or_v_generic_qpn_resp_time_val_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_qpn_resp_time_val_get(_swigobj) (&_swigobj->qpn_resp_time_val)
static int _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_qpn_resp_time_val_get { sacInformInfo_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_qpn_resp_time_val_get. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)sacInformInfo_g_or_v_generic_qpn_resp_time_val_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_reserved2_set(_swigobj,_swigval) (_swigobj->reserved2 = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_generic_reserved2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_reserved2_set { sacInformInfo_g_or_v_generic * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_reserved2_set. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_generic_reserved2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_reserved2_get(_swigobj) (&_swigobj->reserved2)
static int _wrap_sacInformInfo_g_or_v_generic_reserved2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_reserved2_get { sacInformInfo_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_reserved2_get. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_generic_reserved2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_node_type_msb_set(_swigobj,_swigval) (_swigobj->node_type_msb = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_generic_node_type_msb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_node_type_msb_set { sacInformInfo_g_or_v_generic * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_node_type_msb_set. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_generic_node_type_msb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_node_type_msb_get(_swigobj) (&_swigobj->node_type_msb)
static int _wrap_sacInformInfo_g_or_v_generic_node_type_msb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_node_type_msb_get { sacInformInfo_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_node_type_msb_get. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_generic_node_type_msb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_node_type_lsb_set(_swigobj,_swigval) (_swigobj->node_type_lsb = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_node_type_lsb_set { sacInformInfo_g_or_v_generic * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_node_type_lsb_set. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_generic_node_type_lsb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_generic_node_type_lsb_get(_swigobj) (&_swigobj->node_type_lsb)
static int _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_generic_node_type_lsb_get { sacInformInfo_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_generic_node_type_lsb_get. Expected _sacInformInfo_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_generic_node_type_lsb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacInformInfo_g_or_v_genericMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacInformInfo_g_or_v_generic methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacInformInfo_g_or_v_generic_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-trap_num") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_trap_num_set;
                }  else if (strcmp(_str,"-qpn_resp_time_val") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_set;
                }  else if (strcmp(_str,"-reserved2") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_reserved2_set;
                }  else if (strcmp(_str,"-node_type_msb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_node_type_msb_set;
                }  else if (strcmp(_str,"-node_type_lsb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -trap_num -qpn_resp_time_val -reserved2 -node_type_msb -node_type_lsb  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -trap_num -qpn_resp_time_val -reserved2 -node_type_msb -node_type_lsb  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-trap_num") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_trap_num_get;
                }  else if (strcmp(_str,"-qpn_resp_time_val") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_get;
                }  else if (strcmp(_str,"-reserved2") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_reserved2_get;
                }  else if (strcmp(_str,"-node_type_msb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_node_type_msb_get;
                }  else if (strcmp(_str,"-node_type_lsb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacInformInfo_g_or_v_generic_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -trap_num -qpn_resp_time_val -reserved2 -node_type_msb -node_type_lsb  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -trap_num -qpn_resp_time_val -reserved2 -node_type_msb -node_type_lsb  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacInformInfo_g_or_v_generic_trap_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qpn_resp_time_val ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_generic_reserved2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_generic_node_type_msb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_type_msb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_type_lsb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacInformInfo_g_or_v_genericCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacInformInfo_g_or_v_generic * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacInformInfo_g_or_v_generic_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacInformInfo_g_or_v_generic_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacInformInfo_g_or_v_generic object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacInformInfo_g_or_v_genericMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define sacInformInfo_g_or_v_vend_dev_id_set(_swigobj,_swigval) (_swigobj->dev_id = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_vend_dev_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_dev_id_set { sacInformInfo_g_or_v_vend * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_dev_id_set. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_vend_dev_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_dev_id_get(_swigobj) (&_swigobj->dev_id)
static int _wrap_sacInformInfo_g_or_v_vend_dev_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_dev_id_get { sacInformInfo_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_dev_id_get. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_vend_dev_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_qpn_resp_time_val_set(_swigobj,_swigval) (_swigobj->qpn_resp_time_val = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_qpn_resp_time_val_set { sacInformInfo_g_or_v_vend * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_qpn_resp_time_val_set. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)sacInformInfo_g_or_v_vend_qpn_resp_time_val_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_qpn_resp_time_val_get(_swigobj) (&_swigobj->qpn_resp_time_val)
static int _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_qpn_resp_time_val_get { sacInformInfo_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_qpn_resp_time_val_get. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)sacInformInfo_g_or_v_vend_qpn_resp_time_val_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_reserved2_set(_swigobj,_swigval) (_swigobj->reserved2 = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_vend_reserved2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_reserved2_set { sacInformInfo_g_or_v_vend * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_reserved2_set. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_vend_reserved2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_reserved2_get(_swigobj) (&_swigobj->reserved2)
static int _wrap_sacInformInfo_g_or_v_vend_reserved2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_reserved2_get { sacInformInfo_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_reserved2_get. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_vend_reserved2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_vendor_id_msb_set(_swigobj,_swigval) (_swigobj->vendor_id_msb = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_vendor_id_msb_set { sacInformInfo_g_or_v_vend * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_vendor_id_msb_set. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_vend_vendor_id_msb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_vendor_id_msb_get(_swigobj) (&_swigobj->vendor_id_msb)
static int _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_vendor_id_msb_get { sacInformInfo_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_vendor_id_msb_get. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)sacInformInfo_g_or_v_vend_vendor_id_msb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_vendor_id_lsb_set(_swigobj,_swigval) (_swigobj->vendor_id_lsb = *(_swigval),_swigval)
static int _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_vendor_id_lsb_set { sacInformInfo_g_or_v_vend * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_vendor_id_lsb_set. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_vend_vendor_id_lsb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define sacInformInfo_g_or_v_vend_vendor_id_lsb_get(_swigobj) (&_swigobj->vendor_id_lsb)
static int _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacInformInfo_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacInformInfo_g_or_v_vend_vendor_id_lsb_get { sacInformInfo_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacInformInfo_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacInformInfo_g_or_v_vend_vendor_id_lsb_get. Expected _sacInformInfo_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)sacInformInfo_g_or_v_vend_vendor_id_lsb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacInformInfo_g_or_v_vendMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacInformInfo_g_or_v_vend methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacInformInfo_g_or_v_vend_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-dev_id") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_dev_id_set;
                }  else if (strcmp(_str,"-qpn_resp_time_val") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_set;
                }  else if (strcmp(_str,"-reserved2") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_reserved2_set;
                }  else if (strcmp(_str,"-vendor_id_msb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_set;
                }  else if (strcmp(_str,"-vendor_id_lsb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -dev_id -qpn_resp_time_val -reserved2 -vendor_id_msb -vendor_id_lsb  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -dev_id -qpn_resp_time_val -reserved2 -vendor_id_msb -vendor_id_lsb  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-dev_id") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_dev_id_get;
                }  else if (strcmp(_str,"-qpn_resp_time_val") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_get;
                }  else if (strcmp(_str,"-reserved2") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_reserved2_get;
                }  else if (strcmp(_str,"-vendor_id_msb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_get;
                }  else if (strcmp(_str,"-vendor_id_lsb") == 0) {
                    cmd = _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacInformInfo_g_or_v_vend_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -dev_id -qpn_resp_time_val -reserved2 -vendor_id_msb -vendor_id_lsb  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -dev_id -qpn_resp_time_val -reserved2 -vendor_id_msb -vendor_id_lsb  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacInformInfo_g_or_v_vend_dev_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dev_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qpn_resp_time_val ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_vend_reserved2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vendor_id_msb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vendor_id_lsb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacInformInfo_g_or_v_vendCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacInformInfo_g_or_v_vend * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacInformInfo_g_or_v_vend_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacInformInfo_g_or_v_vend_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacInformInfo_g_or_v_vend object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacInformInfo_g_or_v_vendMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_service_record_service_id_set(_swigobj,_swigval) (_swigobj->service_id = *(_swigval),_swigval)
static int _wrap_sacServiceRec_service_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacServiceRec * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_id_set { sacServiceRec * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_id_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_service_record_service_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_id_get(_swigobj) (&_swigobj->service_id)
static int _wrap_sacServiceRec_service_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_id_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_id_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_service_record_service_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_gid_set(_swigobj,_swigval) (_swigobj->service_gid = *(_swigval),_swigval)
static int _wrap_sacServiceRec_service_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacServiceRec * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_gid_set { sacServiceRec * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_gid_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[40];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  if (! p_prefix)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }
  p_guid = strtok_r(NULL, " ", &str_token);
  if (! p_guid)
  {
    printf("Wrong format for gid prefix:%s\n", Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  errno = 0;
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_service_record_service_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_gid_get(_swigobj) (&_swigobj->service_gid)
static int _wrap_sacServiceRec_service_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_gid_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_gid_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ib_service_record_service_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_pkey_set(_swigobj,_swigval) (_swigobj->service_pkey = *(_swigval),_swigval)
static int _wrap_sacServiceRec_service_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacServiceRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_pkey_set { sacServiceRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_pkey_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_service_record_service_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_pkey_get(_swigobj) (&_swigobj->service_pkey)
static int _wrap_sacServiceRec_service_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_pkey_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_pkey_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_service_record_service_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_resv_set(_swigobj,_swigval) (_swigobj->resv = *(_swigval),_swigval)
static int _wrap_sacServiceRec_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacServiceRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_resv_set { sacServiceRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_resv_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_service_record_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_resv_get(_swigobj) (&_swigobj->resv)
static int _wrap_sacServiceRec_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_resv_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_resv_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_service_record_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_lease_set(_swigobj,_swigval) (_swigobj->service_lease = *(_swigval),_swigval)
static int _wrap_sacServiceRec_service_lease_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacServiceRec * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_lease_set { sacServiceRec * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_lease_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_service_record_service_lease_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_lease_get(_swigobj) (&_swigobj->service_lease)
static int _wrap_sacServiceRec_service_lease_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_lease_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_lease_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_service_record_service_lease_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static uint8_array_t * _ib_service_record_service_key_set(sacServiceRec *obj, uint8_array_t val[16]) {
{
	int i;
	for (i=0; i <16 ; i++) {
		obj->service_key[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_sacServiceRec_service_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    sacServiceRec * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[16];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_key_set { sacServiceRec * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_key_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 16))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 16; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_service_record_service_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <16 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_service_record_service_key_get(_swigobj) ((uint8_array_t *) _swigobj->service_key)
static int _wrap_sacServiceRec_service_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_key_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_key_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_service_record_service_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <16 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static ib_svc_name_t * _ib_service_record_service_name_set(sacServiceRec *obj, ib_svc_name_t *val) {
{
  memcpy(&(obj->service_name), val, sizeof(ib_svc_name_t));
}
    return (ib_svc_name_t *) val;
}
static int _wrap_sacServiceRec_service_name_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_svc_name_t * _result;
    sacServiceRec * _arg0;
    ib_svc_name_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_svc_name_t  n;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_name_set { sacServiceRec * } { ib_svc_name_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_name_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *p_name;
  int l;
  p_name = Tcl_GetStringFromObj(objv[2], &l);
  if (l > 63) l = 63;
  memcpy(n, p_name, l);
  _arg1 = &n;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_svc_name_t *)_ib_service_record_service_name_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[64];
  strncpy(buff, (char *)(*_result), 63);
  buff[63] = '\0';
  Tcl_SetStringObj(tcl_result,buff, strlen(buff));
}
    return TCL_OK;
}
#define _ib_service_record_service_name_get(_swigobj) (&_swigobj->service_name)
static int _wrap_sacServiceRec_service_name_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_svc_name_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_name_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_name_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_svc_name_t *)_ib_service_record_service_name_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[64];
  strncpy(buff, (char *)(*_result), 63);
  buff[63] = '\0';
  Tcl_SetStringObj(tcl_result,buff, strlen(buff));
}
    return TCL_OK;
}
static uint8_array_t * _ib_service_record_service_data8_set(sacServiceRec *obj, uint8_array_t val[16]) {
{
	int i;
	for (i=0; i <16 ; i++) {
		obj->service_data8[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_sacServiceRec_service_data8_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    sacServiceRec * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[16];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data8_set { sacServiceRec * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data8_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 16))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 16; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_service_record_service_data8_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <16 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_service_record_service_data8_get(_swigobj) ((uint8_array_t *) _swigobj->service_data8)
static int _wrap_sacServiceRec_service_data8_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data8_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data8_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_service_record_service_data8_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <16 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static ib_net16_array_t * _ib_service_record_service_data16_set(sacServiceRec *obj, ib_net16_array_t val[8]) {
{
	int i;
	for (i=0; i <8 ; i++) {
     obj->service_data16[i] = *(val+i);
	}
}
    return (ib_net16_array_t *) val;
}
static int _wrap_sacServiceRec_service_data16_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    sacServiceRec * _arg0;
    ib_net16_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  entrys[8];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data16_set { sacServiceRec * } { ib_net16_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data16_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 8))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 65535)
    {
      printf("Error: wrong format or out of range value for expected ib_net16_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton16(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 8; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ib_service_record_service_data16_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <8 ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_service_record_service_data16_get(_swigobj) ((ib_net16_array_t *) _swigobj->service_data16)
static int _wrap_sacServiceRec_service_data16_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data16_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data16_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ib_service_record_service_data16_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <8 ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static ib_net32_array_t * _ib_service_record_service_data32_set(sacServiceRec *obj, ib_net32_array_t val[4]) {
{
	int i;
	for (i=0; i <4 ; i++) {
     obj->service_data32[i] = *(val+i);
	}
}
    return (ib_net32_array_t *) val;
}
static int _wrap_sacServiceRec_service_data32_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_array_t * _result;
    sacServiceRec * _arg0;
    ib_net32_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  entrys[4];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data32_set { sacServiceRec * } { ib_net32_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data32_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  uint32_t entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 4))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xffffffff)
    {
      printf("Error: wrong format or out of range value for expected ib_net32_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton32(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 4; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_array_t *)_ib_service_record_service_data32_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[12];
  for (i=0; i <4 ; i++) {
    sprintf(buff, "0x%08x ", cl_ntoh32(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_service_record_service_data32_get(_swigobj) ((ib_net32_array_t *) _swigobj->service_data32)
static int _wrap_sacServiceRec_service_data32_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_array_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data32_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data32_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_array_t *)_ib_service_record_service_data32_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[12];
  for (i=0; i <4 ; i++) {
    sprintf(buff, "0x%08x ", cl_ntoh32(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static ib_net64_array_t * _ib_service_record_service_data64_set(sacServiceRec *obj, ib_net64_array_t val[2]) {
{
	int i;
	for (i=0; i <2 ; i++) {
     obj->service_data64[i] = *(val+i);
	}
}
    return (ib_net64_array_t *) val;
}
static int _wrap_sacServiceRec_service_data64_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_array_t * _result;
    sacServiceRec * _arg0;
    ib_net64_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net64_t  entrys[2];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data64_set { sacServiceRec * } { ib_net64_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data64_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  uint64_t entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 2))
  {
    entry = strtoll(p_ch, NULL, 0);
    if (entry > 0xffffffffffffffffULL )
    {
      printf("Error: wrong format or out of range value for expected ib_net64_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton64(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 2; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_array_t *)_ib_service_record_service_data64_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[20];
  for (i=0; i <2 ; i++) {
    sprintf(buff, "0x%016" PRIx64 " ", cl_ntoh64(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_service_record_service_data64_get(_swigobj) ((ib_net64_array_t *) _swigobj->service_data64)
static int _wrap_sacServiceRec_service_data64_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_array_t * _result;
    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_service_data64_get { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_service_data64_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_array_t *)_ib_service_record_service_data64_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[20];
  for (i=0; i <2 ; i++) {
    sprintf(buff, "0x%016" PRIx64 " ", cl_ntoh64(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static char * sacServiceRec_get(sacServiceRec *self,uint64_t  comp_mask) {
    return(ibsacServiceRecordQuery(self, cl_hton64(comp_mask),
                                   IB_MAD_METHOD_GET));
  }
static int _wrap_sacServiceRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacServiceRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_get { sacServiceRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_get. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacServiceRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacServiceRec_set(sacServiceRec *self,uint64_t  comp_mask) {
    return(ibsacServiceRecordQuery(self, cl_hton64(comp_mask),
                                   IB_MAD_METHOD_SET));
  }
static int _wrap_sacServiceRec_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacServiceRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_set { sacServiceRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_set. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacServiceRec_set(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacServiceRec_getTable(sacServiceRec *self,uint64_t  comp_mask) {
    return(ibsacServiceRecordQuery(self, cl_hton64(comp_mask),
                                   IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacServiceRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacServiceRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_getTable { sacServiceRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_getTable. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacServiceRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacServiceRec_delete(sacServiceRec *self,uint64_t  comp_mask) {
    return(ibsacServiceRecordQuery(self, cl_hton64(comp_mask),
                                   IB_MAD_METHOD_DELETE));
  }
static int _wrap_sacServiceRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacServiceRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_delete { sacServiceRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_delete. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacServiceRec_delete(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacServiceRec_obj_delete(sacServiceRec *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacServiceRec_obj_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacServiceRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacServiceRec_obj_delete { sacServiceRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacServiceRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacServiceRec_obj_delete. Expected _sacServiceRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacServiceRec_obj_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacServiceRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacServiceRec methods : { dump cget configure get set getTable delete obj_delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacServiceRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacServiceRec_get;
    }    else if (strcmp(_str,"set") == 0) {
        cmd = _wrap_sacServiceRec_set;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacServiceRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacServiceRec_delete;
    }    else if (strcmp(_str,"obj_delete") == 0) {
        cmd = _wrap_sacServiceRec_obj_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-service_id") == 0) {
                    cmd = _wrap_sacServiceRec_service_id_set;
                }  else if (strcmp(_str,"-service_gid") == 0) {
                    cmd = _wrap_sacServiceRec_service_gid_set;
                }  else if (strcmp(_str,"-service_pkey") == 0) {
                    cmd = _wrap_sacServiceRec_service_pkey_set;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_sacServiceRec_resv_set;
                }  else if (strcmp(_str,"-service_lease") == 0) {
                    cmd = _wrap_sacServiceRec_service_lease_set;
                }  else if (strcmp(_str,"-service_key") == 0) {
                    cmd = _wrap_sacServiceRec_service_key_set;
                }  else if (strcmp(_str,"-service_name") == 0) {
                    cmd = _wrap_sacServiceRec_service_name_set;
                }  else if (strcmp(_str,"-service_data8") == 0) {
                    cmd = _wrap_sacServiceRec_service_data8_set;
                }  else if (strcmp(_str,"-service_data16") == 0) {
                    cmd = _wrap_sacServiceRec_service_data16_set;
                }  else if (strcmp(_str,"-service_data32") == 0) {
                    cmd = _wrap_sacServiceRec_service_data32_set;
                }  else if (strcmp(_str,"-service_data64") == 0) {
                    cmd = _wrap_sacServiceRec_service_data64_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -service_id -service_gid -service_pkey -resv -service_lease -service_key -service_name -service_data8 -service_data16 -service_data32 -service_data64  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -service_id -service_gid -service_pkey -resv -service_lease -service_key -service_name -service_data8 -service_data16 -service_data32 -service_data64  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-service_id") == 0) {
                    cmd = _wrap_sacServiceRec_service_id_get;
                }  else if (strcmp(_str,"-service_gid") == 0) {
                    cmd = _wrap_sacServiceRec_service_gid_get;
                }  else if (strcmp(_str,"-service_pkey") == 0) {
                    cmd = _wrap_sacServiceRec_service_pkey_get;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_sacServiceRec_resv_get;
                }  else if (strcmp(_str,"-service_lease") == 0) {
                    cmd = _wrap_sacServiceRec_service_lease_get;
                }  else if (strcmp(_str,"-service_key") == 0) {
                    cmd = _wrap_sacServiceRec_service_key_get;
                }  else if (strcmp(_str,"-service_name") == 0) {
                    cmd = _wrap_sacServiceRec_service_name_get;
                }  else if (strcmp(_str,"-service_data8") == 0) {
                    cmd = _wrap_sacServiceRec_service_data8_get;
                }  else if (strcmp(_str,"-service_data16") == 0) {
                    cmd = _wrap_sacServiceRec_service_data16_get;
                }  else if (strcmp(_str,"-service_data32") == 0) {
                    cmd = _wrap_sacServiceRec_service_data32_get;
                }  else if (strcmp(_str,"-service_data64") == 0) {
                    cmd = _wrap_sacServiceRec_service_data64_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacServiceRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -service_id -service_gid -service_pkey -resv -service_lease -service_key -service_name -service_data8 -service_data16 -service_data32 -service_data64  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -service_id -service_gid -service_pkey -resv -service_lease -service_key -service_name -service_data8 -service_data16 -service_data32 -service_data64  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacServiceRec_service_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_lease_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_lease ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_name_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_name ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_data8_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_data8 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_data16_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_data16 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_data32_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_data32 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacServiceRec_service_data64_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-service_data64 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get set getTable delete obj_delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacServiceRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacServiceRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacServiceRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacServiceRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacServiceRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacServiceRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static uint8_array_t * _ib_slvl_table_raw_vl_by_sl_set(sacSlVlTbl *obj, uint8_array_t val[IB_MAX_NUM_VLS/2]) {
{
	int i;
	for (i=0; i <IB_MAX_NUM_VLS/2 ; i++) {
		obj->raw_vl_by_sl[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_sacSlVlTbl_raw_vl_by_sl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    sacSlVlTbl * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[IB_MAX_NUM_VLS/2];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlTbl_raw_vl_by_sl_set { sacSlVlTbl * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlTbl_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlTbl_raw_vl_by_sl_set. Expected _sacSlVlTbl_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < IB_MAX_NUM_VLS/2))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < IB_MAX_NUM_VLS/2; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_slvl_table_raw_vl_by_sl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_MAX_NUM_VLS/2 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_slvl_table_raw_vl_by_sl_get(_swigobj) ((uint8_array_t *) _swigobj->raw_vl_by_sl)
static int _wrap_sacSlVlTbl_raw_vl_by_sl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    sacSlVlTbl * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlTbl_raw_vl_by_sl_get { sacSlVlTbl * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlTbl_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlTbl_raw_vl_by_sl_get. Expected _sacSlVlTbl_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_slvl_table_raw_vl_by_sl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_MAX_NUM_VLS/2 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacSlVlTblMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacSlVlTbl methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacSlVlTbl_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-raw_vl_by_sl") == 0) {
                    cmd = _wrap_sacSlVlTbl_raw_vl_by_sl_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -raw_vl_by_sl  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -raw_vl_by_sl  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-raw_vl_by_sl") == 0) {
                    cmd = _wrap_sacSlVlTbl_raw_vl_by_sl_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacSlVlTbl_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -raw_vl_by_sl  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -raw_vl_by_sl  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacSlVlTbl_raw_vl_by_sl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-raw_vl_by_sl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacSlVlTblCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacSlVlTbl * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacSlVlTbl_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacSlVlTbl_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacSlVlTbl object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacSlVlTblMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_slvl_table_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacSlVlRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSlVlRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_lid_set { sacSlVlRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_lid_set. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_slvl_table_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacSlVlRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacSlVlRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_lid_get { sacSlVlRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_lid_get. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_slvl_table_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_in_port_num_set(_swigobj,_swigval) (_swigobj->in_port_num = *(_swigval),_swigval)
static int _wrap_sacSlVlRec_in_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSlVlRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_in_port_num_set { sacSlVlRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_in_port_num_set. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_slvl_table_record_in_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_in_port_num_get(_swigobj) (&_swigobj->in_port_num)
static int _wrap_sacSlVlRec_in_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSlVlRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_in_port_num_get { sacSlVlRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_in_port_num_get. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_slvl_table_record_in_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_out_port_num_set(_swigobj,_swigval) (_swigobj->out_port_num = *(_swigval),_swigval)
static int _wrap_sacSlVlRec_out_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSlVlRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_out_port_num_set { sacSlVlRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_out_port_num_set. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_slvl_table_record_out_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_out_port_num_get(_swigobj) (&_swigobj->out_port_num)
static int _wrap_sacSlVlRec_out_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacSlVlRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_out_port_num_get { sacSlVlRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_out_port_num_get. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_slvl_table_record_out_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_resv_set(_swigobj,_swigval) (_swigobj->resv = *(_swigval),_swigval)
static int _wrap_sacSlVlRec_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint32_t * _result;
    sacSlVlRec * _arg0;
    uint32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_resv_set { sacSlVlRec * } { uint32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_resv_set. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint32_t *)_ib_slvl_table_record_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_resv_get(_swigobj) (&_swigobj->resv)
static int _wrap_sacSlVlRec_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint32_t * _result;
    sacSlVlRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_resv_get { sacSlVlRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_resv_get. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint32_t *)_ib_slvl_table_record_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_slvl_table_record_slvl_tbl_set(_swigobj,_swigval) (_swigobj->slvl_tbl = *(_swigval),_swigval)
static int _wrap_sacSlVlRec_slvl_tbl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSlVlTbl * _result;
    sacSlVlRec * _arg0;
    sacSlVlTbl * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_slvl_tbl_set { sacSlVlRec * } { sacSlVlTbl * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_slvl_tbl_set. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacSlVlTbl_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacSlVlRec_slvl_tbl_set. Expected _sacSlVlTbl_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacSlVlTbl *)_ib_slvl_table_record_slvl_tbl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacSlVlTbl_p");
    return TCL_OK;
}
#define _ib_slvl_table_record_slvl_tbl_get(_swigobj) (&_swigobj->slvl_tbl)
static int _wrap_sacSlVlRec_slvl_tbl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSlVlTbl * _result;
    sacSlVlRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_slvl_tbl_get { sacSlVlRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_slvl_tbl_get. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacSlVlTbl *)_ib_slvl_table_record_slvl_tbl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacSlVlTbl_p");
    return TCL_OK;
}
static char * sacSlVlRec_get(sacSlVlRec *self,uint64_t  comp_mask) {
    return(ibsacSl2VlRecordQuery(self, cl_hton64(comp_mask),
                                 IB_MAD_METHOD_GET));
  }
static int _wrap_sacSlVlRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacSlVlRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_get { sacSlVlRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_get. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacSlVlRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacSlVlRec_getTable(sacSlVlRec *self,uint64_t  comp_mask) {
    return(ibsacSl2VlRecordQuery(self, cl_hton64(comp_mask),
                                 IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacSlVlRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacSlVlRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_getTable { sacSlVlRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_getTable. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacSlVlRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacSlVlRec_delete(sacSlVlRec *self) {
	 SWIG_AltMnglUnregObj(&(self->slvl_tbl));
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacSlVlRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacSlVlRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacSlVlRec_delete { sacSlVlRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacSlVlRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacSlVlRec_delete. Expected _sacSlVlRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacSlVlRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacSlVlRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacSlVlRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacSlVlRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacSlVlRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacSlVlRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacSlVlRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacSlVlRec_lid_set;
                }  else if (strcmp(_str,"-in_port_num") == 0) {
                    cmd = _wrap_sacSlVlRec_in_port_num_set;
                }  else if (strcmp(_str,"-out_port_num") == 0) {
                    cmd = _wrap_sacSlVlRec_out_port_num_set;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_sacSlVlRec_resv_set;
                }  else if (strcmp(_str,"-slvl_tbl") == 0) {
                    cmd = _wrap_sacSlVlRec_slvl_tbl_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -in_port_num -out_port_num -resv -slvl_tbl  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -in_port_num -out_port_num -resv -slvl_tbl  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacSlVlRec_lid_get;
                }  else if (strcmp(_str,"-in_port_num") == 0) {
                    cmd = _wrap_sacSlVlRec_in_port_num_get;
                }  else if (strcmp(_str,"-out_port_num") == 0) {
                    cmd = _wrap_sacSlVlRec_out_port_num_get;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_sacSlVlRec_resv_get;
                }  else if (strcmp(_str,"-slvl_tbl") == 0) {
                    cmd = _wrap_sacSlVlRec_slvl_tbl_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacSlVlRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -in_port_num -out_port_num -resv -slvl_tbl  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -in_port_num -out_port_num -resv -slvl_tbl  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacSlVlRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSlVlRec_in_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-in_port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSlVlRec_out_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-out_port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSlVlRec_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacSlVlRec_slvl_tbl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-slvl_tbl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacSlVlRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacSlVlRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacSlVlRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacSlVlRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacSlVlRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacSlVlRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_vl_arb_table_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacVlArbRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacVlArbRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_lid_set { sacVlArbRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_lid_set. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_vl_arb_table_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacVlArbRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacVlArbRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_lid_get { sacVlArbRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_lid_get. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_vl_arb_table_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_port_num_set(_swigobj,_swigval) (_swigobj->port_num = *(_swigval),_swigval)
static int _wrap_sacVlArbRec_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacVlArbRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_port_num_set { sacVlArbRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_port_num_set. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_vl_arb_table_record_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_port_num_get(_swigobj) (&_swigobj->port_num)
static int _wrap_sacVlArbRec_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacVlArbRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_port_num_get { sacVlArbRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_port_num_get. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_vl_arb_table_record_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_block_num_set(_swigobj,_swigval) (_swigobj->block_num = *(_swigval),_swigval)
static int _wrap_sacVlArbRec_block_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacVlArbRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_block_num_set { sacVlArbRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_block_num_set. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_vl_arb_table_record_block_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_block_num_get(_swigobj) (&_swigobj->block_num)
static int _wrap_sacVlArbRec_block_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacVlArbRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_block_num_get { sacVlArbRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_block_num_get. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_vl_arb_table_record_block_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_reserved_set(_swigobj,_swigval) (_swigobj->reserved = *(_swigval),_swigval)
static int _wrap_sacVlArbRec_reserved_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint32_t * _result;
    sacVlArbRec * _arg0;
    uint32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_reserved_set { sacVlArbRec * } { uint32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_reserved_set. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint32_t *)_ib_vl_arb_table_record_reserved_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_reserved_get(_swigobj) (&_swigobj->reserved)
static int _wrap_sacVlArbRec_reserved_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint32_t * _result;
    sacVlArbRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_reserved_get { sacVlArbRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_reserved_get. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint32_t *)_ib_vl_arb_table_record_reserved_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_vl_arb_tbl_set(_swigobj,_swigval) (_swigobj->vl_arb_tbl = *(_swigval),_swigval)
static int _wrap_sacVlArbRec_vl_arb_tbl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sac_vl_arb_tbl_t * _result;
    sacVlArbRec * _arg0;
    sac_vl_arb_tbl_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_vl_arb_table_t  n;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_vl_arb_tbl_set { sacVlArbRec * } { sac_vl_arb_tbl_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_vl_arb_tbl_set. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  uint8_t idx;
  char *p_vl_str, *p_wt_str;
  unsigned long int vl, weight;
#if TCL_MINOR_VERSION > 3
  const char **sub_lists;
#else
  char **sub_lists;
#endif
  int num_sub_lists;
  memset( &n, 0, sizeof(ib_vl_arb_table_t) );

  /* we will use the TCL split list to split into elements */
  if (Tcl_SplitList(interp,
                    Tcl_GetStringFromObj(objv[2],0),
                    &num_sub_lists, &sub_lists) != TCL_OK) {
    printf("-E- Bad formatted list :%s\n",
           Tcl_GetStringFromObj(objv[2],0));
    return TCL_ERROR;
  }

  for (idx = 0;
       (idx < num_sub_lists) && (idx < IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK);
       idx++)
  {
    /* we need to double copy since TCL 8.4 requires split res to be const */
    char buf[16];
    char *p_last;
    strcpy(buf, sub_lists[idx]);
    p_vl_str = strtok_r(buf," \t", &p_last);
    p_wt_str = strtok_r(NULL," \t", &p_last);
    if (! (p_vl_str && p_wt_str)) {
      printf("-E- Bad formatted number pair:%s\n", sub_lists[idx]);
      return TCL_ERROR;
    } else {
      errno = 0;
      vl = strtoul(p_vl_str, NULL, 0);
      if (errno || (vl > 15)) {
        printf("-E- Bad formatted VL:%s\n", p_vl_str);
        return TCL_ERROR;
      }

      weight = strtoul(p_wt_str, NULL, 0);
      if (errno || (weight > 255)) {
        printf("-E- Bad formatted Weight:%s\n", p_wt_str);
        return TCL_ERROR;
      }

      n.vl_entry[idx].vl = vl;
      n.vl_entry[idx].weight = weight;
    }
  }
  Tcl_Free((char *) sub_lists);

  _arg1 = &n;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sac_vl_arb_tbl_t *)_ib_vl_arb_table_record_vl_arb_tbl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  uint32_t i;
  ib_vl_arb_table_t *p_tbl;
  char buf[256];
  if (_result) {
    strcpy(buf, "");
    p_tbl = _result;
    /*  go over all elements */
    for (i = 0; i < IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK; i++) {
      sprintf(buf, "{0x%X 0x%02X} ",
              p_tbl->vl_entry[i].vl, p_tbl->vl_entry[i].weight);
      Tcl_AppendResult(interp, buf, NULL);
    }
  } else {
	 Tcl_SetResult(interp, "", NULL);
  }
}
    return TCL_OK;
}
#define _ib_vl_arb_table_record_vl_arb_tbl_get(_swigobj) (&_swigobj->vl_arb_tbl)
static int _wrap_sacVlArbRec_vl_arb_tbl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sac_vl_arb_tbl_t * _result;
    sacVlArbRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_vl_arb_tbl_get { sacVlArbRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_vl_arb_tbl_get. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sac_vl_arb_tbl_t *)_ib_vl_arb_table_record_vl_arb_tbl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  uint32_t i;
  ib_vl_arb_table_t *p_tbl;
  char buf[256];
  if (_result) {
    strcpy(buf, "");
    p_tbl = _result;
    /*  go over all elements */
    for (i = 0; i < IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK; i++) {
      sprintf(buf, "{0x%X 0x%02X} ",
              p_tbl->vl_entry[i].vl, p_tbl->vl_entry[i].weight);
      Tcl_AppendResult(interp, buf, NULL);
    }
  } else {
	 Tcl_SetResult(interp, "", NULL);
  }
}
    return TCL_OK;
}
static char * sacVlArbRec_get(sacVlArbRec *self,uint64_t  comp_mask) {
    return(ibsacVlArbRecordQuery(self, cl_hton64(comp_mask),
                                 IB_MAD_METHOD_GET));
  }
static int _wrap_sacVlArbRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacVlArbRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_get { sacVlArbRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_get. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacVlArbRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacVlArbRec_getTable(sacVlArbRec *self,uint64_t  comp_mask) {
    return(ibsacVlArbRecordQuery(self, cl_hton64(comp_mask),
                                 IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacVlArbRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacVlArbRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_getTable { sacVlArbRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_getTable. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacVlArbRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacVlArbRec_delete(sacVlArbRec *self) {
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacVlArbRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacVlArbRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacVlArbRec_delete { sacVlArbRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacVlArbRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacVlArbRec_delete. Expected _sacVlArbRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacVlArbRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacVlArbRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacVlArbRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacVlArbRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacVlArbRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacVlArbRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacVlArbRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacVlArbRec_lid_set;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_sacVlArbRec_port_num_set;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacVlArbRec_block_num_set;
                }  else if (strcmp(_str,"-reserved") == 0) {
                    cmd = _wrap_sacVlArbRec_reserved_set;
                }  else if (strcmp(_str,"-vl_arb_tbl") == 0) {
                    cmd = _wrap_sacVlArbRec_vl_arb_tbl_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -port_num -block_num -reserved -vl_arb_tbl  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -port_num -block_num -reserved -vl_arb_tbl  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacVlArbRec_lid_get;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_sacVlArbRec_port_num_get;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacVlArbRec_block_num_get;
                }  else if (strcmp(_str,"-reserved") == 0) {
                    cmd = _wrap_sacVlArbRec_reserved_get;
                }  else if (strcmp(_str,"-vl_arb_tbl") == 0) {
                    cmd = _wrap_sacVlArbRec_vl_arb_tbl_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacVlArbRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -port_num -block_num -reserved -vl_arb_tbl  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -port_num -block_num -reserved -vl_arb_tbl  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacVlArbRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacVlArbRec_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacVlArbRec_block_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-block_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacVlArbRec_reserved_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacVlArbRec_vl_arb_tbl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_arb_tbl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacVlArbRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacVlArbRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacVlArbRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacVlArbRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacVlArbRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacVlArbRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_net16_array_t * _ib_pkey_table_pkey_entry_set(sacPKeyTbl *obj, ib_net16_array_t val[IB_NUM_PKEY_ELEMENTS_IN_BLOCK]) {
{
	int i;
	for (i=0; i <IB_NUM_PKEY_ELEMENTS_IN_BLOCK ; i++) {
     obj->pkey_entry[i] = *(val+i);
	}
}
    return (ib_net16_array_t *) val;
}
static int _wrap_sacPKeyTbl_pkey_entry_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    sacPKeyTbl * _arg0;
    ib_net16_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  entrys[IB_NUM_PKEY_ELEMENTS_IN_BLOCK];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyTbl_pkey_entry_set { sacPKeyTbl * } { ib_net16_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyTbl_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyTbl_pkey_entry_set. Expected _sacPKeyTbl_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < IB_NUM_PKEY_ELEMENTS_IN_BLOCK))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 65535)
    {
      printf("Error: wrong format or out of range value for expected ib_net16_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton16(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < IB_NUM_PKEY_ELEMENTS_IN_BLOCK; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ib_pkey_table_pkey_entry_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_NUM_PKEY_ELEMENTS_IN_BLOCK ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_pkey_table_pkey_entry_get(_swigobj) ((ib_net16_array_t *) _swigobj->pkey_entry)
static int _wrap_sacPKeyTbl_pkey_entry_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    sacPKeyTbl * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyTbl_pkey_entry_get { sacPKeyTbl * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyTbl_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyTbl_pkey_entry_get. Expected _sacPKeyTbl_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ib_pkey_table_pkey_entry_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_NUM_PKEY_ELEMENTS_IN_BLOCK ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacPKeyTblMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacPKeyTbl methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacPKeyTbl_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pkey_entry") == 0) {
                    cmd = _wrap_sacPKeyTbl_pkey_entry_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pkey_entry  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pkey_entry  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pkey_entry") == 0) {
                    cmd = _wrap_sacPKeyTbl_pkey_entry_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacPKeyTbl_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pkey_entry  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pkey_entry  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacPKeyTbl_pkey_entry_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkey_entry ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacPKeyTblCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacPKeyTbl * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacPKeyTbl_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacPKeyTbl_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacPKeyTbl object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacPKeyTblMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_pkey_table_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacPKeyRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPKeyRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_lid_set { sacPKeyRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_lid_set. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_pkey_table_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacPKeyRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_lid_get { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_lid_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_pkey_table_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_block_num_set(_swigobj,_swigval) (_swigobj->block_num = *(_swigval),_swigval)
static int _wrap_sacPKeyRec_block_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint16_t * _result;
    sacPKeyRec * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_block_num_set { sacPKeyRec * } { uint16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_block_num_set. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint16_t *)_ib_pkey_table_record_block_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_block_num_get(_swigobj) (&_swigobj->block_num)
static int _wrap_sacPKeyRec_block_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint16_t * _result;
    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_block_num_get { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_block_num_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint16_t *)_ib_pkey_table_record_block_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_port_num_set(_swigobj,_swigval) (_swigobj->port_num = *(_swigval),_swigval)
static int _wrap_sacPKeyRec_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPKeyRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_port_num_set { sacPKeyRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_port_num_set. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_pkey_table_record_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_port_num_get(_swigobj) (&_swigobj->port_num)
static int _wrap_sacPKeyRec_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_port_num_get { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_port_num_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_pkey_table_record_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_reserved1_set(_swigobj,_swigval) (_swigobj->reserved1 = *(_swigval),_swigval)
static int _wrap_sacPKeyRec_reserved1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPKeyRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_reserved1_set { sacPKeyRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_reserved1_set. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_pkey_table_record_reserved1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_reserved1_get(_swigobj) (&_swigobj->reserved1)
static int _wrap_sacPKeyRec_reserved1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_reserved1_get { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_reserved1_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_pkey_table_record_reserved1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_reserved2_set(_swigobj,_swigval) (_swigobj->reserved2 = *(_swigval),_swigval)
static int _wrap_sacPKeyRec_reserved2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint16_t * _result;
    sacPKeyRec * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_reserved2_set { sacPKeyRec * } { uint16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_reserved2_set. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint16_t *)_ib_pkey_table_record_reserved2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_reserved2_get(_swigobj) (&_swigobj->reserved2)
static int _wrap_sacPKeyRec_reserved2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint16_t * _result;
    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_reserved2_get { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_reserved2_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint16_t *)_ib_pkey_table_record_reserved2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_pkey_table_record_pkey_tbl_set(_swigobj,_swigval) (_swigobj->pkey_tbl = *(_swigval),_swigval)
static int _wrap_sacPKeyRec_pkey_tbl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPKeyTbl * _result;
    sacPKeyRec * _arg0;
    sacPKeyTbl * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_pkey_tbl_set { sacPKeyRec * } { sacPKeyTbl * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_pkey_tbl_set. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacPKeyTbl_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacPKeyRec_pkey_tbl_set. Expected _sacPKeyTbl_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacPKeyTbl *)_ib_pkey_table_record_pkey_tbl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacPKeyTbl_p");
    return TCL_OK;
}
#define _ib_pkey_table_record_pkey_tbl_get(_swigobj) (&_swigobj->pkey_tbl)
static int _wrap_sacPKeyRec_pkey_tbl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPKeyTbl * _result;
    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_pkey_tbl_get { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_pkey_tbl_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacPKeyTbl *)_ib_pkey_table_record_pkey_tbl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacPKeyTbl_p");
    return TCL_OK;
}
static char * sacPKeyRec_get(sacPKeyRec *self,uint64_t  comp_mask) {
    return(ibsacPKeyRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GET));
  }
static int _wrap_sacPKeyRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacPKeyRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_get { sacPKeyRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_get. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacPKeyRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacPKeyRec_getTable(sacPKeyRec *self,uint64_t  comp_mask) {
    return(ibsacPKeyRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacPKeyRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacPKeyRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_getTable { sacPKeyRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_getTable. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacPKeyRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacPKeyRec_delete(sacPKeyRec *self) {
	 SWIG_AltMnglUnregObj(&(self->pkey_tbl));
	 SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacPKeyRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacPKeyRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacPKeyRec_delete { sacPKeyRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacPKeyRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacPKeyRec_delete. Expected _sacPKeyRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacPKeyRec_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacPKeyRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacPKeyRec methods : { dump cget configure get getTable delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacPKeyRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacPKeyRec_get;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacPKeyRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacPKeyRec_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacPKeyRec_lid_set;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacPKeyRec_block_num_set;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_sacPKeyRec_port_num_set;
                }  else if (strcmp(_str,"-reserved1") == 0) {
                    cmd = _wrap_sacPKeyRec_reserved1_set;
                }  else if (strcmp(_str,"-reserved2") == 0) {
                    cmd = _wrap_sacPKeyRec_reserved2_set;
                }  else if (strcmp(_str,"-pkey_tbl") == 0) {
                    cmd = _wrap_sacPKeyRec_pkey_tbl_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -block_num -port_num -reserved1 -reserved2 -pkey_tbl  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -block_num -port_num -reserved1 -reserved2 -pkey_tbl  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacPKeyRec_lid_get;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacPKeyRec_block_num_get;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_sacPKeyRec_port_num_get;
                }  else if (strcmp(_str,"-reserved1") == 0) {
                    cmd = _wrap_sacPKeyRec_reserved1_get;
                }  else if (strcmp(_str,"-reserved2") == 0) {
                    cmd = _wrap_sacPKeyRec_reserved2_get;
                }  else if (strcmp(_str,"-pkey_tbl") == 0) {
                    cmd = _wrap_sacPKeyRec_pkey_tbl_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacPKeyRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -block_num -port_num -reserved1 -reserved2 -pkey_tbl  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -block_num -port_num -reserved1 -reserved2 -pkey_tbl  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacPKeyRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPKeyRec_block_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-block_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPKeyRec_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPKeyRec_reserved1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPKeyRec_reserved2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacPKeyRec_pkey_tbl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkey_tbl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get getTable delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacPKeyRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacPKeyRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacPKeyRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacPKeyRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacPKeyRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacPKeyRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_net64_array_t * _ib_guid_info_guid_set(sacGuidInfo *obj, ib_net64_array_t val[GUID_TABLE_MAX_ENTRIES]) {
{
	int i;
	for (i=0; i <GUID_TABLE_MAX_ENTRIES ; i++) {
     obj->guid[i] = *(val+i);
	}
}
    return (ib_net64_array_t *) val;
}
static int _wrap_sacGuidInfo_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_array_t * _result;
    sacGuidInfo * _arg0;
    ib_net64_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net64_t  entrys[GUID_TABLE_MAX_ENTRIES];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidInfo_guid_set { sacGuidInfo * } { ib_net64_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidInfo_guid_set. Expected _sacGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  uint64_t entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < GUID_TABLE_MAX_ENTRIES))
  {
    entry = strtoll(p_ch, NULL, 0);
    if (entry > 0xffffffffffffffffULL )
    {
      printf("Error: wrong format or out of range value for expected ib_net64_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton64(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < GUID_TABLE_MAX_ENTRIES; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_array_t *)_ib_guid_info_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[20];
  for (i=0; i <GUID_TABLE_MAX_ENTRIES ; i++) {
    sprintf(buff, "0x%016" PRIx64 " ", cl_ntoh64(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_guid_info_guid_get(_swigobj) ((ib_net64_array_t *) _swigobj->guid)
static int _wrap_sacGuidInfo_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_array_t * _result;
    sacGuidInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidInfo_guid_get { sacGuidInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidInfo_guid_get. Expected _sacGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_array_t *)_ib_guid_info_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[20];
  for (i=0; i <GUID_TABLE_MAX_ENTRIES ; i++) {
    sprintf(buff, "0x%016" PRIx64 " ", cl_ntoh64(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static void  sacGuidInfo_delete(sacGuidInfo *self) {
    SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacGuidInfo_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacGuidInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidInfo_delete { sacGuidInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidInfo_delete. Expected _sacGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacGuidInfo_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacGuidInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacGuidInfo methods : { dump cget configure delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacGuidInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacGuidInfo_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_sacGuidInfo_guid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -guid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -guid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_sacGuidInfo_guid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacGuidInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -guid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -guid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacGuidInfo_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacGuidInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacGuidInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacGuidInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacGuidInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacGuidInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacGuidInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_guidinfo_record_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_sacGuidRec_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacGuidRec * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_lid_set { sacGuidRec * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_lid_set. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_guidinfo_record_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_sacGuidRec_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    sacGuidRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_lid_get { sacGuidRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_lid_get. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_guidinfo_record_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_block_num_set(_swigobj,_swigval) (_swigobj->block_num = *(_swigval),_swigval)
static int _wrap_sacGuidRec_block_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacGuidRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_block_num_set { sacGuidRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_block_num_set. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_guidinfo_record_block_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_block_num_get(_swigobj) (&_swigobj->block_num)
static int _wrap_sacGuidRec_block_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacGuidRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_block_num_get { sacGuidRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_block_num_get. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_guidinfo_record_block_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_resv_set(_swigobj,_swigval) (_swigobj->resv = *(_swigval),_swigval)
static int _wrap_sacGuidRec_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacGuidRec * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_resv_set { sacGuidRec * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_resv_set. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_guidinfo_record_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_resv_get(_swigobj) (&_swigobj->resv)
static int _wrap_sacGuidRec_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    sacGuidRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_resv_get { sacGuidRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_resv_get. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_guidinfo_record_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_reserved_set(_swigobj,_swigval) (_swigobj->reserved = *(_swigval),_swigval)
static int _wrap_sacGuidRec_reserved_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint32_t * _result;
    sacGuidRec * _arg0;
    uint32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_reserved_set { sacGuidRec * } { uint32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_reserved_set. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint32_t *)_ib_guidinfo_record_reserved_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_reserved_get(_swigobj) (&_swigobj->reserved)
static int _wrap_sacGuidRec_reserved_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint32_t * _result;
    sacGuidRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_reserved_get { sacGuidRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_reserved_get. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint32_t *)_ib_guidinfo_record_reserved_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_guidinfo_record_guid_info_set(_swigobj,_swigval) (_swigobj->guid_info = *(_swigval),_swigval)
static int _wrap_sacGuidRec_guid_info_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacGuidInfo * _result;
    sacGuidRec * _arg0;
    sacGuidInfo * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_guid_info_set { sacGuidRec * } { sacGuidInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_guid_info_set. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[2],(void **) &_arg1,"_sacGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 2 of sacGuidRec_guid_info_set. Expected _sacGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacGuidInfo *)_ib_guidinfo_record_guid_info_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacGuidInfo_p");
    return TCL_OK;
}
#define _ib_guidinfo_record_guid_info_get(_swigobj) (&_swigobj->guid_info)
static int _wrap_sacGuidRec_guid_info_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacGuidInfo * _result;
    sacGuidRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_guid_info_get { sacGuidRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_guid_info_get. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (sacGuidInfo *)_ib_guidinfo_record_guid_info_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_sacGuidInfo_p");
    return TCL_OK;
}
static char * sacGuidRec_get(sacGuidRec *self,uint64_t  comp_mask) {
    return(ibsacGuidRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GET));
  }
static int _wrap_sacGuidRec_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacGuidRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_get { sacGuidRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_get. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacGuidRec_get(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacGuidRec_set(sacGuidRec *self,uint64_t  comp_mask) {
    return(ibsacGuidRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_SET));
  }
static int _wrap_sacGuidRec_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacGuidRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_set { sacGuidRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_set. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacGuidRec_set(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacGuidRec_getTable(sacGuidRec *self,uint64_t  comp_mask) {
    return(ibsacGuidRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_GETTABLE));
  }
static int _wrap_sacGuidRec_getTable(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacGuidRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_getTable { sacGuidRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_getTable. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacGuidRec_getTable(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static char * sacGuidRec_delete(sacGuidRec *self,uint64_t  comp_mask) {
    return(ibsacGuidRecordQuery(self, cl_hton64(comp_mask),
                                IB_MAD_METHOD_DELETE));
  }
static int _wrap_sacGuidRec_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    sacGuidRec * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_delete { sacGuidRec * } comp_mask ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_delete. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (char *)sacGuidRec_delete(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
free(_result);

    return TCL_OK;
}
static void  sacGuidRec_obj_delete(sacGuidRec *self) {
    /* we need to de-register both the guid info and guid record */
    SWIG_AltMnglUnregObj(&(self->guid_info));
    SWIG_AltMnglUnregObj(self);
    free(self);
  }
static int _wrap_sacGuidRec_obj_delete(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    sacGuidRec * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. sacGuidRec_obj_delete { sacGuidRec * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_sacGuidRec_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of sacGuidRec_obj_delete. Expected _sacGuidRec_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      sacGuidRec_obj_delete(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsacGuidRecMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"sacGuidRec methods : { dump cget configure get set getTable delete obj_delete  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_sacGuidRec_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"get") == 0) {
        cmd = _wrap_sacGuidRec_get;
    }    else if (strcmp(_str,"set") == 0) {
        cmd = _wrap_sacGuidRec_set;
    }    else if (strcmp(_str,"getTable") == 0) {
        cmd = _wrap_sacGuidRec_getTable;
    }    else if (strcmp(_str,"delete") == 0) {
        cmd = _wrap_sacGuidRec_delete;
    }    else if (strcmp(_str,"obj_delete") == 0) {
        cmd = _wrap_sacGuidRec_obj_delete;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacGuidRec_lid_set;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacGuidRec_block_num_set;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_sacGuidRec_resv_set;
                }  else if (strcmp(_str,"-reserved") == 0) {
                    cmd = _wrap_sacGuidRec_reserved_set;
                }  else if (strcmp(_str,"-guid_info") == 0) {
                    cmd = _wrap_sacGuidRec_guid_info_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lid -block_num -resv -reserved -guid_info  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lid -block_num -resv -reserved -guid_info  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_sacGuidRec_lid_get;
                }  else if (strcmp(_str,"-block_num") == 0) {
                    cmd = _wrap_sacGuidRec_block_num_get;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_sacGuidRec_resv_get;
                }  else if (strcmp(_str,"-reserved") == 0) {
                    cmd = _wrap_sacGuidRec_reserved_get;
                }  else if (strcmp(_str,"-guid_info") == 0) {
                    cmd = _wrap_sacGuidRec_guid_info_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_sacGuidRec_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lid -block_num -resv -reserved -guid_info  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lid -block_num -resv -reserved -guid_info  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_sacGuidRec_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacGuidRec_block_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-block_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacGuidRec_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacGuidRec_reserved_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-reserved ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_sacGuidRec_guid_info_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid_info ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure get set getTable delete obj_delete }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsacGuidRecCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    sacGuidRec * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_sacGuidRec_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_sacGuidRec_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a sacGuidRec object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsacGuidRecMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsm_node_info_base_version_set(_swigobj,_swigval) (_swigobj->base_version = *(_swigval),_swigval)
static int _wrap_smNodeInfo_base_version_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_base_version_set { smNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_base_version_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_base_version_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_base_version_get(_swigobj) (&_swigobj->base_version)
static int _wrap_smNodeInfo_base_version_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_base_version_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_base_version_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_base_version_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_class_version_set(_swigobj,_swigval) (_swigobj->class_version = *(_swigval),_swigval)
static int _wrap_smNodeInfo_class_version_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_class_version_set { smNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_class_version_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_class_version_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_class_version_get(_swigobj) (&_swigobj->class_version)
static int _wrap_smNodeInfo_class_version_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_class_version_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_class_version_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_class_version_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_node_type_set(_swigobj,_swigval) (_swigobj->node_type = *(_swigval),_swigval)
static int _wrap_smNodeInfo_node_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_node_type_set { smNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_node_type_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_node_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_node_type_get(_swigobj) (&_swigobj->node_type)
static int _wrap_smNodeInfo_node_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_node_type_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_node_type_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_node_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_num_ports_set(_swigobj,_swigval) (_swigobj->num_ports = *(_swigval),_swigval)
static int _wrap_smNodeInfo_num_ports_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_num_ports_set { smNodeInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_num_ports_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_num_ports_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_num_ports_get(_swigobj) (&_swigobj->num_ports)
static int _wrap_smNodeInfo_num_ports_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_num_ports_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_num_ports_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_node_info_num_ports_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_sys_guid_set(_swigobj,_swigval) (_swigobj->sys_guid = *(_swigval),_swigval)
static int _wrap_smNodeInfo_sys_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNodeInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_sys_guid_set { smNodeInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_sys_guid_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_node_info_sys_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_sys_guid_get(_swigobj) (&_swigobj->sys_guid)
static int _wrap_smNodeInfo_sys_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_sys_guid_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_sys_guid_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_node_info_sys_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_node_guid_set(_swigobj,_swigval) (_swigobj->node_guid = *(_swigval),_swigval)
static int _wrap_smNodeInfo_node_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNodeInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_node_guid_set { smNodeInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_node_guid_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_node_info_node_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_node_guid_get(_swigobj) (&_swigobj->node_guid)
static int _wrap_smNodeInfo_node_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_node_guid_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_node_guid_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_node_info_node_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_port_guid_set(_swigobj,_swigval) (_swigobj->port_guid = *(_swigval),_swigval)
static int _wrap_smNodeInfo_port_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNodeInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_port_guid_set { smNodeInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_port_guid_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_node_info_port_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_port_guid_get(_swigobj) (&_swigobj->port_guid)
static int _wrap_smNodeInfo_port_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_port_guid_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_port_guid_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_node_info_port_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_partition_cap_set(_swigobj,_swigval) (_swigobj->partition_cap = *(_swigval),_swigval)
static int _wrap_smNodeInfo_partition_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNodeInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_partition_cap_set { smNodeInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_partition_cap_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_node_info_partition_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_partition_cap_get(_swigobj) (&_swigobj->partition_cap)
static int _wrap_smNodeInfo_partition_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_partition_cap_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_partition_cap_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_node_info_partition_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_device_id_set(_swigobj,_swigval) (_swigobj->device_id = *(_swigval),_swigval)
static int _wrap_smNodeInfo_device_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNodeInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_device_id_set { smNodeInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_device_id_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_node_info_device_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_device_id_get(_swigobj) (&_swigobj->device_id)
static int _wrap_smNodeInfo_device_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_device_id_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_device_id_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_node_info_device_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_revision_set(_swigobj,_swigval) (_swigobj->revision = *(_swigval),_swigval)
static int _wrap_smNodeInfo_revision_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNodeInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_revision_set { smNodeInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_revision_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_node_info_revision_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_revision_get(_swigobj) (&_swigobj->revision)
static int _wrap_smNodeInfo_revision_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_revision_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_revision_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_node_info_revision_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_port_num_vendor_id_set(_swigobj,_swigval) (_swigobj->port_num_vendor_id = *(_swigval),_swigval)
static int _wrap_smNodeInfo_port_num_vendor_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNodeInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_port_num_vendor_id_set { smNodeInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_port_num_vendor_id_set. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_node_info_port_num_vendor_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_info_port_num_vendor_id_get(_swigobj) (&_swigobj->port_num_vendor_id)
static int _wrap_smNodeInfo_port_num_vendor_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNodeInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_port_num_vendor_id_get { smNodeInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_port_num_vendor_id_get. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_node_info_port_num_vendor_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  smNodeInfo_getByDr(smNodeInfo *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smNodeInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_NODE_INFO), 0,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smNodeInfo_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_getByDr { smNodeInfo * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_getByDr. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeInfo_getByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNodeInfo_setByDr(smNodeInfo *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smNodeInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_NODE_INFO), 0,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smNodeInfo_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_setByDr { smNodeInfo * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_setByDr. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeInfo_setByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNodeInfo_getByLid(smNodeInfo *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smNodeInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_NODE_INFO), 0,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smNodeInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_getByLid { smNodeInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_getByLid. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeInfo_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNodeInfo_setByLid(smNodeInfo *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smNodeInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_NODE_INFO), 0,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smNodeInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeInfo_setByLid { smNodeInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeInfo_setByLid. Expected _smNodeInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeInfo_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNodeInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNodeInfo methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNodeInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smNodeInfo_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smNodeInfo_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smNodeInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smNodeInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-base_version") == 0) {
                    cmd = _wrap_smNodeInfo_base_version_set;
                }  else if (strcmp(_str,"-class_version") == 0) {
                    cmd = _wrap_smNodeInfo_class_version_set;
                }  else if (strcmp(_str,"-node_type") == 0) {
                    cmd = _wrap_smNodeInfo_node_type_set;
                }  else if (strcmp(_str,"-num_ports") == 0) {
                    cmd = _wrap_smNodeInfo_num_ports_set;
                }  else if (strcmp(_str,"-sys_guid") == 0) {
                    cmd = _wrap_smNodeInfo_sys_guid_set;
                }  else if (strcmp(_str,"-node_guid") == 0) {
                    cmd = _wrap_smNodeInfo_node_guid_set;
                }  else if (strcmp(_str,"-port_guid") == 0) {
                    cmd = _wrap_smNodeInfo_port_guid_set;
                }  else if (strcmp(_str,"-partition_cap") == 0) {
                    cmd = _wrap_smNodeInfo_partition_cap_set;
                }  else if (strcmp(_str,"-device_id") == 0) {
                    cmd = _wrap_smNodeInfo_device_id_set;
                }  else if (strcmp(_str,"-revision") == 0) {
                    cmd = _wrap_smNodeInfo_revision_set;
                }  else if (strcmp(_str,"-port_num_vendor_id") == 0) {
                    cmd = _wrap_smNodeInfo_port_num_vendor_id_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-base_version") == 0) {
                    cmd = _wrap_smNodeInfo_base_version_get;
                }  else if (strcmp(_str,"-class_version") == 0) {
                    cmd = _wrap_smNodeInfo_class_version_get;
                }  else if (strcmp(_str,"-node_type") == 0) {
                    cmd = _wrap_smNodeInfo_node_type_get;
                }  else if (strcmp(_str,"-num_ports") == 0) {
                    cmd = _wrap_smNodeInfo_num_ports_get;
                }  else if (strcmp(_str,"-sys_guid") == 0) {
                    cmd = _wrap_smNodeInfo_sys_guid_get;
                }  else if (strcmp(_str,"-node_guid") == 0) {
                    cmd = _wrap_smNodeInfo_node_guid_get;
                }  else if (strcmp(_str,"-port_guid") == 0) {
                    cmd = _wrap_smNodeInfo_port_guid_get;
                }  else if (strcmp(_str,"-partition_cap") == 0) {
                    cmd = _wrap_smNodeInfo_partition_cap_get;
                }  else if (strcmp(_str,"-device_id") == 0) {
                    cmd = _wrap_smNodeInfo_device_id_get;
                }  else if (strcmp(_str,"-revision") == 0) {
                    cmd = _wrap_smNodeInfo_revision_get;
                }  else if (strcmp(_str,"-port_num_vendor_id") == 0) {
                    cmd = _wrap_smNodeInfo_port_num_vendor_id_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNodeInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -base_version -class_version -node_type -num_ports -sys_guid -node_guid -port_guid -partition_cap -device_id -revision -port_num_vendor_id  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNodeInfo_base_version_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-base_version ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_class_version_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-class_version ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_node_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_num_ports_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-num_ports ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_sys_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sys_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_node_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-node_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_port_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_partition_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-partition_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_device_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-device_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_revision_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-revision ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNodeInfo_port_num_vendor_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_num_vendor_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNodeInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNodeInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNodeInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNodeInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNodeInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNodeInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsm_port_info_m_key_set(_swigobj,_swigval) (_swigobj->m_key = *(_swigval),_swigval)
static int _wrap_smPortInfo_m_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smPortInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_m_key_set { smPortInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_m_key_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_port_info_m_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_m_key_get(_swigobj) (&_swigobj->m_key)
static int _wrap_smPortInfo_m_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_m_key_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_m_key_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_port_info_m_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_subnet_prefix_set(_swigobj,_swigval) (_swigobj->subnet_prefix = *(_swigval),_swigval)
static int _wrap_smPortInfo_subnet_prefix_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smPortInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_subnet_prefix_set { smPortInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_subnet_prefix_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_port_info_subnet_prefix_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_subnet_prefix_get(_swigobj) (&_swigobj->subnet_prefix)
static int _wrap_smPortInfo_subnet_prefix_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_subnet_prefix_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_subnet_prefix_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_port_info_subnet_prefix_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_base_lid_set(_swigobj,_swigval) (_swigobj->base_lid = *(_swigval),_swigval)
static int _wrap_smPortInfo_base_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_base_lid_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_base_lid_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_base_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_base_lid_get(_swigobj) (&_swigobj->base_lid)
static int _wrap_smPortInfo_base_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_base_lid_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_base_lid_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_base_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_master_sm_base_lid_set(_swigobj,_swigval) (_swigobj->master_sm_base_lid = *(_swigval),_swigval)
static int _wrap_smPortInfo_master_sm_base_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_master_sm_base_lid_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_master_sm_base_lid_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_master_sm_base_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_master_sm_base_lid_get(_swigobj) (&_swigobj->master_sm_base_lid)
static int _wrap_smPortInfo_master_sm_base_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_master_sm_base_lid_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_master_sm_base_lid_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_master_sm_base_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_capability_mask_set(_swigobj,_swigval) (_swigobj->capability_mask = *(_swigval),_swigval)
static int _wrap_smPortInfo_capability_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_capability_mask_set { smPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_capability_mask_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_port_info_capability_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_capability_mask_get(_swigobj) (&_swigobj->capability_mask)
static int _wrap_smPortInfo_capability_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_capability_mask_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_capability_mask_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_port_info_capability_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_diag_code_set(_swigobj,_swigval) (_swigobj->diag_code = *(_swigval),_swigval)
static int _wrap_smPortInfo_diag_code_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_diag_code_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_diag_code_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_diag_code_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_diag_code_get(_swigobj) (&_swigobj->diag_code)
static int _wrap_smPortInfo_diag_code_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_diag_code_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_diag_code_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_diag_code_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_m_key_lease_period_set(_swigobj,_swigval) (_swigobj->m_key_lease_period = *(_swigval),_swigval)
static int _wrap_smPortInfo_m_key_lease_period_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_m_key_lease_period_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_m_key_lease_period_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_m_key_lease_period_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_m_key_lease_period_get(_swigobj) (&_swigobj->m_key_lease_period)
static int _wrap_smPortInfo_m_key_lease_period_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_m_key_lease_period_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_m_key_lease_period_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_m_key_lease_period_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_local_port_num_set(_swigobj,_swigval) (_swigobj->local_port_num = *(_swigval),_swigval)
static int _wrap_smPortInfo_local_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_local_port_num_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_local_port_num_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_local_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_local_port_num_get(_swigobj) (&_swigobj->local_port_num)
static int _wrap_smPortInfo_local_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_local_port_num_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_local_port_num_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_local_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_width_enabled_set(_swigobj,_swigval) (_swigobj->link_width_enabled = *(_swigval),_swigval)
static int _wrap_smPortInfo_link_width_enabled_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_width_enabled_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_width_enabled_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_width_enabled_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_width_enabled_get(_swigobj) (&_swigobj->link_width_enabled)
static int _wrap_smPortInfo_link_width_enabled_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_width_enabled_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_width_enabled_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_width_enabled_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_width_supported_set(_swigobj,_swigval) (_swigobj->link_width_supported = *(_swigval),_swigval)
static int _wrap_smPortInfo_link_width_supported_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_width_supported_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_width_supported_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_width_supported_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_width_supported_get(_swigobj) (&_swigobj->link_width_supported)
static int _wrap_smPortInfo_link_width_supported_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_width_supported_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_width_supported_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_width_supported_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_width_active_set(_swigobj,_swigval) (_swigobj->link_width_active = *(_swigval),_swigval)
static int _wrap_smPortInfo_link_width_active_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_width_active_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_width_active_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_width_active_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_width_active_get(_swigobj) (&_swigobj->link_width_active)
static int _wrap_smPortInfo_link_width_active_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_width_active_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_width_active_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_width_active_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_state_info1_set(_swigobj,_swigval) (_swigobj->state_info1 = *(_swigval),_swigval)
static int _wrap_smPortInfo_state_info1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_state_info1_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_state_info1_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_state_info1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_state_info1_get(_swigobj) (&_swigobj->state_info1)
static int _wrap_smPortInfo_state_info1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_state_info1_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_state_info1_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_state_info1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_state_info2_set(_swigobj,_swigval) (_swigobj->state_info2 = *(_swigval),_swigval)
static int _wrap_smPortInfo_state_info2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_state_info2_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_state_info2_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_state_info2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_state_info2_get(_swigobj) (&_swigobj->state_info2)
static int _wrap_smPortInfo_state_info2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_state_info2_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_state_info2_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_state_info2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_mkey_lmc_set(_swigobj,_swigval) (_swigobj->mkey_lmc = *(_swigval),_swigval)
static int _wrap_smPortInfo_mkey_lmc_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_mkey_lmc_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_mkey_lmc_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_mkey_lmc_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_mkey_lmc_get(_swigobj) (&_swigobj->mkey_lmc)
static int _wrap_smPortInfo_mkey_lmc_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_mkey_lmc_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_mkey_lmc_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_mkey_lmc_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_speed_set(_swigobj,_swigval) (_swigobj->link_speed = *(_swigval),_swigval)
static int _wrap_smPortInfo_link_speed_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_speed_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_speed_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_speed_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_link_speed_get(_swigobj) (&_swigobj->link_speed)
static int _wrap_smPortInfo_link_speed_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_link_speed_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_link_speed_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_link_speed_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_mtu_smsl_set(_swigobj,_swigval) (_swigobj->mtu_smsl = *(_swigval),_swigval)
static int _wrap_smPortInfo_mtu_smsl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_mtu_smsl_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_mtu_smsl_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_mtu_smsl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_mtu_smsl_get(_swigobj) (&_swigobj->mtu_smsl)
static int _wrap_smPortInfo_mtu_smsl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_mtu_smsl_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_mtu_smsl_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_mtu_smsl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_cap_set(_swigobj,_swigval) (_swigobj->vl_cap = *(_swigval),_swigval)
static int _wrap_smPortInfo_vl_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_cap_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_cap_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_cap_get(_swigobj) (&_swigobj->vl_cap)
static int _wrap_smPortInfo_vl_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_cap_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_cap_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_high_limit_set(_swigobj,_swigval) (_swigobj->vl_high_limit = *(_swigval),_swigval)
static int _wrap_smPortInfo_vl_high_limit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_high_limit_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_high_limit_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_high_limit_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_high_limit_get(_swigobj) (&_swigobj->vl_high_limit)
static int _wrap_smPortInfo_vl_high_limit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_high_limit_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_high_limit_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_high_limit_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_arb_high_cap_set(_swigobj,_swigval) (_swigobj->vl_arb_high_cap = *(_swigval),_swigval)
static int _wrap_smPortInfo_vl_arb_high_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_arb_high_cap_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_arb_high_cap_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_arb_high_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_arb_high_cap_get(_swigobj) (&_swigobj->vl_arb_high_cap)
static int _wrap_smPortInfo_vl_arb_high_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_arb_high_cap_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_arb_high_cap_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_arb_high_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_arb_low_cap_set(_swigobj,_swigval) (_swigobj->vl_arb_low_cap = *(_swigval),_swigval)
static int _wrap_smPortInfo_vl_arb_low_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_arb_low_cap_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_arb_low_cap_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_arb_low_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_arb_low_cap_get(_swigobj) (&_swigobj->vl_arb_low_cap)
static int _wrap_smPortInfo_vl_arb_low_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_arb_low_cap_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_arb_low_cap_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_arb_low_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_mtu_cap_set(_swigobj,_swigval) (_swigobj->mtu_cap = *(_swigval),_swigval)
static int _wrap_smPortInfo_mtu_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_mtu_cap_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_mtu_cap_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_mtu_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_mtu_cap_get(_swigobj) (&_swigobj->mtu_cap)
static int _wrap_smPortInfo_mtu_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_mtu_cap_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_mtu_cap_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_mtu_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_stall_life_set(_swigobj,_swigval) (_swigobj->vl_stall_life = *(_swigval),_swigval)
static int _wrap_smPortInfo_vl_stall_life_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_stall_life_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_stall_life_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_stall_life_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_stall_life_get(_swigobj) (&_swigobj->vl_stall_life)
static int _wrap_smPortInfo_vl_stall_life_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_stall_life_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_stall_life_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_stall_life_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_enforce_set(_swigobj,_swigval) (_swigobj->vl_enforce = *(_swigval),_swigval)
static int _wrap_smPortInfo_vl_enforce_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_enforce_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_enforce_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_enforce_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_vl_enforce_get(_swigobj) (&_swigobj->vl_enforce)
static int _wrap_smPortInfo_vl_enforce_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_vl_enforce_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_vl_enforce_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_vl_enforce_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_m_key_violations_set(_swigobj,_swigval) (_swigobj->m_key_violations = *(_swigval),_swigval)
static int _wrap_smPortInfo_m_key_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_m_key_violations_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_m_key_violations_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_m_key_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_m_key_violations_get(_swigobj) (&_swigobj->m_key_violations)
static int _wrap_smPortInfo_m_key_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_m_key_violations_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_m_key_violations_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_m_key_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_p_key_violations_set(_swigobj,_swigval) (_swigobj->p_key_violations = *(_swigval),_swigval)
static int _wrap_smPortInfo_p_key_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_p_key_violations_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_p_key_violations_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_p_key_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_p_key_violations_get(_swigobj) (&_swigobj->p_key_violations)
static int _wrap_smPortInfo_p_key_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_p_key_violations_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_p_key_violations_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_p_key_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_q_key_violations_set(_swigobj,_swigval) (_swigobj->q_key_violations = *(_swigval),_swigval)
static int _wrap_smPortInfo_q_key_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_q_key_violations_set { smPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_q_key_violations_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_q_key_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_q_key_violations_get(_swigobj) (&_swigobj->q_key_violations)
static int _wrap_smPortInfo_q_key_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_q_key_violations_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_q_key_violations_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_port_info_q_key_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_guid_cap_set(_swigobj,_swigval) (_swigobj->guid_cap = *(_swigval),_swigval)
static int _wrap_smPortInfo_guid_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_guid_cap_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_guid_cap_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_guid_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_guid_cap_get(_swigobj) (&_swigobj->guid_cap)
static int _wrap_smPortInfo_guid_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_guid_cap_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_guid_cap_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_guid_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_subnet_timeout_set(_swigobj,_swigval) (_swigobj->subnet_timeout = *(_swigval),_swigval)
static int _wrap_smPortInfo_subnet_timeout_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_subnet_timeout_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_subnet_timeout_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_subnet_timeout_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_subnet_timeout_get(_swigobj) (&_swigobj->subnet_timeout)
static int _wrap_smPortInfo_subnet_timeout_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_subnet_timeout_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_subnet_timeout_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_subnet_timeout_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_resp_time_value_set(_swigobj,_swigval) (_swigobj->resp_time_value = *(_swigval),_swigval)
static int _wrap_smPortInfo_resp_time_value_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_resp_time_value_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_resp_time_value_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_resp_time_value_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_resp_time_value_get(_swigobj) (&_swigobj->resp_time_value)
static int _wrap_smPortInfo_resp_time_value_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_resp_time_value_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_resp_time_value_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_resp_time_value_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_error_threshold_set(_swigobj,_swigval) (_swigobj->error_threshold = *(_swigval),_swigval)
static int _wrap_smPortInfo_error_threshold_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_error_threshold_set { smPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_error_threshold_set. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_error_threshold_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_port_info_error_threshold_get(_swigobj) (&_swigobj->error_threshold)
static int _wrap_smPortInfo_error_threshold_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_error_threshold_get { smPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_error_threshold_get. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_port_info_error_threshold_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  smPortInfo_getByDr(smPortInfo *self,ibsm_dr_path_t * dr,uint8_t  portNum) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smPortInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_PORT_INFO), portNum, IB_MAD_METHOD_GET));
  }
static int _wrap_smPortInfo_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPortInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_getByDr { smPortInfo * } dr portNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_getByDr. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPortInfo_getByDr(_arg0,_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smPortInfo_setByDr(smPortInfo *self,ibsm_dr_path_t * dr,uint8_t  portNum) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smPortInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_PORT_INFO), portNum, IB_MAD_METHOD_SET));
  }
static int _wrap_smPortInfo_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPortInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_setByDr { smPortInfo * } dr portNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_setByDr. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPortInfo_setByDr(_arg0,_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smPortInfo_getByLid(smPortInfo *self,uint16_t  lid,uint8_t  portNum) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smPortInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_PORT_INFO), portNum, IB_MAD_METHOD_GET));
  }
static int _wrap_smPortInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPortInfo * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_getByLid { smPortInfo * } lid portNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_getByLid. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPortInfo_getByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smPortInfo_setByLid(smPortInfo *self,uint16_t  lid,uint8_t  portNum) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smPortInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_PORT_INFO), portNum, IB_MAD_METHOD_SET));
  }
static int _wrap_smPortInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPortInfo * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPortInfo_setByLid { smPortInfo * } lid portNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPortInfo_setByLid. Expected _smPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPortInfo_setByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmPortInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smPortInfo methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smPortInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smPortInfo_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smPortInfo_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smPortInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smPortInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-m_key") == 0) {
                    cmd = _wrap_smPortInfo_m_key_set;
                }  else if (strcmp(_str,"-subnet_prefix") == 0) {
                    cmd = _wrap_smPortInfo_subnet_prefix_set;
                }  else if (strcmp(_str,"-base_lid") == 0) {
                    cmd = _wrap_smPortInfo_base_lid_set;
                }  else if (strcmp(_str,"-master_sm_base_lid") == 0) {
                    cmd = _wrap_smPortInfo_master_sm_base_lid_set;
                }  else if (strcmp(_str,"-capability_mask") == 0) {
                    cmd = _wrap_smPortInfo_capability_mask_set;
                }  else if (strcmp(_str,"-diag_code") == 0) {
                    cmd = _wrap_smPortInfo_diag_code_set;
                }  else if (strcmp(_str,"-m_key_lease_period") == 0) {
                    cmd = _wrap_smPortInfo_m_key_lease_period_set;
                }  else if (strcmp(_str,"-local_port_num") == 0) {
                    cmd = _wrap_smPortInfo_local_port_num_set;
                }  else if (strcmp(_str,"-link_width_enabled") == 0) {
                    cmd = _wrap_smPortInfo_link_width_enabled_set;
                }  else if (strcmp(_str,"-link_width_supported") == 0) {
                    cmd = _wrap_smPortInfo_link_width_supported_set;
                }  else if (strcmp(_str,"-link_width_active") == 0) {
                    cmd = _wrap_smPortInfo_link_width_active_set;
                }  else if (strcmp(_str,"-state_info1") == 0) {
                    cmd = _wrap_smPortInfo_state_info1_set;
                }  else if (strcmp(_str,"-state_info2") == 0) {
                    cmd = _wrap_smPortInfo_state_info2_set;
                }  else if (strcmp(_str,"-mkey_lmc") == 0) {
                    cmd = _wrap_smPortInfo_mkey_lmc_set;
                }  else if (strcmp(_str,"-link_speed") == 0) {
                    cmd = _wrap_smPortInfo_link_speed_set;
                }  else if (strcmp(_str,"-mtu_smsl") == 0) {
                    cmd = _wrap_smPortInfo_mtu_smsl_set;
                }  else if (strcmp(_str,"-vl_cap") == 0) {
                    cmd = _wrap_smPortInfo_vl_cap_set;
                }  else if (strcmp(_str,"-vl_high_limit") == 0) {
                    cmd = _wrap_smPortInfo_vl_high_limit_set;
                }  else if (strcmp(_str,"-vl_arb_high_cap") == 0) {
                    cmd = _wrap_smPortInfo_vl_arb_high_cap_set;
                }  else if (strcmp(_str,"-vl_arb_low_cap") == 0) {
                    cmd = _wrap_smPortInfo_vl_arb_low_cap_set;
                }  else if (strcmp(_str,"-mtu_cap") == 0) {
                    cmd = _wrap_smPortInfo_mtu_cap_set;
                }  else if (strcmp(_str,"-vl_stall_life") == 0) {
                    cmd = _wrap_smPortInfo_vl_stall_life_set;
                }  else if (strcmp(_str,"-vl_enforce") == 0) {
                    cmd = _wrap_smPortInfo_vl_enforce_set;
                }  else if (strcmp(_str,"-m_key_violations") == 0) {
                    cmd = _wrap_smPortInfo_m_key_violations_set;
                }  else if (strcmp(_str,"-p_key_violations") == 0) {
                    cmd = _wrap_smPortInfo_p_key_violations_set;
                }  else if (strcmp(_str,"-q_key_violations") == 0) {
                    cmd = _wrap_smPortInfo_q_key_violations_set;
                }  else if (strcmp(_str,"-guid_cap") == 0) {
                    cmd = _wrap_smPortInfo_guid_cap_set;
                }  else if (strcmp(_str,"-subnet_timeout") == 0) {
                    cmd = _wrap_smPortInfo_subnet_timeout_set;
                }  else if (strcmp(_str,"-resp_time_value") == 0) {
                    cmd = _wrap_smPortInfo_resp_time_value_set;
                }  else if (strcmp(_str,"-error_threshold") == 0) {
                    cmd = _wrap_smPortInfo_error_threshold_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-m_key") == 0) {
                    cmd = _wrap_smPortInfo_m_key_get;
                }  else if (strcmp(_str,"-subnet_prefix") == 0) {
                    cmd = _wrap_smPortInfo_subnet_prefix_get;
                }  else if (strcmp(_str,"-base_lid") == 0) {
                    cmd = _wrap_smPortInfo_base_lid_get;
                }  else if (strcmp(_str,"-master_sm_base_lid") == 0) {
                    cmd = _wrap_smPortInfo_master_sm_base_lid_get;
                }  else if (strcmp(_str,"-capability_mask") == 0) {
                    cmd = _wrap_smPortInfo_capability_mask_get;
                }  else if (strcmp(_str,"-diag_code") == 0) {
                    cmd = _wrap_smPortInfo_diag_code_get;
                }  else if (strcmp(_str,"-m_key_lease_period") == 0) {
                    cmd = _wrap_smPortInfo_m_key_lease_period_get;
                }  else if (strcmp(_str,"-local_port_num") == 0) {
                    cmd = _wrap_smPortInfo_local_port_num_get;
                }  else if (strcmp(_str,"-link_width_enabled") == 0) {
                    cmd = _wrap_smPortInfo_link_width_enabled_get;
                }  else if (strcmp(_str,"-link_width_supported") == 0) {
                    cmd = _wrap_smPortInfo_link_width_supported_get;
                }  else if (strcmp(_str,"-link_width_active") == 0) {
                    cmd = _wrap_smPortInfo_link_width_active_get;
                }  else if (strcmp(_str,"-state_info1") == 0) {
                    cmd = _wrap_smPortInfo_state_info1_get;
                }  else if (strcmp(_str,"-state_info2") == 0) {
                    cmd = _wrap_smPortInfo_state_info2_get;
                }  else if (strcmp(_str,"-mkey_lmc") == 0) {
                    cmd = _wrap_smPortInfo_mkey_lmc_get;
                }  else if (strcmp(_str,"-link_speed") == 0) {
                    cmd = _wrap_smPortInfo_link_speed_get;
                }  else if (strcmp(_str,"-mtu_smsl") == 0) {
                    cmd = _wrap_smPortInfo_mtu_smsl_get;
                }  else if (strcmp(_str,"-vl_cap") == 0) {
                    cmd = _wrap_smPortInfo_vl_cap_get;
                }  else if (strcmp(_str,"-vl_high_limit") == 0) {
                    cmd = _wrap_smPortInfo_vl_high_limit_get;
                }  else if (strcmp(_str,"-vl_arb_high_cap") == 0) {
                    cmd = _wrap_smPortInfo_vl_arb_high_cap_get;
                }  else if (strcmp(_str,"-vl_arb_low_cap") == 0) {
                    cmd = _wrap_smPortInfo_vl_arb_low_cap_get;
                }  else if (strcmp(_str,"-mtu_cap") == 0) {
                    cmd = _wrap_smPortInfo_mtu_cap_get;
                }  else if (strcmp(_str,"-vl_stall_life") == 0) {
                    cmd = _wrap_smPortInfo_vl_stall_life_get;
                }  else if (strcmp(_str,"-vl_enforce") == 0) {
                    cmd = _wrap_smPortInfo_vl_enforce_get;
                }  else if (strcmp(_str,"-m_key_violations") == 0) {
                    cmd = _wrap_smPortInfo_m_key_violations_get;
                }  else if (strcmp(_str,"-p_key_violations") == 0) {
                    cmd = _wrap_smPortInfo_p_key_violations_get;
                }  else if (strcmp(_str,"-q_key_violations") == 0) {
                    cmd = _wrap_smPortInfo_q_key_violations_get;
                }  else if (strcmp(_str,"-guid_cap") == 0) {
                    cmd = _wrap_smPortInfo_guid_cap_get;
                }  else if (strcmp(_str,"-subnet_timeout") == 0) {
                    cmd = _wrap_smPortInfo_subnet_timeout_get;
                }  else if (strcmp(_str,"-resp_time_value") == 0) {
                    cmd = _wrap_smPortInfo_resp_time_value_get;
                }  else if (strcmp(_str,"-error_threshold") == 0) {
                    cmd = _wrap_smPortInfo_error_threshold_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smPortInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -m_key -subnet_prefix -base_lid -master_sm_base_lid -capability_mask -diag_code -m_key_lease_period -local_port_num -link_width_enabled -link_width_supported -link_width_active -state_info1 -state_info2 -mkey_lmc -link_speed -mtu_smsl -vl_cap -vl_high_limit -vl_arb_high_cap -vl_arb_low_cap -mtu_cap -vl_stall_life -vl_enforce -m_key_violations -p_key_violations -q_key_violations -guid_cap -subnet_timeout -resp_time_value -error_threshold  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smPortInfo_m_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_subnet_prefix_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-subnet_prefix ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_base_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-base_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_master_sm_base_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-master_sm_base_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_capability_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-capability_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_diag_code_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-diag_code ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_m_key_lease_period_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key_lease_period ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_local_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-local_port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_link_width_enabled_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_width_enabled ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_link_width_supported_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_width_supported ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_link_width_active_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_width_active ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_state_info1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-state_info1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_state_info2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-state_info2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_mkey_lmc_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mkey_lmc ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_link_speed_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-link_speed ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_mtu_smsl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mtu_smsl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_vl_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_vl_high_limit_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_high_limit ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_vl_arb_high_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_arb_high_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_vl_arb_low_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_arb_low_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_mtu_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mtu_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_vl_stall_life_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_stall_life ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_vl_enforce_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_enforce ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_m_key_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key_violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_p_key_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-p_key_violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_q_key_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-q_key_violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_guid_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_subnet_timeout_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-subnet_timeout ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_resp_time_value_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resp_time_value ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smPortInfo_error_threshold_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-error_threshold ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmPortInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smPortInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smPortInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smPortInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smPortInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmPortInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsm_switch_info_lin_cap_set(_swigobj,_swigval) (_swigobj->lin_cap = *(_swigval),_swigval)
static int _wrap_smSwInfo_lin_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_lin_cap_set { smSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_lin_cap_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_lin_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_lin_cap_get(_swigobj) (&_swigobj->lin_cap)
static int _wrap_smSwInfo_lin_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_lin_cap_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_lin_cap_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_lin_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_rand_cap_set(_swigobj,_swigval) (_swigobj->rand_cap = *(_swigval),_swigval)
static int _wrap_smSwInfo_rand_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_rand_cap_set { smSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_rand_cap_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_rand_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_rand_cap_get(_swigobj) (&_swigobj->rand_cap)
static int _wrap_smSwInfo_rand_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_rand_cap_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_rand_cap_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_rand_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_mcast_cap_set(_swigobj,_swigval) (_swigobj->mcast_cap = *(_swigval),_swigval)
static int _wrap_smSwInfo_mcast_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_mcast_cap_set { smSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_mcast_cap_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_mcast_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_mcast_cap_get(_swigobj) (&_swigobj->mcast_cap)
static int _wrap_smSwInfo_mcast_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_mcast_cap_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_mcast_cap_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_mcast_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_lin_top_set(_swigobj,_swigval) (_swigobj->lin_top = *(_swigval),_swigval)
static int _wrap_smSwInfo_lin_top_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_lin_top_set { smSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_lin_top_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_lin_top_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_lin_top_get(_swigobj) (&_swigobj->lin_top)
static int _wrap_smSwInfo_lin_top_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_lin_top_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_lin_top_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_lin_top_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_def_port_set(_swigobj,_swigval) (_swigobj->def_port = *(_swigval),_swigval)
static int _wrap_smSwInfo_def_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_def_port_set { smSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_def_port_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_def_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_def_port_get(_swigobj) (&_swigobj->def_port)
static int _wrap_smSwInfo_def_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_def_port_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_def_port_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_def_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_def_mcast_pri_port_set(_swigobj,_swigval) (_swigobj->def_mcast_pri_port = *(_swigval),_swigval)
static int _wrap_smSwInfo_def_mcast_pri_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_def_mcast_pri_port_set { smSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_def_mcast_pri_port_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_def_mcast_pri_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_def_mcast_pri_port_get(_swigobj) (&_swigobj->def_mcast_pri_port)
static int _wrap_smSwInfo_def_mcast_pri_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_def_mcast_pri_port_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_def_mcast_pri_port_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_def_mcast_pri_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_def_mcast_not_port_set(_swigobj,_swigval) (_swigobj->def_mcast_not_port = *(_swigval),_swigval)
static int _wrap_smSwInfo_def_mcast_not_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_def_mcast_not_port_set { smSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_def_mcast_not_port_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_def_mcast_not_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_def_mcast_not_port_get(_swigobj) (&_swigobj->def_mcast_not_port)
static int _wrap_smSwInfo_def_mcast_not_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_def_mcast_not_port_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_def_mcast_not_port_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_def_mcast_not_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_life_state_set(_swigobj,_swigval) (_swigobj->life_state = *(_swigval),_swigval)
static int _wrap_smSwInfo_life_state_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_life_state_set { smSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_life_state_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_life_state_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_life_state_get(_swigobj) (&_swigobj->life_state)
static int _wrap_smSwInfo_life_state_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_life_state_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_life_state_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_life_state_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_lids_per_port_set(_swigobj,_swigval) (_swigobj->lids_per_port = *(_swigval),_swigval)
static int _wrap_smSwInfo_lids_per_port_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_lids_per_port_set { smSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_lids_per_port_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_lids_per_port_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_lids_per_port_get(_swigobj) (&_swigobj->lids_per_port)
static int _wrap_smSwInfo_lids_per_port_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_lids_per_port_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_lids_per_port_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_lids_per_port_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_enforce_cap_set(_swigobj,_swigval) (_swigobj->enforce_cap = *(_swigval),_swigval)
static int _wrap_smSwInfo_enforce_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_enforce_cap_set { smSwInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_enforce_cap_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_enforce_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_enforce_cap_get(_swigobj) (&_swigobj->enforce_cap)
static int _wrap_smSwInfo_enforce_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_enforce_cap_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_enforce_cap_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_switch_info_enforce_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_flags_set(_swigobj,_swigval) (_swigobj->flags = *(_swigval),_swigval)
static int _wrap_smSwInfo_flags_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_flags_set { smSwInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_flags_set. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_flags_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_switch_info_flags_get(_swigobj) (&_swigobj->flags)
static int _wrap_smSwInfo_flags_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSwInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_flags_get { smSwInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_flags_get. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_switch_info_flags_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  smSwInfo_getByDr(smSwInfo *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smSwInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_SWITCH_INFO), 0,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smSwInfo_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSwInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_getByDr { smSwInfo * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_getByDr. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSwInfo_getByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSwInfo_setByDr(smSwInfo *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smSwInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_SWITCH_INFO), 0,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smSwInfo_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSwInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_setByDr { smSwInfo * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_setByDr. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSwInfo_setByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSwInfo_getByLid(smSwInfo *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smSwInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_SWITCH_INFO), 0,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smSwInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSwInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_getByLid { smSwInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_getByLid. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSwInfo_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSwInfo_setByLid(smSwInfo *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smSwInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_SWITCH_INFO), 0,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smSwInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSwInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSwInfo_setByLid { smSwInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSwInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSwInfo_setByLid. Expected _smSwInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSwInfo_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmSwInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smSwInfo methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smSwInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smSwInfo_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smSwInfo_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smSwInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smSwInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lin_cap") == 0) {
                    cmd = _wrap_smSwInfo_lin_cap_set;
                }  else if (strcmp(_str,"-rand_cap") == 0) {
                    cmd = _wrap_smSwInfo_rand_cap_set;
                }  else if (strcmp(_str,"-mcast_cap") == 0) {
                    cmd = _wrap_smSwInfo_mcast_cap_set;
                }  else if (strcmp(_str,"-lin_top") == 0) {
                    cmd = _wrap_smSwInfo_lin_top_set;
                }  else if (strcmp(_str,"-def_port") == 0) {
                    cmd = _wrap_smSwInfo_def_port_set;
                }  else if (strcmp(_str,"-def_mcast_pri_port") == 0) {
                    cmd = _wrap_smSwInfo_def_mcast_pri_port_set;
                }  else if (strcmp(_str,"-def_mcast_not_port") == 0) {
                    cmd = _wrap_smSwInfo_def_mcast_not_port_set;
                }  else if (strcmp(_str,"-life_state") == 0) {
                    cmd = _wrap_smSwInfo_life_state_set;
                }  else if (strcmp(_str,"-lids_per_port") == 0) {
                    cmd = _wrap_smSwInfo_lids_per_port_set;
                }  else if (strcmp(_str,"-enforce_cap") == 0) {
                    cmd = _wrap_smSwInfo_enforce_cap_set;
                }  else if (strcmp(_str,"-flags") == 0) {
                    cmd = _wrap_smSwInfo_flags_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lin_cap") == 0) {
                    cmd = _wrap_smSwInfo_lin_cap_get;
                }  else if (strcmp(_str,"-rand_cap") == 0) {
                    cmd = _wrap_smSwInfo_rand_cap_get;
                }  else if (strcmp(_str,"-mcast_cap") == 0) {
                    cmd = _wrap_smSwInfo_mcast_cap_get;
                }  else if (strcmp(_str,"-lin_top") == 0) {
                    cmd = _wrap_smSwInfo_lin_top_get;
                }  else if (strcmp(_str,"-def_port") == 0) {
                    cmd = _wrap_smSwInfo_def_port_get;
                }  else if (strcmp(_str,"-def_mcast_pri_port") == 0) {
                    cmd = _wrap_smSwInfo_def_mcast_pri_port_get;
                }  else if (strcmp(_str,"-def_mcast_not_port") == 0) {
                    cmd = _wrap_smSwInfo_def_mcast_not_port_get;
                }  else if (strcmp(_str,"-life_state") == 0) {
                    cmd = _wrap_smSwInfo_life_state_get;
                }  else if (strcmp(_str,"-lids_per_port") == 0) {
                    cmd = _wrap_smSwInfo_lids_per_port_get;
                }  else if (strcmp(_str,"-enforce_cap") == 0) {
                    cmd = _wrap_smSwInfo_enforce_cap_get;
                }  else if (strcmp(_str,"-flags") == 0) {
                    cmd = _wrap_smSwInfo_flags_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smSwInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lin_cap -rand_cap -mcast_cap -lin_top -def_port -def_mcast_pri_port -def_mcast_not_port -life_state -lids_per_port -enforce_cap -flags  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smSwInfo_lin_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lin_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_rand_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-rand_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_mcast_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mcast_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_lin_top_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lin_top ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_def_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-def_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_def_mcast_pri_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-def_mcast_pri_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_def_mcast_not_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-def_mcast_not_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_life_state_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-life_state ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_lids_per_port_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lids_per_port ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_enforce_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-enforce_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSwInfo_flags_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-flags ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmSwInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smSwInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smSwInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smSwInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smSwInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmSwInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static uint8_array_t * _ibsm_lft_block_lft_set(smLftBlock *obj, uint8_array_t val[64]) {
{
	int i;
	for (i=0; i <64 ; i++) {
		obj->lft[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_smLftBlock_lft_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smLftBlock * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[64];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smLftBlock_lft_set { smLftBlock * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smLftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smLftBlock_lft_set. Expected _smLftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 64))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 64; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ibsm_lft_block_lft_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <64 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibsm_lft_block_lft_get(_swigobj) ((uint8_array_t *) _swigobj->lft)
static int _wrap_smLftBlock_lft_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smLftBlock * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smLftBlock_lft_get { smLftBlock * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smLftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smLftBlock_lft_get. Expected _smLftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ibsm_lft_block_lft_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <64 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static int  smLftBlock_getByDr(smLftBlock *self,ibsm_dr_path_t * dr,uint16_t  blockNum) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smLftBlock),
                               dr, CL_NTOH16(IB_MAD_ATTR_LIN_FWD_TBL), blockNum, IB_MAD_METHOD_GET));
  }
static int _wrap_smLftBlock_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smLftBlock * _arg0;
    ibsm_dr_path_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smLftBlock_getByDr { smLftBlock * } dr blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smLftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smLftBlock_getByDr. Expected _smLftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smLftBlock_getByDr(_arg0,_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smLftBlock_setByDr(smLftBlock *self,ibsm_dr_path_t * dr,uint16_t  blockNum) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smLftBlock),
                               dr, CL_NTOH16(IB_MAD_ATTR_LIN_FWD_TBL), blockNum, IB_MAD_METHOD_SET));
  }
static int _wrap_smLftBlock_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smLftBlock * _arg0;
    ibsm_dr_path_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smLftBlock_setByDr { smLftBlock * } dr blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smLftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smLftBlock_setByDr. Expected _smLftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smLftBlock_setByDr(_arg0,_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smLftBlock_getByLid(smLftBlock *self,uint16_t  lid,uint16_t  blockNum) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smLftBlock),
                                lid, CL_NTOH16(IB_MAD_ATTR_LIN_FWD_TBL), blockNum, IB_MAD_METHOD_GET));
  }
static int _wrap_smLftBlock_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smLftBlock * _arg0;
    uint16_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smLftBlock_getByLid { smLftBlock * } lid blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smLftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smLftBlock_getByLid. Expected _smLftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smLftBlock_getByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smLftBlock_setByLid(smLftBlock *self,uint16_t  lid,uint16_t  blockNum) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smLftBlock),
                                lid, CL_NTOH16(IB_MAD_ATTR_LIN_FWD_TBL), blockNum, IB_MAD_METHOD_SET));
  }
static int _wrap_smLftBlock_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smLftBlock * _arg0;
    uint16_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smLftBlock_setByLid { smLftBlock * } lid blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smLftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smLftBlock_setByLid. Expected _smLftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smLftBlock_setByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmLftBlockMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smLftBlock methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smLftBlock_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smLftBlock_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smLftBlock_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smLftBlock_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smLftBlock_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-lft") == 0) {
                    cmd = _wrap_smLftBlock_lft_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -lft  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -lft  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-lft") == 0) {
                    cmd = _wrap_smLftBlock_lft_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smLftBlock_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -lft  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -lft  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smLftBlock_lft_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lft ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmLftBlockCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smLftBlock * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smLftBlock_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smLftBlock_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smLftBlock object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmLftBlockMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_net16_array_t * _ibsm_mft_block_mft_set(smMftBlock *obj, ib_net16_array_t val[32]) {
{
	int i;
	for (i=0; i <32 ; i++) {
     obj->mft[i] = *(val+i);
	}
}
    return (ib_net16_array_t *) val;
}
static int _wrap_smMftBlock_mft_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    smMftBlock * _arg0;
    ib_net16_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  entrys[32];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smMftBlock_mft_set { smMftBlock * } { ib_net16_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smMftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smMftBlock_mft_set. Expected _smMftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 32))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 65535)
    {
      printf("Error: wrong format or out of range value for expected ib_net16_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton16(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 32; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ibsm_mft_block_mft_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibsm_mft_block_mft_get(_swigobj) ((ib_net16_array_t *) _swigobj->mft)
static int _wrap_smMftBlock_mft_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    smMftBlock * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smMftBlock_mft_get { smMftBlock * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smMftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smMftBlock_mft_get. Expected _smMftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ibsm_mft_block_mft_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static int  smMftBlock_getByDr(smMftBlock *self,ibsm_dr_path_t * dr,uint16_t  startLid,uint8_t  startPort) {
    uint32_t attrMod;
    if (smMftGetAttrMod(startLid, startPort, &attrMod) != TCL_OK)
      return TCL_ERROR;
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smMftBlock),
                               dr, CL_NTOH16(IB_MAD_ATTR_MCAST_FWD_TBL), attrMod, IB_MAD_METHOD_GET));
  }
static int _wrap_smMftBlock_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smMftBlock * _arg0;
    ibsm_dr_path_t * _arg1;
    uint16_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smMftBlock_getByDr { smMftBlock * } dr startLid startPort ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smMftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smMftBlock_getByDr. Expected _smMftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smMftBlock_getByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smMftBlock_setByDr(smMftBlock *self,ibsm_dr_path_t * dr,uint16_t  startLid,uint8_t  startPort) {
    uint32_t attrMod;
    if (smMftGetAttrMod(startLid, startPort, &attrMod) != TCL_OK)
      return TCL_ERROR;
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smMftBlock),
                               dr, CL_NTOH16(IB_MAD_ATTR_MCAST_FWD_TBL), attrMod, IB_MAD_METHOD_SET));
  }
static int _wrap_smMftBlock_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smMftBlock * _arg0;
    ibsm_dr_path_t * _arg1;
    uint16_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smMftBlock_setByDr { smMftBlock * } dr startLid startPort ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smMftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smMftBlock_setByDr. Expected _smMftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smMftBlock_setByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smMftBlock_getByLid(smMftBlock *self,uint16_t  lid,uint16_t  startLid,uint8_t  startPort) {
    uint32_t attrMod;
    if (smMftGetAttrMod(startLid, startPort, &attrMod) != TCL_OK)
      return TCL_ERROR;
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smMftBlock),
                                lid, CL_NTOH16(IB_MAD_ATTR_MCAST_FWD_TBL), attrMod, IB_MAD_METHOD_GET));
  }
static int _wrap_smMftBlock_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smMftBlock * _arg0;
    uint16_t * _arg1;
    uint16_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint16_t  temp0;
    uint8_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smMftBlock_getByLid { smMftBlock * } lid startLid startPort ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smMftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smMftBlock_getByLid. Expected _smMftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smMftBlock_getByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smMftBlock_setByLid(smMftBlock *self,uint16_t  lid,uint16_t  startLid,uint8_t  startPort) {
    uint32_t attrMod;
    if (smMftGetAttrMod(startLid, startPort, &attrMod) != TCL_OK)
      return TCL_ERROR;
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smMftBlock),
                                lid, CL_NTOH16(IB_MAD_ATTR_MCAST_FWD_TBL), attrMod, IB_MAD_METHOD_SET));
  }
static int _wrap_smMftBlock_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smMftBlock * _arg0;
    uint16_t * _arg1;
    uint16_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint16_t  temp0;
    uint8_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smMftBlock_setByLid { smMftBlock * } lid startLid startPort ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smMftBlock_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smMftBlock_setByLid. Expected _smMftBlock_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smMftBlock_setByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmMftBlockMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smMftBlock methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smMftBlock_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smMftBlock_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smMftBlock_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smMftBlock_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smMftBlock_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-mft") == 0) {
                    cmd = _wrap_smMftBlock_mft_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -mft  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -mft  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-mft") == 0) {
                    cmd = _wrap_smMftBlock_mft_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smMftBlock_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -mft  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -mft  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smMftBlock_mft_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mft ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmMftBlockCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smMftBlock * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smMftBlock_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smMftBlock_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smMftBlock object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmMftBlockMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_net64_array_t * _ibsm_guid_info_guid_set(smGuidInfo *obj, ib_net64_array_t val[GUID_TABLE_MAX_ENTRIES]) {
{
	int i;
	for (i=0; i <GUID_TABLE_MAX_ENTRIES ; i++) {
     obj->guid[i] = *(val+i);
	}
}
    return (ib_net64_array_t *) val;
}
static int _wrap_smGuidInfo_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_array_t * _result;
    smGuidInfo * _arg0;
    ib_net64_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net64_t  entrys[GUID_TABLE_MAX_ENTRIES];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smGuidInfo_guid_set { smGuidInfo * } { ib_net64_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smGuidInfo_guid_set. Expected _smGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  uint64_t entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < GUID_TABLE_MAX_ENTRIES))
  {
    entry = strtoll(p_ch, NULL, 0);
    if (entry > 0xffffffffffffffffULL )
    {
      printf("Error: wrong format or out of range value for expected ib_net64_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton64(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < GUID_TABLE_MAX_ENTRIES; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_array_t *)_ibsm_guid_info_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[20];
  for (i=0; i <GUID_TABLE_MAX_ENTRIES ; i++) {
    sprintf(buff, "0x%016" PRIx64 " ", cl_ntoh64(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibsm_guid_info_guid_get(_swigobj) ((ib_net64_array_t *) _swigobj->guid)
static int _wrap_smGuidInfo_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_array_t * _result;
    smGuidInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smGuidInfo_guid_get { smGuidInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smGuidInfo_guid_get. Expected _smGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_array_t *)_ibsm_guid_info_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[20];
  for (i=0; i <GUID_TABLE_MAX_ENTRIES ; i++) {
    sprintf(buff, "0x%016" PRIx64 " ", cl_ntoh64(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static int  smGuidInfo_getByDr(smGuidInfo *self,ibsm_dr_path_t * dr,uint16_t  blockNum) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smGuidInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_GUID_INFO), blockNum,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smGuidInfo_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smGuidInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smGuidInfo_getByDr { smGuidInfo * } dr blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smGuidInfo_getByDr. Expected _smGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smGuidInfo_getByDr(_arg0,_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smGuidInfo_setByDr(smGuidInfo *self,ibsm_dr_path_t * dr,uint16_t  blockNum) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smGuidInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_GUID_INFO), blockNum,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smGuidInfo_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smGuidInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smGuidInfo_setByDr { smGuidInfo * } dr blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smGuidInfo_setByDr. Expected _smGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smGuidInfo_setByDr(_arg0,_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smGuidInfo_getByLid(smGuidInfo *self,uint16_t  lid,uint16_t  blockNum) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smGuidInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_GUID_INFO), blockNum,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smGuidInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smGuidInfo * _arg0;
    uint16_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smGuidInfo_getByLid { smGuidInfo * } lid blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smGuidInfo_getByLid. Expected _smGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smGuidInfo_getByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smGuidInfo_setByLid(smGuidInfo *self,uint16_t  lid,uint16_t  blockNum) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smGuidInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_GUID_INFO), blockNum,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smGuidInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smGuidInfo * _arg0;
    uint16_t * _arg1;
    uint16_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smGuidInfo_setByLid { smGuidInfo * } lid blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smGuidInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smGuidInfo_setByLid. Expected _smGuidInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smGuidInfo_setByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmGuidInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smGuidInfo methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smGuidInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smGuidInfo_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smGuidInfo_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smGuidInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smGuidInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_smGuidInfo_guid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -guid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -guid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_smGuidInfo_guid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smGuidInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -guid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -guid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smGuidInfo_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmGuidInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smGuidInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smGuidInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smGuidInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smGuidInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmGuidInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_net16_array_t * _ibsm_pkey_table_pkey_entry_set(smPkeyTable *obj, ib_net16_array_t val[IB_NUM_PKEY_ELEMENTS_IN_BLOCK]) {
{
	int i;
	for (i=0; i <IB_NUM_PKEY_ELEMENTS_IN_BLOCK ; i++) {
     obj->pkey_entry[i] = *(val+i);
	}
}
    return (ib_net16_array_t *) val;
}
static int _wrap_smPkeyTable_pkey_entry_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    smPkeyTable * _arg0;
    ib_net16_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  entrys[IB_NUM_PKEY_ELEMENTS_IN_BLOCK];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPkeyTable_pkey_entry_set { smPkeyTable * } { ib_net16_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPkeyTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPkeyTable_pkey_entry_set. Expected _smPkeyTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < IB_NUM_PKEY_ELEMENTS_IN_BLOCK))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 65535)
    {
      printf("Error: wrong format or out of range value for expected ib_net16_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = cl_hton16(entry);
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < IB_NUM_PKEY_ELEMENTS_IN_BLOCK; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ibsm_pkey_table_pkey_entry_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_NUM_PKEY_ELEMENTS_IN_BLOCK ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibsm_pkey_table_pkey_entry_get(_swigobj) ((ib_net16_array_t *) _swigobj->pkey_entry)
static int _wrap_smPkeyTable_pkey_entry_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_array_t * _result;
    smPkeyTable * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPkeyTable_pkey_entry_get { smPkeyTable * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPkeyTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPkeyTable_pkey_entry_get. Expected _smPkeyTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_array_t *)_ibsm_pkey_table_pkey_entry_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_NUM_PKEY_ELEMENTS_IN_BLOCK ; i++) {
    sprintf(buff, "0x%04x ", cl_ntoh16(*(_result+i)));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static int  smPkeyTable_getByDr(smPkeyTable *self,ibsm_dr_path_t * dr,uint8_t  portNum,uint16_t  blockNum) {
    uint32_t attrMod = blockNum | (portNum << 16);
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smPkeyTable),
                               dr, CL_NTOH16(IB_MAD_ATTR_P_KEY_TABLE), attrMod,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smPkeyTable_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPkeyTable * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    uint16_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPkeyTable_getByDr { smPkeyTable * } dr portNum blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPkeyTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPkeyTable_getByDr. Expected _smPkeyTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPkeyTable_getByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smPkeyTable_setByDr(smPkeyTable *self,ibsm_dr_path_t * dr,uint8_t  portNum,uint16_t  blockNum) {
    uint32_t attrMod = blockNum | (portNum << 16);
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smPkeyTable),
                               dr, CL_NTOH16(IB_MAD_ATTR_P_KEY_TABLE), attrMod,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smPkeyTable_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPkeyTable * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    uint16_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;
    uint16_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPkeyTable_setByDr { smPkeyTable * } dr portNum blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPkeyTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPkeyTable_setByDr. Expected _smPkeyTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPkeyTable_setByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smPkeyTable_getByLid(smPkeyTable *self,uint16_t  lid,uint8_t  portNum,uint16_t  blockNum) {
    uint32_t attrMod = blockNum | (portNum << 16);
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smPkeyTable),
                                lid, CL_NTOH16(IB_MAD_ATTR_P_KEY_TABLE), attrMod,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smPkeyTable_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPkeyTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    uint16_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;
    uint16_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPkeyTable_getByLid { smPkeyTable * } lid portNum blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPkeyTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPkeyTable_getByLid. Expected _smPkeyTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPkeyTable_getByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smPkeyTable_setByLid(smPkeyTable *self,uint16_t  lid,uint8_t  portNum,uint16_t  blockNum) {
    uint32_t attrMod = blockNum | (portNum << 16);
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smPkeyTable),
                                lid, CL_NTOH16(IB_MAD_ATTR_P_KEY_TABLE), attrMod,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smPkeyTable_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smPkeyTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    uint16_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;
    uint16_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smPkeyTable_setByLid { smPkeyTable * } lid portNum blockNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smPkeyTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smPkeyTable_setByLid. Expected _smPkeyTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smPkeyTable_setByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmPkeyTableMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smPkeyTable methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smPkeyTable_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smPkeyTable_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smPkeyTable_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smPkeyTable_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smPkeyTable_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pkey_entry") == 0) {
                    cmd = _wrap_smPkeyTable_pkey_entry_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pkey_entry  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pkey_entry  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pkey_entry") == 0) {
                    cmd = _wrap_smPkeyTable_pkey_entry_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smPkeyTable_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pkey_entry  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pkey_entry  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smPkeyTable_pkey_entry_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pkey_entry ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmPkeyTableCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smPkeyTable * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smPkeyTable_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smPkeyTable_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smPkeyTable object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmPkeyTableMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static uint8_array_t * _ibsm_slvl_table_raw_vl_by_sl_set(smSlVlTable *obj, uint8_array_t val[IB_MAX_NUM_VLS/2]) {
{
	int i;
	for (i=0; i <IB_MAX_NUM_VLS/2 ; i++) {
		obj->raw_vl_by_sl[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_smSlVlTable_raw_vl_by_sl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smSlVlTable * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[IB_MAX_NUM_VLS/2];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSlVlTable_raw_vl_by_sl_set { smSlVlTable * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSlVlTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSlVlTable_raw_vl_by_sl_set. Expected _smSlVlTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < IB_MAX_NUM_VLS/2))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < IB_MAX_NUM_VLS/2; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ibsm_slvl_table_raw_vl_by_sl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_MAX_NUM_VLS/2 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibsm_slvl_table_raw_vl_by_sl_get(_swigobj) ((uint8_array_t *) _swigobj->raw_vl_by_sl)
static int _wrap_smSlVlTable_raw_vl_by_sl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smSlVlTable * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSlVlTable_raw_vl_by_sl_get { smSlVlTable * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSlVlTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSlVlTable_raw_vl_by_sl_get. Expected _smSlVlTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ibsm_slvl_table_raw_vl_by_sl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <IB_MAX_NUM_VLS/2 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static int  smSlVlTable_getByDr(smSlVlTable *self,ibsm_dr_path_t * dr,uint8_t  inPortNum,uint8_t  outPortNum) {
    uint32_t attrMod = outPortNum | (inPortNum << 8);
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smSlVlTable),
                               dr, CL_NTOH16(IB_MAD_ATTR_SLVL_TABLE), attrMod,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smSlVlTable_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSlVlTable * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSlVlTable_getByDr { smSlVlTable * } dr inPortNum outPortNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSlVlTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSlVlTable_getByDr. Expected _smSlVlTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSlVlTable_getByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSlVlTable_setByDr(smSlVlTable *self,ibsm_dr_path_t * dr,uint8_t  inPortNum,uint8_t  outPortNum) {
    uint32_t attrMod = outPortNum | (inPortNum << 8);
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smSlVlTable),
                               dr, CL_NTOH16(IB_MAD_ATTR_SLVL_TABLE), attrMod,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smSlVlTable_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSlVlTable * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSlVlTable_setByDr { smSlVlTable * } dr inPortNum outPortNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSlVlTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSlVlTable_setByDr. Expected _smSlVlTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSlVlTable_setByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSlVlTable_getByLid(smSlVlTable *self,uint16_t  lid,uint8_t  inPortNum,uint8_t  outPortNum) {
    uint32_t attrMod = outPortNum | (inPortNum << 8);
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smSlVlTable),
                                lid, CL_NTOH16(IB_MAD_ATTR_SLVL_TABLE), attrMod,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smSlVlTable_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSlVlTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSlVlTable_getByLid { smSlVlTable * } lid inPortNum outPortNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSlVlTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSlVlTable_getByLid. Expected _smSlVlTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSlVlTable_getByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSlVlTable_setByLid(smSlVlTable *self,uint16_t  lid,uint8_t  inPortNum,uint8_t  outPortNum) {
    uint32_t attrMod = outPortNum | (inPortNum << 8);
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smSlVlTable),
                                lid, CL_NTOH16(IB_MAD_ATTR_SLVL_TABLE), attrMod,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smSlVlTable_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSlVlTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSlVlTable_setByLid { smSlVlTable * } lid inPortNum outPortNum ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSlVlTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSlVlTable_setByLid. Expected _smSlVlTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSlVlTable_setByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmSlVlTableMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smSlVlTable methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smSlVlTable_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smSlVlTable_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smSlVlTable_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smSlVlTable_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smSlVlTable_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-raw_vl_by_sl") == 0) {
                    cmd = _wrap_smSlVlTable_raw_vl_by_sl_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -raw_vl_by_sl  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -raw_vl_by_sl  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-raw_vl_by_sl") == 0) {
                    cmd = _wrap_smSlVlTable_raw_vl_by_sl_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smSlVlTable_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -raw_vl_by_sl  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -raw_vl_by_sl  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smSlVlTable_raw_vl_by_sl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-raw_vl_by_sl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmSlVlTableCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smSlVlTable * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smSlVlTable_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smSlVlTable_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smSlVlTable object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmSlVlTableMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_vl_arb_element_t * _ibsm_vl_arb_table_vl_entry_set(smVlArbTable *obj, ib_vl_arb_element_t val[IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK]) {
{
	int i;
	for (i=0; i <IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK ; i++) {
		obj->vl_entry[i] = *(val+i);
	}
}
    return (ib_vl_arb_element_t *) val;
}
static int _wrap_smVlArbTable_vl_entry_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_vl_arb_element_t * _result;
    smVlArbTable * _arg0;
    ib_vl_arb_element_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_vl_arb_element_t  entrys[IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smVlArbTable_vl_entry_set { smVlArbTable * } { ib_vl_arb_element_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smVlArbTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smVlArbTable_vl_entry_set. Expected _smVlArbTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *p_ch;
  char *last;
  long int vl, weight;
  int   countSubLists, idx, numElements;
  int i = 0;
  Tcl_Obj	**subListObjArray;
  Tcl_Obj   *tclObj;

  if (Tcl_ListObjGetElements(interp, objv[2], &countSubLists, &subListObjArray) != TCL_OK)
  {
    printf("Error: wrong format for VL Arb Table: %s\n",
           Tcl_GetStringFromObj(objv[2],NULL));
    return TCL_ERROR;
  }

  /* go over all sub lists and convert them */
  for (idx = 0; idx < countSubLists; idx++) {
    if (Tcl_ListObjLength(interp, subListObjArray[idx], &numElements) != TCL_OK)
    {
      printf("Error: wrong format for VL Arb Table Entry: %s\n",
             Tcl_GetStringFromObj(subListObjArray[idx],NULL));
      return TCL_ERROR;
    }

    if (numElements != 2)
    {
      printf("Error: wrong number of elements for VL Arb Table Entry: %s\n",
             Tcl_GetStringFromObj(subListObjArray[idx],NULL));
      return TCL_ERROR;
    }

    if (Tcl_ListObjIndex(interp, subListObjArray[idx], 0, &tclObj) != TCL_OK)
    {
      printf("Error: Fail to obtain first element of VL Arb Table Entry: %s\n",
             Tcl_GetStringFromObj(subListObjArray[idx],NULL));
      return TCL_ERROR;
    }

    vl = strtol(Tcl_GetStringFromObj( tclObj, NULL ), NULL, 0);
    if (Tcl_ListObjIndex(interp, subListObjArray[idx], 1, &tclObj) != TCL_OK)
    {
      printf("Error: Fail to obtain second element of VL Arb Table Entry: %s\n",
             Tcl_GetStringFromObj(subListObjArray[idx],NULL));
      return TCL_ERROR;
    }

    weight = strtol(Tcl_GetStringFromObj( tclObj, NULL ), NULL, 0);

    entrys[i].vl = vl;
    entrys[i++].weight = weight;

    p_ch = strtok_r(NULL, " \t", &last);
  }

  for (; i < IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK; i++)
  {
    entrys[i].vl = 0;
    entrys[i].weight = 0;
  }

  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_vl_arb_element_t *)_ibsm_vl_arb_table_vl_entry_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[16];
  for (i=0; i <IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK ; i++) {
    sprintf(buff, "{0x%x 0x%02x} ", _result[i].vl, _result[i].weight);
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibsm_vl_arb_table_vl_entry_get(_swigobj) ((ib_vl_arb_element_t *) _swigobj->vl_entry)
static int _wrap_smVlArbTable_vl_entry_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_vl_arb_element_t * _result;
    smVlArbTable * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smVlArbTable_vl_entry_get { smVlArbTable * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smVlArbTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smVlArbTable_vl_entry_get. Expected _smVlArbTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_vl_arb_element_t *)_ibsm_vl_arb_table_vl_entry_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[16];
  for (i=0; i <IB_NUM_VL_ARB_ELEMENTS_IN_BLOCK ; i++) {
    sprintf(buff, "{0x%x 0x%02x} ", _result[i].vl, _result[i].weight);
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static int  smVlArbTable_getByDr(smVlArbTable *self,ibsm_dr_path_t * dr,uint8_t  portNum,uint8_t  block) {
    uint32_t attrMod = (block <<16) | portNum;
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smVlArbTable),
                               dr, CL_NTOH16(IB_MAD_ATTR_VL_ARBITRATION), attrMod,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smVlArbTable_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smVlArbTable * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smVlArbTable_getByDr { smVlArbTable * } dr portNum block ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smVlArbTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smVlArbTable_getByDr. Expected _smVlArbTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smVlArbTable_getByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smVlArbTable_setByDr(smVlArbTable *self,ibsm_dr_path_t * dr,uint8_t  portNum,uint8_t  block) {
    uint32_t attrMod = (block <<16) | portNum;
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smVlArbTable),
                               dr, CL_NTOH16(IB_MAD_ATTR_VL_ARBITRATION), attrMod,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smVlArbTable_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smVlArbTable * _arg0;
    ibsm_dr_path_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;
    uint8_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smVlArbTable_setByDr { smVlArbTable * } dr portNum block ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smVlArbTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smVlArbTable_setByDr. Expected _smVlArbTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  temp = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smVlArbTable_setByDr(_arg0,_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smVlArbTable_getByLid(smVlArbTable *self,uint16_t  lid,uint8_t  portNum,uint8_t  block) {
    uint32_t attrMod = (block <<16) | portNum;
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smVlArbTable),
                                lid, CL_NTOH16(IB_MAD_ATTR_VL_ARBITRATION), attrMod,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smVlArbTable_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smVlArbTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smVlArbTable_getByLid { smVlArbTable * } lid portNum block ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smVlArbTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smVlArbTable_getByLid. Expected _smVlArbTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smVlArbTable_getByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smVlArbTable_setByLid(smVlArbTable *self,uint16_t  lid,uint8_t  portNum,uint8_t  block) {
    uint32_t attrMod = (block <<16) | portNum;
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smVlArbTable),
                                lid, CL_NTOH16(IB_MAD_ATTR_VL_ARBITRATION), attrMod,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smVlArbTable_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smVlArbTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    uint8_t * _arg3;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;
    uint8_t  temp1;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 5) || (objc > 5)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smVlArbTable_setByLid { smVlArbTable * } lid portNum block ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smVlArbTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smVlArbTable_setByLid. Expected _smVlArbTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  temp1 = strtoul(Tcl_GetStringFromObj(objv[4],NULL), NULL, 0);
  _arg3 = &temp1;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smVlArbTable_setByLid(_arg0,*_arg1,*_arg2,*_arg3);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmVlArbTableMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smVlArbTable methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smVlArbTable_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smVlArbTable_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smVlArbTable_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smVlArbTable_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smVlArbTable_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-vl_entry") == 0) {
                    cmd = _wrap_smVlArbTable_vl_entry_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -vl_entry  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -vl_entry  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-vl_entry") == 0) {
                    cmd = _wrap_smVlArbTable_vl_entry_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smVlArbTable_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -vl_entry  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -vl_entry  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smVlArbTable_vl_entry_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vl_entry ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmVlArbTableCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smVlArbTable * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smVlArbTable_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smVlArbTable_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smVlArbTable object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmVlArbTableMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ibsm_node_desc_str_t * _ibsm_node_desc_description_set(smNodeDesc *obj, ibsm_node_desc_str_t val[IB_NODE_DESCRIPTION_SIZE]) {
{
  strncpy((char *)obj->description,(char *)val,IB_NODE_DESCRIPTION_SIZE - 1);
  obj->description[IB_NODE_DESCRIPTION_SIZE - 1] = '\0';
}
    return (ibsm_node_desc_str_t *) val;
}
static int _wrap_smNodeDesc_description_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ibsm_node_desc_str_t * _result;
    smNodeDesc * _arg0;
    ibsm_node_desc_str_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp[IB_NODE_DESCRIPTION_SIZE];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeDesc_description_set { smNodeDesc * } { ibsm_node_desc_str_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeDesc_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeDesc_description_set. Expected _smNodeDesc_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  strcpy((char *)temp, Tcl_GetStringFromObj(objv[2],NULL));
  _arg1 = temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ibsm_node_desc_str_t *)_ibsm_node_desc_description_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  /* we must make sure we do not overflow the node desc length */
  char buff[IB_NODE_DESCRIPTION_SIZE];
  strncpy(buff,(char *)_result,IB_NODE_DESCRIPTION_SIZE - 1);
  buff[IB_NODE_DESCRIPTION_SIZE - 1] = '\0';
  Tcl_SetStringObj(tcl_result, buff, strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_node_desc_description_get(_swigobj) ((ibsm_node_desc_str_t *) _swigobj->description)
static int _wrap_smNodeDesc_description_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ibsm_node_desc_str_t * _result;
    smNodeDesc * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeDesc_description_get { smNodeDesc * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeDesc_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeDesc_description_get. Expected _smNodeDesc_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ibsm_node_desc_str_t *)_ibsm_node_desc_description_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  /* we must make sure we do not overflow the node desc length */
  char buff[IB_NODE_DESCRIPTION_SIZE];
  strncpy(buff,(char *)_result,IB_NODE_DESCRIPTION_SIZE - 1);
  buff[IB_NODE_DESCRIPTION_SIZE - 1] = '\0';
  Tcl_SetStringObj(tcl_result, buff, strlen(buff));
}
    return TCL_OK;
}
static int  smNodeDesc_getByDr(smNodeDesc *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smNodeDesc),
                               dr, CL_NTOH16(IB_MAD_ATTR_NODE_DESC), 0,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smNodeDesc_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeDesc * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeDesc_getByDr { smNodeDesc * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeDesc_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeDesc_getByDr. Expected _smNodeDesc_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeDesc_getByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNodeDesc_setByDr(smNodeDesc *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smNodeDesc),
                               dr, CL_NTOH16(IB_MAD_ATTR_NODE_DESC), 0,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smNodeDesc_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeDesc * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeDesc_setByDr { smNodeDesc * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeDesc_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeDesc_setByDr. Expected _smNodeDesc_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeDesc_setByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNodeDesc_getByLid(smNodeDesc *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smNodeDesc),
                                lid, CL_NTOH16(IB_MAD_ATTR_NODE_DESC), 0,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smNodeDesc_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeDesc * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeDesc_getByLid { smNodeDesc * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeDesc_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeDesc_getByLid. Expected _smNodeDesc_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeDesc_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNodeDesc_setByLid(smNodeDesc *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smNodeDesc),
                                lid, CL_NTOH16(IB_MAD_ATTR_NODE_DESC), 0,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smNodeDesc_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNodeDesc * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNodeDesc_setByLid { smNodeDesc * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNodeDesc_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNodeDesc_setByLid. Expected _smNodeDesc_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNodeDesc_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNodeDescMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNodeDesc methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNodeDesc_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smNodeDesc_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smNodeDesc_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smNodeDesc_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smNodeDesc_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-description") == 0) {
                    cmd = _wrap_smNodeDesc_description_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -description  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -description  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-description") == 0) {
                    cmd = _wrap_smNodeDesc_description_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNodeDesc_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -description  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -description  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNodeDesc_description_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-description ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNodeDescCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNodeDesc * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNodeDesc_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNodeDesc_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNodeDesc object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNodeDescMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsm_sm_info_guid_set(_swigobj,_swigval) (_swigobj->guid = *(_swigval),_swigval)
static int _wrap_smSMInfo_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smSMInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_guid_set { smSMInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_guid_set. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_sm_info_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_guid_get(_swigobj) (&_swigobj->guid)
static int _wrap_smSMInfo_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smSMInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_guid_get { smSMInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_guid_get. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_sm_info_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_sm_key_set(_swigobj,_swigval) (_swigobj->sm_key = *(_swigval),_swigval)
static int _wrap_smSMInfo_sm_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smSMInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_sm_key_set { smSMInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_sm_key_set. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_sm_info_sm_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_sm_key_get(_swigobj) (&_swigobj->sm_key)
static int _wrap_smSMInfo_sm_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smSMInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_sm_key_get { smSMInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_sm_key_get. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibsm_sm_info_sm_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_act_count_set(_swigobj,_swigval) (_swigobj->act_count = *(_swigval),_swigval)
static int _wrap_smSMInfo_act_count_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smSMInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_act_count_set { smSMInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_act_count_set. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_sm_info_act_count_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_act_count_get(_swigobj) (&_swigobj->act_count)
static int _wrap_smSMInfo_act_count_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smSMInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_act_count_get { smSMInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_act_count_get. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibsm_sm_info_act_count_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_pri_state_set(_swigobj,_swigval) (_swigobj->pri_state = *(_swigval),_swigval)
static int _wrap_smSMInfo_pri_state_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSMInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_pri_state_set { smSMInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_pri_state_set. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_sm_info_pri_state_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_sm_info_pri_state_get(_swigobj) (&_swigobj->pri_state)
static int _wrap_smSMInfo_pri_state_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smSMInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_pri_state_get { smSMInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_pri_state_get. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_sm_info_pri_state_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  smSMInfo_getByDr(smSMInfo *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smSMInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_SM_INFO), 0,
                               IB_MAD_METHOD_GET));
  }
static int _wrap_smSMInfo_getByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSMInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_getByDr { smSMInfo * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_getByDr. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSMInfo_getByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSMInfo_setByDr(smSMInfo *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self, sizeof(smSMInfo),
                               dr, CL_NTOH16(IB_MAD_ATTR_SM_INFO), 0,
                               IB_MAD_METHOD_SET));
  }
static int _wrap_smSMInfo_setByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSMInfo * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_setByDr { smSMInfo * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_setByDr. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSMInfo_setByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSMInfo_getByLid(smSMInfo *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smSMInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_SM_INFO), 0,
                                IB_MAD_METHOD_GET));
  }
static int _wrap_smSMInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSMInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_getByLid { smSMInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_getByLid. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSMInfo_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smSMInfo_setByLid(smSMInfo *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self, sizeof(smSMInfo),
                                lid, CL_NTOH16(IB_MAD_ATTR_SM_INFO), 0,
                                IB_MAD_METHOD_SET));
  }
static int _wrap_smSMInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smSMInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smSMInfo_setByLid { smSMInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smSMInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smSMInfo_setByLid. Expected _smSMInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smSMInfo_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmSMInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smSMInfo methods : { dump cget configure getByDr setByDr getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smSMInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByDr") == 0) {
        cmd = _wrap_smSMInfo_getByDr;
    }    else if (strcmp(_str,"setByDr") == 0) {
        cmd = _wrap_smSMInfo_setByDr;
    }    else if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_smSMInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_smSMInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_smSMInfo_guid_set;
                }  else if (strcmp(_str,"-sm_key") == 0) {
                    cmd = _wrap_smSMInfo_sm_key_set;
                }  else if (strcmp(_str,"-act_count") == 0) {
                    cmd = _wrap_smSMInfo_act_count_set;
                }  else if (strcmp(_str,"-pri_state") == 0) {
                    cmd = _wrap_smSMInfo_pri_state_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -guid -sm_key -act_count -pri_state  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -guid -sm_key -act_count -pri_state  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-guid") == 0) {
                    cmd = _wrap_smSMInfo_guid_get;
                }  else if (strcmp(_str,"-sm_key") == 0) {
                    cmd = _wrap_smSMInfo_sm_key_get;
                }  else if (strcmp(_str,"-act_count") == 0) {
                    cmd = _wrap_smSMInfo_act_count_get;
                }  else if (strcmp(_str,"-pri_state") == 0) {
                    cmd = _wrap_smSMInfo_pri_state_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smSMInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -guid -sm_key -act_count -pri_state  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -guid -sm_key -act_count -pri_state  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smSMInfo_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSMInfo_sm_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sm_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSMInfo_act_count_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-act_count ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smSMInfo_pri_state_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pri_state ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByDr setByDr getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmSMInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smSMInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smSMInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smSMInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smSMInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmSMInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibsm_notice_generic_type_set(_swigobj,_swigval) (_swigobj->generic_type = *(_swigval),_swigval)
static int _wrap_smNotice_generic_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_generic_type_set { smNotice * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_generic_type_set. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_notice_generic_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_generic_type_get(_swigobj) (&_swigobj->generic_type)
static int _wrap_smNotice_generic_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_generic_type_get { smNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_generic_type_get. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibsm_notice_generic_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_issuer_lid_set(_swigobj,_swigval) (_swigobj->issuer_lid = *(_swigval),_swigval)
static int _wrap_smNotice_issuer_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_issuer_lid_set { smNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_issuer_lid_set. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_notice_issuer_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_issuer_lid_get(_swigobj) (&_swigobj->issuer_lid)
static int _wrap_smNotice_issuer_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_issuer_lid_get { smNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_issuer_lid_get. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_notice_issuer_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_toggle_count_set(_swigobj,_swigval) (_swigobj->toggle_count = *(_swigval),_swigval)
static int _wrap_smNotice_toggle_count_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_toggle_count_set { smNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_toggle_count_set. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_notice_toggle_count_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_toggle_count_get(_swigobj) (&_swigobj->toggle_count)
static int _wrap_smNotice_toggle_count_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_toggle_count_get { smNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_toggle_count_get. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibsm_notice_toggle_count_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_issuer_gid_set(_swigobj,_swigval) (_swigobj->issuer_gid = *(_swigval),_swigval)
static int _wrap_smNotice_issuer_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_issuer_gid_set { smNotice * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_issuer_gid_set. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[38];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  p_guid = strtok_r(NULL, " ", &str_token);
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  errno = 0;
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsm_notice_issuer_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_issuer_gid_get(_swigobj) (&_swigobj->issuer_gid)
static int _wrap_smNotice_issuer_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_issuer_gid_get { smNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_issuer_gid_get. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibsm_notice_issuer_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibsm_notice_g_or_v_get(_swigobj) (&_swigobj->g_or_v)
static int _wrap_smNotice_g_or_v_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_g_or_v * _result;
    smNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_get { smNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_get. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_g_or_v *)_ibsm_notice_g_or_v_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_g_or_v_p");
    return TCL_OK;
}
#define _ibsm_notice_data_details_get(_swigobj) (&_swigobj->data_details)
static int _wrap_smNotice_data_details_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details * _result;
    smNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_get { smNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_get. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details *)_ibsm_notice_data_details_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_p");
    return TCL_OK;
}
static int  smNotice_trapByDr(smNotice *self,ibsm_dr_path_t * dr) {
    return(ibsm_send_mad_by_dr(gp_ibsm, (uint8_t *)self,
                               sizeof(smNotice),
                               dr, CL_NTOH16(IB_MAD_ATTR_NOTICE), 0,
                               IB_MAD_METHOD_TRAP));
  }
static int _wrap_smNotice_trapByDr(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNotice * _arg0;
    ibsm_dr_path_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ibsm_dr_path_t  dr;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_trapByDr { smNotice * } dr ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_trapByDr. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[1024];
  char *p_next;
  unsigned int port;
  int i;

  dr.count = 1;
  dr.path[0] = 0;

  strncpy(buf, Tcl_GetStringFromObj(objv[2],NULL), 1023);
  buf[1023] = '\0';
  p_next = strtok(buf," \t");
  while (p_next != NULL)
  {
    if (sscanf(p_next,"%u", &port) != 1)
    {
      printf("Error: bad format in directed route path index:%u : %s\n",
             dr.count, p_next);
      return TCL_ERROR;
    }
    dr.path[dr.count++] = port;
    p_next = strtok(NULL," \t");
  }
  for (i = dr.count; i < 64; i++) dr.path[i] = 0;
  dr.count--;
  _arg1 = &dr;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNotice_trapByDr(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  smNotice_trapByLid(smNotice *self,uint16_t  lid) {
    return(ibsm_send_mad_by_lid(gp_ibsm, (uint8_t *)self,
                                sizeof(smNotice),
                                lid, CL_NTOH16(IB_MAD_ATTR_NOTICE), 0,
                                IB_MAD_METHOD_TRAP));
  }
static int _wrap_smNotice_trapByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    smNotice * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_trapByLid { smNotice * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_trapByLid. Expected _smNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )smNotice_trapByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNoticeMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice methods : { dump cget configure trapByDr trapByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"trapByDr") == 0) {
        cmd = _wrap_smNotice_trapByDr;
    }    else if (strcmp(_str,"trapByLid") == 0) {
        cmd = _wrap_smNotice_trapByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-generic_type") == 0) {
                    cmd = _wrap_smNotice_generic_type_set;
                }  else if (strcmp(_str,"-issuer_lid") == 0) {
                    cmd = _wrap_smNotice_issuer_lid_set;
                }  else if (strcmp(_str,"-toggle_count") == 0) {
                    cmd = _wrap_smNotice_toggle_count_set;
                }  else if (strcmp(_str,"-issuer_gid") == 0) {
                    cmd = _wrap_smNotice_issuer_gid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -generic_type -issuer_lid -toggle_count -issuer_gid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -generic_type -issuer_lid -toggle_count -issuer_gid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-generic_type") == 0) {
                    cmd = _wrap_smNotice_generic_type_get;
                }  else if (strcmp(_str,"-issuer_lid") == 0) {
                    cmd = _wrap_smNotice_issuer_lid_get;
                }  else if (strcmp(_str,"-toggle_count") == 0) {
                    cmd = _wrap_smNotice_toggle_count_get;
                }  else if (strcmp(_str,"-issuer_gid") == 0) {
                    cmd = _wrap_smNotice_issuer_gid_get;
                }  else if (strcmp(_str,"-g_or_v") == 0) {
                    cmd = _wrap_smNotice_g_or_v_get;
                }  else if (strcmp(_str,"-data_details") == 0) {
                    cmd = _wrap_smNotice_data_details_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -generic_type -issuer_lid -toggle_count -issuer_gid -g_or_v -data_details  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -generic_type -issuer_lid -toggle_count -issuer_gid -g_or_v -data_details  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_generic_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_issuer_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-issuer_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_toggle_count_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-toggle_count ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_issuer_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-issuer_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_g_or_v_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-g_or_v ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-data_details ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure trapByDr trapByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNoticeCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNoticeMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_g_or_v_generic_get(_swigobj) (&_swigobj->generic)
static int _wrap_smNotice_g_or_v_generic_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_g_or_v_generic * _result;
    smNotice_g_or_v * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_get { smNotice_g_or_v * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_get. Expected _smNotice_g_or_v_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_g_or_v_generic *)smNotice_g_or_v_generic_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_g_or_v_generic_p");
    return TCL_OK;
}
#define smNotice_g_or_v_vend_get(_swigobj) (&_swigobj->vend)
static int _wrap_smNotice_g_or_v_vend_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_g_or_v_vend * _result;
    smNotice_g_or_v * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_get { smNotice_g_or_v * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_get. Expected _smNotice_g_or_v_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_g_or_v_vend *)smNotice_g_or_v_vend_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_g_or_v_vend_p");
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_g_or_vMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_g_or_v methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_g_or_v_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);

          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be {  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-generic") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_get;
                }  else if (strcmp(_str,"-vend") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_g_or_v_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -generic -vend  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -generic -vend  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_g_or_v_generic_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_g_or_v_vend_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vend ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_g_or_vCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_g_or_v * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_g_or_v_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_g_or_v_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_g_or_v object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_g_or_vMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_raw_data_get(_swigobj) (&_swigobj->raw_data)
static int _wrap_smNotice_data_details_raw_data_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_raw_data * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_raw_data_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_raw_data_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_raw_data *)smNotice_data_details_raw_data_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_raw_data_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_64_67_get(_swigobj) (&_swigobj->ntc_64_67)
static int _wrap_smNotice_data_details_ntc_64_67_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_64_67 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_64_67_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_64_67_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_64_67 *)smNotice_data_details_ntc_64_67_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_64_67_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_128_get(_swigobj) (&_swigobj->ntc_128)
static int _wrap_smNotice_data_details_ntc_128_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_128 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_128_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_128_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_128 *)smNotice_data_details_ntc_128_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_128_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_129_131_get(_swigobj) (&_swigobj->ntc_129_131)
static int _wrap_smNotice_data_details_ntc_129_131_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_129_131 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_129_131 *)smNotice_data_details_ntc_129_131_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_129_131_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_get(_swigobj) (&_swigobj->ntc_144)
static int _wrap_smNotice_data_details_ntc_144_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_144 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_144 *)smNotice_data_details_ntc_144_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_144_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_get(_swigobj) (&_swigobj->ntc_145)
static int _wrap_smNotice_data_details_ntc_145_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_145 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_145 *)smNotice_data_details_ntc_145_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_145_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_get(_swigobj) (&_swigobj->ntc_256)
static int _wrap_smNotice_data_details_ntc_256_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_256 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_256 *)smNotice_data_details_ntc_256_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_256_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_get(_swigobj) (&_swigobj->ntc_257_258)
static int _wrap_smNotice_data_details_ntc_257_258_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_257_258 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_257_258 *)smNotice_data_details_ntc_257_258_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_257_258_p");
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_get(_swigobj) (&_swigobj->ntc_259)
static int _wrap_smNotice_data_details_ntc_259_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    smNotice_data_details_ntc_259 * _result;
    smNotice_data_details * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_get { smNotice_data_details * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_get. Expected _smNotice_data_details_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (smNotice_data_details_ntc_259 *)smNotice_data_details_ntc_259_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    SWIG_SetPointerObj(tcl_result,(void *) _result,"_smNotice_data_details_ntc_259_p");
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_detailsMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);

          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be {  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-raw_data") == 0) {
                    cmd = _wrap_smNotice_data_details_raw_data_get;
                }  else if (strcmp(_str,"-ntc_64_67") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_64_67_get;
                }  else if (strcmp(_str,"-ntc_128") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_128_get;
                }  else if (strcmp(_str,"-ntc_129_131") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_get;
                }  else if (strcmp(_str,"-ntc_144") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_get;
                }  else if (strcmp(_str,"-ntc_145") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_get;
                }  else if (strcmp(_str,"-ntc_256") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_get;
                }  else if (strcmp(_str,"-ntc_257_258") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_get;
                }  else if (strcmp(_str,"-ntc_259") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -raw_data -ntc_64_67 -ntc_128 -ntc_129_131 -ntc_144 -ntc_145 -ntc_256 -ntc_257_258 -ntc_259  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -raw_data -ntc_64_67 -ntc_128 -ntc_129_131 -ntc_144 -ntc_145 -ntc_256 -ntc_257_258 -ntc_259  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_raw_data_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-raw_data ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_64_67_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_64_67 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_128_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_128 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_129_131_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_129_131 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_144_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_144 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_145_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_145 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_256 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_257_258 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc_259 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_detailsCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_detailsMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_g_or_v_generic_prod_type_msb_set(_swigobj,_swigval) (_swigobj->prod_type_msb = *(_swigval),_swigval)
static int _wrap_smNotice_g_or_v_generic_prod_type_msb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_g_or_v_generic * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_prod_type_msb_set { smNotice_g_or_v_generic * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_prod_type_msb_set. Expected _smNotice_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_g_or_v_generic_prod_type_msb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_generic_prod_type_msb_get(_swigobj) (&_swigobj->prod_type_msb)
static int _wrap_smNotice_g_or_v_generic_prod_type_msb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_prod_type_msb_get { smNotice_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_prod_type_msb_get. Expected _smNotice_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_g_or_v_generic_prod_type_msb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_generic_prod_type_lsb_set(_swigobj,_swigval) (_swigobj->prod_type_lsb = *(_swigval),_swigval)
static int _wrap_smNotice_g_or_v_generic_prod_type_lsb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_generic * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_prod_type_lsb_set { smNotice_g_or_v_generic * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_prod_type_lsb_set. Expected _smNotice_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_generic_prod_type_lsb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_generic_prod_type_lsb_get(_swigobj) (&_swigobj->prod_type_lsb)
static int _wrap_smNotice_g_or_v_generic_prod_type_lsb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_prod_type_lsb_get { smNotice_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_prod_type_lsb_get. Expected _smNotice_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_generic_prod_type_lsb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_generic_trap_num_set(_swigobj,_swigval) (_swigobj->trap_num = *(_swigval),_swigval)
static int _wrap_smNotice_g_or_v_generic_trap_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_generic * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_trap_num_set { smNotice_g_or_v_generic * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_trap_num_set. Expected _smNotice_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_generic_trap_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_generic_trap_num_get(_swigobj) (&_swigobj->trap_num)
static int _wrap_smNotice_g_or_v_generic_trap_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_generic * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_generic_trap_num_get { smNotice_g_or_v_generic * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_generic_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_generic_trap_num_get. Expected _smNotice_g_or_v_generic_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_generic_trap_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_g_or_v_genericMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_g_or_v_generic methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_g_or_v_generic_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-prod_type_msb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_prod_type_msb_set;
                }  else if (strcmp(_str,"-prod_type_lsb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_prod_type_lsb_set;
                }  else if (strcmp(_str,"-trap_num") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_trap_num_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -prod_type_msb -prod_type_lsb -trap_num  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -prod_type_msb -prod_type_lsb -trap_num  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-prod_type_msb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_prod_type_msb_get;
                }  else if (strcmp(_str,"-prod_type_lsb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_prod_type_lsb_get;
                }  else if (strcmp(_str,"-trap_num") == 0) {
                    cmd = _wrap_smNotice_g_or_v_generic_trap_num_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_g_or_v_generic_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -prod_type_msb -prod_type_lsb -trap_num  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -prod_type_msb -prod_type_lsb -trap_num  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_g_or_v_generic_prod_type_msb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-prod_type_msb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_g_or_v_generic_prod_type_lsb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-prod_type_lsb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_g_or_v_generic_trap_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_g_or_v_genericCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_g_or_v_generic * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_g_or_v_generic_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_g_or_v_generic_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_g_or_v_generic object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_g_or_v_genericMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_g_or_v_vend_vend_id_msb_set(_swigobj,_swigval) (_swigobj->vend_id_msb = *(_swigval),_swigval)
static int _wrap_smNotice_g_or_v_vend_vend_id_msb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_g_or_v_vend * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_vend_id_msb_set { smNotice_g_or_v_vend * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_vend_id_msb_set. Expected _smNotice_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_g_or_v_vend_vend_id_msb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_vend_vend_id_msb_get(_swigobj) (&_swigobj->vend_id_msb)
static int _wrap_smNotice_g_or_v_vend_vend_id_msb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_vend_id_msb_get { smNotice_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_vend_id_msb_get. Expected _smNotice_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_g_or_v_vend_vend_id_msb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_vend_vend_id_lsb_set(_swigobj,_swigval) (_swigobj->vend_id_lsb = *(_swigval),_swigval)
static int _wrap_smNotice_g_or_v_vend_vend_id_lsb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_vend * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_vend_id_lsb_set { smNotice_g_or_v_vend * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_vend_id_lsb_set. Expected _smNotice_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_vend_vend_id_lsb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_vend_vend_id_lsb_get(_swigobj) (&_swigobj->vend_id_lsb)
static int _wrap_smNotice_g_or_v_vend_vend_id_lsb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_vend_id_lsb_get { smNotice_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_vend_id_lsb_get. Expected _smNotice_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_vend_vend_id_lsb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_vend_dev_id_set(_swigobj,_swigval) (_swigobj->dev_id = *(_swigval),_swigval)
static int _wrap_smNotice_g_or_v_vend_dev_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_vend * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_dev_id_set { smNotice_g_or_v_vend * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_dev_id_set. Expected _smNotice_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_vend_dev_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_g_or_v_vend_dev_id_get(_swigobj) (&_swigobj->dev_id)
static int _wrap_smNotice_g_or_v_vend_dev_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_g_or_v_vend * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_g_or_v_vend_dev_id_get { smNotice_g_or_v_vend * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_g_or_v_vend_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_g_or_v_vend_dev_id_get. Expected _smNotice_g_or_v_vend_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_g_or_v_vend_dev_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_g_or_v_vendMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_g_or_v_vend methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_g_or_v_vend_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-vend_id_msb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_vend_id_msb_set;
                }  else if (strcmp(_str,"-vend_id_lsb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_vend_id_lsb_set;
                }  else if (strcmp(_str,"-dev_id") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_dev_id_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -vend_id_msb -vend_id_lsb -dev_id  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -vend_id_msb -vend_id_lsb -dev_id  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-vend_id_msb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_vend_id_msb_get;
                }  else if (strcmp(_str,"-vend_id_lsb") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_vend_id_lsb_get;
                }  else if (strcmp(_str,"-dev_id") == 0) {
                    cmd = _wrap_smNotice_g_or_v_vend_dev_id_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_g_or_v_vend_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -vend_id_msb -vend_id_lsb -dev_id  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -vend_id_msb -vend_id_lsb -dev_id  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_g_or_v_vend_vend_id_msb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vend_id_msb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_g_or_v_vend_vend_id_lsb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-vend_id_lsb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_g_or_v_vend_dev_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dev_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_g_or_v_vendCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_g_or_v_vend * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_g_or_v_vend_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_g_or_v_vend_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_g_or_v_vend object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_g_or_v_vendMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static uint8_array_t * smNotice_data_details_raw_data_details_set(smNotice_data_details_raw_data *obj, uint8_array_t val[54]) {
{
	int i;
	for (i=0; i <54 ; i++) {
		obj->details[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_smNotice_data_details_raw_data_details_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smNotice_data_details_raw_data * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[54];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_raw_data_details_set { smNotice_data_details_raw_data * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_raw_data_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_raw_data_details_set. Expected _smNotice_data_details_raw_data_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 54))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 54; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)smNotice_data_details_raw_data_details_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <54 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define smNotice_data_details_raw_data_details_get(_swigobj) ((uint8_array_t *) _swigobj->details)
static int _wrap_smNotice_data_details_raw_data_details_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smNotice_data_details_raw_data * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_raw_data_details_get { smNotice_data_details_raw_data * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_raw_data_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_raw_data_details_get. Expected _smNotice_data_details_raw_data_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)smNotice_data_details_raw_data_details_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <54 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_raw_dataMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_raw_data methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_raw_data_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-details") == 0) {
                    cmd = _wrap_smNotice_data_details_raw_data_details_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -details  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -details  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-details") == 0) {
                    cmd = _wrap_smNotice_data_details_raw_data_details_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_raw_data_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -details  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -details  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_raw_data_details_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-details ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_raw_dataCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_raw_data * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_raw_data_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_raw_data_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_raw_data object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_raw_dataMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static uint8_array_t * smNotice_data_details_ntc_64_67_res_set(smNotice_data_details_ntc_64_67 *obj, uint8_array_t val[6]) {
{
	int i;
	for (i=0; i <6 ; i++) {
		obj->res[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_smNotice_data_details_ntc_64_67_res_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smNotice_data_details_ntc_64_67 * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[6];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_64_67_res_set { smNotice_data_details_ntc_64_67 * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_64_67_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_64_67_res_set. Expected _smNotice_data_details_ntc_64_67_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 6))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 6; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)smNotice_data_details_ntc_64_67_res_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <6 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_64_67_res_get(_swigobj) ((uint8_array_t *) _swigobj->res)
static int _wrap_smNotice_data_details_ntc_64_67_res_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smNotice_data_details_ntc_64_67 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_64_67_res_get { smNotice_data_details_ntc_64_67 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_64_67_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_64_67_res_get. Expected _smNotice_data_details_ntc_64_67_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)smNotice_data_details_ntc_64_67_res_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <6 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_64_67_gid_set(_swigobj,_swigval) (_swigobj->gid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_64_67_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_64_67 * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_64_67_gid_set { smNotice_data_details_ntc_64_67 * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_64_67_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_64_67_gid_set. Expected _smNotice_data_details_ntc_64_67_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[38];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  p_guid = strtok_r(NULL, " ", &str_token);
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  errno = 0;
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_64_67_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_64_67_gid_get(_swigobj) (&_swigobj->gid)
static int _wrap_smNotice_data_details_ntc_64_67_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_64_67 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_64_67_gid_get { smNotice_data_details_ntc_64_67 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_64_67_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_64_67_gid_get. Expected _smNotice_data_details_ntc_64_67_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_64_67_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_64_67MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_64_67 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_64_67_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-res") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_64_67_res_set;
                }  else if (strcmp(_str,"-gid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_64_67_gid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -res -gid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -res -gid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-res") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_64_67_res_get;
                }  else if (strcmp(_str,"-gid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_64_67_gid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_64_67_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -res -gid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -res -gid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_64_67_res_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-res ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_64_67_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_64_67Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_64_67 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_64_67_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_64_67_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_64_67 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_64_67MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_128_sw_lid_set(_swigobj,_swigval) (_swigobj->sw_lid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_128_sw_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_128 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_128_sw_lid_set { smNotice_data_details_ntc_128 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_128_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_128_sw_lid_set. Expected _smNotice_data_details_ntc_128_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_128_sw_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_128_sw_lid_get(_swigobj) (&_swigobj->sw_lid)
static int _wrap_smNotice_data_details_ntc_128_sw_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_128 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_128_sw_lid_get { smNotice_data_details_ntc_128 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_128_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_128_sw_lid_get. Expected _smNotice_data_details_ntc_128_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_128_sw_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_128MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_128 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_128_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-sw_lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_128_sw_lid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -sw_lid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -sw_lid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-sw_lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_128_sw_lid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_128_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -sw_lid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -sw_lid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_128_sw_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sw_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_128Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_128 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_128_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_128_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_128 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_128MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_129_131_pad_set(_swigobj,_swigval) (_swigobj->pad = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_129_131_pad_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_129_131 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_pad_set { smNotice_data_details_ntc_129_131 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_129_131_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_pad_set. Expected _smNotice_data_details_ntc_129_131_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_129_131_pad_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_129_131_pad_get(_swigobj) (&_swigobj->pad)
static int _wrap_smNotice_data_details_ntc_129_131_pad_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_129_131 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_pad_get { smNotice_data_details_ntc_129_131 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_129_131_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_pad_get. Expected _smNotice_data_details_ntc_129_131_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_129_131_pad_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_129_131_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_129_131_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_129_131 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_lid_set { smNotice_data_details_ntc_129_131 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_129_131_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_lid_set. Expected _smNotice_data_details_ntc_129_131_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_129_131_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_129_131_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_smNotice_data_details_ntc_129_131_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_129_131 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_lid_get { smNotice_data_details_ntc_129_131 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_129_131_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_lid_get. Expected _smNotice_data_details_ntc_129_131_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_129_131_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_129_131_port_num_set(_swigobj,_swigval) (_swigobj->port_num = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_129_131_port_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_129_131 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_port_num_set { smNotice_data_details_ntc_129_131 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_129_131_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_port_num_set. Expected _smNotice_data_details_ntc_129_131_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_129_131_port_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_129_131_port_num_get(_swigobj) (&_swigobj->port_num)
static int _wrap_smNotice_data_details_ntc_129_131_port_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_129_131 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_129_131_port_num_get { smNotice_data_details_ntc_129_131 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_129_131_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_129_131_port_num_get. Expected _smNotice_data_details_ntc_129_131_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_129_131_port_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_129_131MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_129_131 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_129_131_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pad") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_pad_set;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_lid_set;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_port_num_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pad -lid -port_num  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pad -lid -port_num  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pad") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_pad_get;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_lid_get;
                }  else if (strcmp(_str,"-port_num") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_129_131_port_num_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_129_131_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pad -lid -port_num  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pad -lid -port_num  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_129_131_pad_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_129_131_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_129_131_port_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_129_131Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_129_131 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_129_131_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_129_131_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_129_131 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_129_131MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_144_pad1_set(_swigobj,_swigval) (_swigobj->pad1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_144_pad1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_pad1_set { smNotice_data_details_ntc_144 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_pad1_set. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_144_pad1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_pad1_get(_swigobj) (&_swigobj->pad1)
static int _wrap_smNotice_data_details_ntc_144_pad1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_pad1_get { smNotice_data_details_ntc_144 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_pad1_get. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_144_pad1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_144_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_lid_set { smNotice_data_details_ntc_144 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_lid_set. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_144_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_smNotice_data_details_ntc_144_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_lid_get { smNotice_data_details_ntc_144 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_lid_get. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_144_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_pad2_set(_swigobj,_swigval) (_swigobj->pad2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_144_pad2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_pad2_set { smNotice_data_details_ntc_144 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_pad2_set. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_144_pad2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_pad2_get(_swigobj) (&_swigobj->pad2)
static int _wrap_smNotice_data_details_ntc_144_pad2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_pad2_get { smNotice_data_details_ntc_144 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_pad2_get. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_144_pad2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_new_cap_mask_set(_swigobj,_swigval) (_swigobj->new_cap_mask = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_144_new_cap_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_new_cap_mask_set { smNotice_data_details_ntc_144 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_new_cap_mask_set. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_144_new_cap_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_144_new_cap_mask_get(_swigobj) (&_swigobj->new_cap_mask)
static int _wrap_smNotice_data_details_ntc_144_new_cap_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_144 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_144_new_cap_mask_get { smNotice_data_details_ntc_144 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_144_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_144_new_cap_mask_get. Expected _smNotice_data_details_ntc_144_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_144_new_cap_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_144MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_144 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_144_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_pad1_set;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_lid_set;
                }  else if (strcmp(_str,"-pad2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_pad2_set;
                }  else if (strcmp(_str,"-new_cap_mask") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_new_cap_mask_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pad1 -lid -pad2 -new_cap_mask  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pad1 -lid -pad2 -new_cap_mask  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_pad1_get;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_lid_get;
                }  else if (strcmp(_str,"-pad2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_pad2_get;
                }  else if (strcmp(_str,"-new_cap_mask") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_144_new_cap_mask_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_144_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pad1 -lid -pad2 -new_cap_mask  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pad1 -lid -pad2 -new_cap_mask  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_144_pad1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_144_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_144_pad2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_144_new_cap_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-new_cap_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_144Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_144 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_144_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_144_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_144 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_144MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_145_pad1_set(_swigobj,_swigval) (_swigobj->pad1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_145_pad1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_pad1_set { smNotice_data_details_ntc_145 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_pad1_set. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_145_pad1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_pad1_get(_swigobj) (&_swigobj->pad1)
static int _wrap_smNotice_data_details_ntc_145_pad1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_pad1_get { smNotice_data_details_ntc_145 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_pad1_get. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_145_pad1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_145_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_lid_set { smNotice_data_details_ntc_145 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_lid_set. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_145_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_smNotice_data_details_ntc_145_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_lid_get { smNotice_data_details_ntc_145 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_lid_get. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_145_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_pad2_set(_swigobj,_swigval) (_swigobj->pad2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_145_pad2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_pad2_set { smNotice_data_details_ntc_145 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_pad2_set. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_145_pad2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_pad2_get(_swigobj) (&_swigobj->pad2)
static int _wrap_smNotice_data_details_ntc_145_pad2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_pad2_get { smNotice_data_details_ntc_145 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_pad2_get. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_145_pad2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_new_sys_guid_set(_swigobj,_swigval) (_swigobj->new_sys_guid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_145_new_sys_guid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_new_sys_guid_set { smNotice_data_details_ntc_145 * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_new_sys_guid_set. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)smNotice_data_details_ntc_145_new_sys_guid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_145_new_sys_guid_get(_swigobj) (&_swigobj->new_sys_guid)
static int _wrap_smNotice_data_details_ntc_145_new_sys_guid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNotice_data_details_ntc_145 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_145_new_sys_guid_get { smNotice_data_details_ntc_145 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_145_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_145_new_sys_guid_get. Expected _smNotice_data_details_ntc_145_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)smNotice_data_details_ntc_145_new_sys_guid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_145MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_145 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_145_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_pad1_set;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_lid_set;
                }  else if (strcmp(_str,"-pad2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_pad2_set;
                }  else if (strcmp(_str,"-new_sys_guid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_new_sys_guid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pad1 -lid -pad2 -new_sys_guid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pad1 -lid -pad2 -new_sys_guid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_pad1_get;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_lid_get;
                }  else if (strcmp(_str,"-pad2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_pad2_get;
                }  else if (strcmp(_str,"-new_sys_guid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_145_new_sys_guid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_145_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pad1 -lid -pad2 -new_sys_guid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pad1 -lid -pad2 -new_sys_guid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_145_pad1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_145_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_145_pad2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_145_new_sys_guid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-new_sys_guid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_145Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_145 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_145_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_145_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_145 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_145MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_256_pad1_set(_swigobj,_swigval) (_swigobj->pad1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_pad1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_pad1_set { smNotice_data_details_ntc_256 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_pad1_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_pad1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_pad1_get(_swigobj) (&_swigobj->pad1)
static int _wrap_smNotice_data_details_ntc_256_pad1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_pad1_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_pad1_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_pad1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_lid_set(_swigobj,_swigval) (_swigobj->lid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_lid_set { smNotice_data_details_ntc_256 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_lid_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_lid_get(_swigobj) (&_swigobj->lid)
static int _wrap_smNotice_data_details_ntc_256_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_lid_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_lid_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_pad2_set(_swigobj,_swigval) (_swigobj->pad2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_pad2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_pad2_set { smNotice_data_details_ntc_256 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_pad2_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_pad2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_pad2_get(_swigobj) (&_swigobj->pad2)
static int _wrap_smNotice_data_details_ntc_256_pad2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_pad2_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_pad2_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_pad2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_method_set(_swigobj,_swigval) (_swigobj->method = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_method_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_method_set { smNotice_data_details_ntc_256 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_method_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_method_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_method_get(_swigobj) (&_swigobj->method)
static int _wrap_smNotice_data_details_ntc_256_method_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_method_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_method_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_method_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_pad3_set(_swigobj,_swigval) (_swigobj->pad3 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_pad3_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_pad3_set { smNotice_data_details_ntc_256 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_pad3_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_pad3_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_pad3_get(_swigobj) (&_swigobj->pad3)
static int _wrap_smNotice_data_details_ntc_256_pad3_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_pad3_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_pad3_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_pad3_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_attr_id_set(_swigobj,_swigval) (_swigobj->attr_id = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_attr_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_attr_id_set { smNotice_data_details_ntc_256 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_attr_id_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_attr_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_attr_id_get(_swigobj) (&_swigobj->attr_id)
static int _wrap_smNotice_data_details_ntc_256_attr_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_attr_id_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_attr_id_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_256_attr_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_attr_mod_set(_swigobj,_swigval) (_swigobj->attr_mod = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_attr_mod_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_attr_mod_set { smNotice_data_details_ntc_256 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_attr_mod_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_256_attr_mod_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_attr_mod_get(_swigobj) (&_swigobj->attr_mod)
static int _wrap_smNotice_data_details_ntc_256_attr_mod_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_attr_mod_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_attr_mod_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_256_attr_mod_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_mkey_set(_swigobj,_swigval) (_swigobj->mkey = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_mkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_mkey_set { smNotice_data_details_ntc_256 * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_mkey_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)smNotice_data_details_ntc_256_mkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_mkey_get(_swigobj) (&_swigobj->mkey)
static int _wrap_smNotice_data_details_ntc_256_mkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_mkey_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_mkey_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)smNotice_data_details_ntc_256_mkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_dr_slid_set(_swigobj,_swigval) (_swigobj->dr_slid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_dr_slid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_dr_slid_set { smNotice_data_details_ntc_256 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_dr_slid_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_dr_slid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_dr_slid_get(_swigobj) (&_swigobj->dr_slid)
static int _wrap_smNotice_data_details_ntc_256_dr_slid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_dr_slid_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_dr_slid_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_dr_slid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_dr_trunc_hop_set(_swigobj,_swigval) (_swigobj->dr_trunc_hop = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_dr_trunc_hop_set { smNotice_data_details_ntc_256 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_dr_trunc_hop_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_dr_trunc_hop_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_dr_trunc_hop_get(_swigobj) (&_swigobj->dr_trunc_hop)
static int _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_dr_trunc_hop_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_dr_trunc_hop_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_256_dr_trunc_hop_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static uint8_array_t * smNotice_data_details_ntc_256_dr_rtn_path_set(smNotice_data_details_ntc_256 *obj, uint8_array_t val[30]) {
{
	int i;
	for (i=0; i <30 ; i++) {
		obj->dr_rtn_path[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_smNotice_data_details_ntc_256_dr_rtn_path_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[30];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_dr_rtn_path_set { smNotice_data_details_ntc_256 * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_dr_rtn_path_set. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 30))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 30; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)smNotice_data_details_ntc_256_dr_rtn_path_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <30 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_256_dr_rtn_path_get(_swigobj) ((uint8_array_t *) _swigobj->dr_rtn_path)
static int _wrap_smNotice_data_details_ntc_256_dr_rtn_path_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    smNotice_data_details_ntc_256 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_256_dr_rtn_path_get { smNotice_data_details_ntc_256 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_256_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_256_dr_rtn_path_get. Expected _smNotice_data_details_ntc_256_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)smNotice_data_details_ntc_256_dr_rtn_path_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <30 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_256MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_256 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_256_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_pad1_set;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_lid_set;
                }  else if (strcmp(_str,"-pad2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_pad2_set;
                }  else if (strcmp(_str,"-method") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_method_set;
                }  else if (strcmp(_str,"-pad3") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_pad3_set;
                }  else if (strcmp(_str,"-attr_id") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_attr_id_set;
                }  else if (strcmp(_str,"-attr_mod") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_attr_mod_set;
                }  else if (strcmp(_str,"-mkey") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_mkey_set;
                }  else if (strcmp(_str,"-dr_slid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_dr_slid_set;
                }  else if (strcmp(_str,"-dr_trunc_hop") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_set;
                }  else if (strcmp(_str,"-dr_rtn_path") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_dr_rtn_path_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pad1 -lid -pad2 -method -pad3 -attr_id -attr_mod -mkey -dr_slid -dr_trunc_hop -dr_rtn_path  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pad1 -lid -pad2 -method -pad3 -attr_id -attr_mod -mkey -dr_slid -dr_trunc_hop -dr_rtn_path  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_pad1_get;
                }  else if (strcmp(_str,"-lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_lid_get;
                }  else if (strcmp(_str,"-pad2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_pad2_get;
                }  else if (strcmp(_str,"-method") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_method_get;
                }  else if (strcmp(_str,"-pad3") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_pad3_get;
                }  else if (strcmp(_str,"-attr_id") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_attr_id_get;
                }  else if (strcmp(_str,"-attr_mod") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_attr_mod_get;
                }  else if (strcmp(_str,"-mkey") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_mkey_get;
                }  else if (strcmp(_str,"-dr_slid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_dr_slid_get;
                }  else if (strcmp(_str,"-dr_trunc_hop") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_get;
                }  else if (strcmp(_str,"-dr_rtn_path") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_256_dr_rtn_path_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_256_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pad1 -lid -pad2 -method -pad3 -attr_id -attr_mod -mkey -dr_slid -dr_trunc_hop -dr_rtn_path  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pad1 -lid -pad2 -method -pad3 -attr_id -attr_mod -mkey -dr_slid -dr_trunc_hop -dr_rtn_path  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_256_pad1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_pad2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_method_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-method ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_pad3_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad3 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_attr_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-attr_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_attr_mod_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-attr_mod ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_mkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-mkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_dr_slid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dr_slid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dr_trunc_hop ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_256_dr_rtn_path_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dr_rtn_path ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_256Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_256 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_256_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_256_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_256 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_256MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_257_258_pad1_set(_swigobj,_swigval) (_swigobj->pad1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_pad1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_pad1_set { smNotice_data_details_ntc_257_258 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_pad1_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_257_258_pad1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_pad1_get(_swigobj) (&_swigobj->pad1)
static int _wrap_smNotice_data_details_ntc_257_258_pad1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_pad1_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_pad1_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_257_258_pad1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_lid1_set(_swigobj,_swigval) (_swigobj->lid1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_lid1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_lid1_set { smNotice_data_details_ntc_257_258 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_lid1_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_257_258_lid1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_lid1_get(_swigobj) (&_swigobj->lid1)
static int _wrap_smNotice_data_details_ntc_257_258_lid1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_lid1_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_lid1_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_257_258_lid1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_lid2_set(_swigobj,_swigval) (_swigobj->lid2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_lid2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_lid2_set { smNotice_data_details_ntc_257_258 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_lid2_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_257_258_lid2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_lid2_get(_swigobj) (&_swigobj->lid2)
static int _wrap_smNotice_data_details_ntc_257_258_lid2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_lid2_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_lid2_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_257_258_lid2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_key_set(_swigobj,_swigval) (_swigobj->key = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_key_set { smNotice_data_details_ntc_257_258 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_key_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_257_258_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_key_get(_swigobj) (&_swigobj->key)
static int _wrap_smNotice_data_details_ntc_257_258_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_key_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_key_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_257_258_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_sl_set(_swigobj,_swigval) (_swigobj->sl = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_sl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_sl_set { smNotice_data_details_ntc_257_258 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_sl_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_257_258_sl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_sl_get(_swigobj) (&_swigobj->sl)
static int _wrap_smNotice_data_details_ntc_257_258_sl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_sl_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_sl_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_257_258_sl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_qp1_set(_swigobj,_swigval) (_swigobj->qp1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_qp1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_qp1_set { smNotice_data_details_ntc_257_258 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_qp1_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_257_258_qp1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_qp1_get(_swigobj) (&_swigobj->qp1)
static int _wrap_smNotice_data_details_ntc_257_258_qp1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_qp1_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_qp1_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_257_258_qp1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_qp2_set(_swigobj,_swigval) (_swigobj->qp2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_qp2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_qp2_set { smNotice_data_details_ntc_257_258 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_qp2_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_257_258_qp2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_qp2_get(_swigobj) (&_swigobj->qp2)
static int _wrap_smNotice_data_details_ntc_257_258_qp2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_qp2_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_qp2_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_257_258_qp2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_gid1_set(_swigobj,_swigval) (_swigobj->gid1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_gid1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_gid1_set { smNotice_data_details_ntc_257_258 * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_gid1_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[38];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  p_guid = strtok_r(NULL, " ", &str_token);
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  errno = 0;
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_257_258_gid1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_gid1_get(_swigobj) (&_swigobj->gid1)
static int _wrap_smNotice_data_details_ntc_257_258_gid1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_gid1_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_gid1_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_257_258_gid1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_gid2_set(_swigobj,_swigval) (_swigobj->gid2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_257_258_gid2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_gid2_set { smNotice_data_details_ntc_257_258 * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_gid2_set. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[38];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  p_guid = strtok_r(NULL, " ", &str_token);
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  errno = 0;
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_257_258_gid2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_257_258_gid2_get(_swigobj) (&_swigobj->gid2)
static int _wrap_smNotice_data_details_ntc_257_258_gid2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_257_258 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_257_258_gid2_get { smNotice_data_details_ntc_257_258 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_257_258_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_257_258_gid2_get. Expected _smNotice_data_details_ntc_257_258_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_257_258_gid2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_257_258MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_257_258 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_257_258_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_pad1_set;
                }  else if (strcmp(_str,"-lid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_lid1_set;
                }  else if (strcmp(_str,"-lid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_lid2_set;
                }  else if (strcmp(_str,"-key") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_key_set;
                }  else if (strcmp(_str,"-sl") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_sl_set;
                }  else if (strcmp(_str,"-qp1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_qp1_set;
                }  else if (strcmp(_str,"-qp2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_qp2_set;
                }  else if (strcmp(_str,"-gid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_gid1_set;
                }  else if (strcmp(_str,"-gid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_gid2_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -pad1 -lid1 -lid2 -key -sl -qp1 -qp2 -gid1 -gid2  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -pad1 -lid1 -lid2 -key -sl -qp1 -qp2 -gid1 -gid2  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-pad1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_pad1_get;
                }  else if (strcmp(_str,"-lid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_lid1_get;
                }  else if (strcmp(_str,"-lid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_lid2_get;
                }  else if (strcmp(_str,"-key") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_key_get;
                }  else if (strcmp(_str,"-sl") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_sl_get;
                }  else if (strcmp(_str,"-qp1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_qp1_get;
                }  else if (strcmp(_str,"-qp2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_qp2_get;
                }  else if (strcmp(_str,"-gid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_gid1_get;
                }  else if (strcmp(_str,"-gid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_257_258_gid2_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_257_258_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -pad1 -lid1 -lid2 -key -sl -qp1 -qp2 -gid1 -gid2  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -pad1 -lid1 -lid2 -key -sl -qp1 -qp2 -gid1 -gid2  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_257_258_pad1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-pad1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_lid1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_lid2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_sl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_qp1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qp1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_qp2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qp2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_gid1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-gid1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_257_258_gid2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-gid2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_257_258Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_257_258 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_257_258_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_257_258_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_257_258 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_257_258MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define smNotice_data_details_ntc_259_data_valid_set(_swigobj,_swigval) (_swigobj->data_valid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_data_valid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_data_valid_set { smNotice_data_details_ntc_259 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_data_valid_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_data_valid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_data_valid_get(_swigobj) (&_swigobj->data_valid)
static int _wrap_smNotice_data_details_ntc_259_data_valid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_data_valid_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_data_valid_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_data_valid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_lid1_set(_swigobj,_swigval) (_swigobj->lid1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_lid1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_lid1_set { smNotice_data_details_ntc_259 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_lid1_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_lid1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_lid1_get(_swigobj) (&_swigobj->lid1)
static int _wrap_smNotice_data_details_ntc_259_lid1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_lid1_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_lid1_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_lid1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_lid2_set(_swigobj,_swigval) (_swigobj->lid2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_lid2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_lid2_set { smNotice_data_details_ntc_259 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_lid2_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_lid2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_lid2_get(_swigobj) (&_swigobj->lid2)
static int _wrap_smNotice_data_details_ntc_259_lid2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_lid2_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_lid2_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_lid2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_key_set(_swigobj,_swigval) (_swigobj->key = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_key_set { smNotice_data_details_ntc_259 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_key_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_259_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_key_get(_swigobj) (&_swigobj->key)
static int _wrap_smNotice_data_details_ntc_259_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_key_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_key_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_259_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_sl_set(_swigobj,_swigval) (_swigobj->sl = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_sl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_sl_set { smNotice_data_details_ntc_259 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_sl_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_259_sl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_sl_get(_swigobj) (&_swigobj->sl)
static int _wrap_smNotice_data_details_ntc_259_sl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_sl_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_sl_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_259_sl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_qp1_set(_swigobj,_swigval) (_swigobj->qp1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_qp1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_qp1_set { smNotice_data_details_ntc_259 * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_qp1_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_259_qp1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_qp1_get(_swigobj) (&_swigobj->qp1)
static int _wrap_smNotice_data_details_ntc_259_qp1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_qp1_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_qp1_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)smNotice_data_details_ntc_259_qp1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_qp2_msb_set(_swigobj,_swigval) (_swigobj->qp2_msb = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_qp2_msb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_qp2_msb_set { smNotice_data_details_ntc_259 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_qp2_msb_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_259_qp2_msb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_qp2_msb_get(_swigobj) (&_swigobj->qp2_msb)
static int _wrap_smNotice_data_details_ntc_259_qp2_msb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_qp2_msb_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_qp2_msb_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_259_qp2_msb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_qp2_lsb_set(_swigobj,_swigval) (_swigobj->qp2_lsb = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_qp2_lsb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_qp2_lsb_set { smNotice_data_details_ntc_259 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_qp2_lsb_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_qp2_lsb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_qp2_lsb_get(_swigobj) (&_swigobj->qp2_lsb)
static int _wrap_smNotice_data_details_ntc_259_qp2_lsb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_qp2_lsb_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_qp2_lsb_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_qp2_lsb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_gid1_set(_swigobj,_swigval) (_swigobj->gid1 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_gid1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_gid1_set { smNotice_data_details_ntc_259 * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_gid1_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[38];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  p_guid = strtok_r(NULL, " ", &str_token);
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  errno = 0;
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_259_gid1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_gid1_get(_swigobj) (&_swigobj->gid1)
static int _wrap_smNotice_data_details_ntc_259_gid1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_gid1_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_gid1_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_259_gid1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_gid2_set(_swigobj,_swigval) (_swigobj->gid2 = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_gid2_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_gid2_set { smNotice_data_details_ntc_259 * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_gid2_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char buf[38];
  char *p_prefix, *p_guid;
  char *str_token = NULL;

  strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
  p_prefix = strtok_r(buf,":", &str_token);
  p_guid = strtok_r(NULL, " ", &str_token);
  temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
  errno = 0;
  if (errno) {
    printf("Wrong format for gid prefix:%s\n", p_prefix);
    return TCL_ERROR;
  }

  temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
  if (errno) {
    printf("Wrong format for gid guid:%s\n", p_guid);
    return TCL_ERROR;
  }

  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_259_gid2_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_gid2_get(_swigobj) (&_swigobj->gid2)
static int _wrap_smNotice_data_details_ntc_259_gid2_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_gid2_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_gid2_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)smNotice_data_details_ntc_259_gid2_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_sw_lid_set(_swigobj,_swigval) (_swigobj->sw_lid = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_sw_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_sw_lid_set { smNotice_data_details_ntc_259 * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_sw_lid_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_sw_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_sw_lid_get(_swigobj) (&_swigobj->sw_lid)
static int _wrap_smNotice_data_details_ntc_259_sw_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_sw_lid_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_sw_lid_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)smNotice_data_details_ntc_259_sw_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_port_no_set(_swigobj,_swigval) (_swigobj->port_no = *(_swigval),_swigval)
static int _wrap_smNotice_data_details_ntc_259_port_no_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_port_no_set { smNotice_data_details_ntc_259 * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_port_no_set. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_259_port_no_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define smNotice_data_details_ntc_259_port_no_get(_swigobj) (&_swigobj->port_no)
static int _wrap_smNotice_data_details_ntc_259_port_no_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    smNotice_data_details_ntc_259 * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. smNotice_data_details_ntc_259_port_no_get { smNotice_data_details_ntc_259 * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_smNotice_data_details_ntc_259_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of smNotice_data_details_ntc_259_port_no_get. Expected _smNotice_data_details_ntc_259_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)smNotice_data_details_ntc_259_port_no_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclsmNotice_data_details_ntc_259MethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"smNotice_data_details_ntc_259 methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_smNotice_data_details_ntc_259_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-data_valid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_data_valid_set;
                }  else if (strcmp(_str,"-lid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_lid1_set;
                }  else if (strcmp(_str,"-lid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_lid2_set;
                }  else if (strcmp(_str,"-key") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_key_set;
                }  else if (strcmp(_str,"-sl") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_sl_set;
                }  else if (strcmp(_str,"-qp1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_qp1_set;
                }  else if (strcmp(_str,"-qp2_msb") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_qp2_msb_set;
                }  else if (strcmp(_str,"-qp2_lsb") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_qp2_lsb_set;
                }  else if (strcmp(_str,"-gid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_gid1_set;
                }  else if (strcmp(_str,"-gid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_gid2_set;
                }  else if (strcmp(_str,"-sw_lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_sw_lid_set;
                }  else if (strcmp(_str,"-port_no") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_port_no_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -data_valid -lid1 -lid2 -key -sl -qp1 -qp2_msb -qp2_lsb -gid1 -gid2 -sw_lid -port_no  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -data_valid -lid1 -lid2 -key -sl -qp1 -qp2_msb -qp2_lsb -gid1 -gid2 -sw_lid -port_no  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-data_valid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_data_valid_get;
                }  else if (strcmp(_str,"-lid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_lid1_get;
                }  else if (strcmp(_str,"-lid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_lid2_get;
                }  else if (strcmp(_str,"-key") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_key_get;
                }  else if (strcmp(_str,"-sl") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_sl_get;
                }  else if (strcmp(_str,"-qp1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_qp1_get;
                }  else if (strcmp(_str,"-qp2_msb") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_qp2_msb_get;
                }  else if (strcmp(_str,"-qp2_lsb") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_qp2_lsb_get;
                }  else if (strcmp(_str,"-gid1") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_gid1_get;
                }  else if (strcmp(_str,"-gid2") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_gid2_get;
                }  else if (strcmp(_str,"-sw_lid") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_sw_lid_get;
                }  else if (strcmp(_str,"-port_no") == 0) {
                    cmd = _wrap_smNotice_data_details_ntc_259_port_no_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_smNotice_data_details_ntc_259_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -data_valid -lid1 -lid2 -key -sl -qp1 -qp2_msb -qp2_lsb -gid1 -gid2 -sw_lid -port_no  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -data_valid -lid1 -lid2 -key -sl -qp1 -qp2_msb -qp2_lsb -gid1 -gid2 -sw_lid -port_no  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_smNotice_data_details_ntc_259_data_valid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-data_valid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_lid1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_lid2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lid2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_sl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_qp1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qp1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_qp2_msb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qp2_msb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_qp2_lsb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-qp2_lsb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_gid1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-gid1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_gid2_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-gid2 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_sw_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sw_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_smNotice_data_details_ntc_259_port_no_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_no ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclsmNotice_data_details_ntc_259Cmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    smNotice_data_details_ntc_259 * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_smNotice_data_details_ntc_259_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_smNotice_data_details_ntc_259_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a smNotice_data_details_ntc_259 object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclsmNotice_data_details_ntc_259MethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibcc_class_port_info_base_ver_set(_swigobj,_swigval) (_swigobj->base_ver = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_base_ver_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccClassPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_base_ver_set { ccClassPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_base_ver_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_class_port_info_base_ver_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_base_ver_get(_swigobj) (&_swigobj->base_ver)
static int _wrap_ccClassPortInfo_base_ver_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_base_ver_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_base_ver_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_class_port_info_base_ver_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_class_ver_set(_swigobj,_swigval) (_swigobj->class_ver = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_class_ver_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccClassPortInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_class_ver_set { ccClassPortInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_class_ver_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_class_port_info_class_ver_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_class_ver_get(_swigobj) (&_swigobj->class_ver)
static int _wrap_ccClassPortInfo_class_ver_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_class_ver_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_class_ver_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_class_port_info_class_ver_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_cap_mask_set(_swigobj,_swigval) (_swigobj->cap_mask = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_cap_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_cap_mask_set { ccClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_cap_mask_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_cap_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_cap_mask_get(_swigobj) (&_swigobj->cap_mask)
static int _wrap_ccClassPortInfo_cap_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_cap_mask_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_cap_mask_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_cap_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_cap_mask2_resp_time_set(_swigobj,_swigval) (_swigobj->cap_mask2_resp_time = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_cap_mask2_resp_time_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_cap_mask2_resp_time_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_cap_mask2_resp_time_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_cap_mask2_resp_time_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_cap_mask2_resp_time_get(_swigobj) (&_swigobj->cap_mask2_resp_time)
static int _wrap_ccClassPortInfo_cap_mask2_resp_time_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_cap_mask2_resp_time_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_cap_mask2_resp_time_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_cap_mask2_resp_time_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_gid_set(_swigobj,_swigval) (_swigobj->redir_gid = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_redir_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccClassPortInfo * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_gid_set { ccClassPortInfo * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_gid_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	char buf[38];
	char *p_prefix, *p_guid;
	char *str_token = NULL;

	strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
	p_prefix = strtok_r(buf,":", &str_token);
	p_guid = strtok_r(NULL, " ", &str_token);
	temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
	errno = 0;
	if (errno) {
		printf("Wrong format for gid prefix:%s\n", p_prefix);
		return TCL_ERROR;
	}

	temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
	if (errno) {
		printf("Wrong format for gid guid:%s\n", p_guid);
		return TCL_ERROR;
	}

	_arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_class_port_info_redir_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_gid_get(_swigobj) (&_swigobj->redir_gid)
static int _wrap_ccClassPortInfo_redir_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_gid_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_gid_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_class_port_info_redir_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_tc_sl_fl_set(_swigobj,_swigval) (_swigobj->redir_tc_sl_fl = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_redir_tc_sl_fl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_tc_sl_fl_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_tc_sl_fl_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_redir_tc_sl_fl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_tc_sl_fl_get(_swigobj) (&_swigobj->redir_tc_sl_fl)
static int _wrap_ccClassPortInfo_redir_tc_sl_fl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_tc_sl_fl_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_tc_sl_fl_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_redir_tc_sl_fl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_lid_set(_swigobj,_swigval) (_swigobj->redir_lid = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_redir_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_lid_set { ccClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_lid_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_redir_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_lid_get(_swigobj) (&_swigobj->redir_lid)
static int _wrap_ccClassPortInfo_redir_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_lid_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_lid_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_redir_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_pkey_set(_swigobj,_swigval) (_swigobj->redir_pkey = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_redir_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_pkey_set { ccClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_pkey_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_redir_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_pkey_get(_swigobj) (&_swigobj->redir_pkey)
static int _wrap_ccClassPortInfo_redir_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_pkey_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_pkey_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_redir_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_qp_set(_swigobj,_swigval) (_swigobj->redir_qp = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_redir_qp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_qp_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_qp_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_redir_qp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_qp_get(_swigobj) (&_swigobj->redir_qp)
static int _wrap_ccClassPortInfo_redir_qp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_qp_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_qp_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_redir_qp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_qkey_set(_swigobj,_swigval) (_swigobj->redir_qkey = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_redir_qkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_qkey_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_qkey_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_redir_qkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_redir_qkey_get(_swigobj) (&_swigobj->redir_qkey)
static int _wrap_ccClassPortInfo_redir_qkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_redir_qkey_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_redir_qkey_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_redir_qkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_gid_set(_swigobj,_swigval) (_swigobj->trap_gid = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_trap_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccClassPortInfo * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_gid_set { ccClassPortInfo * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_gid_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	char buf[38];
	char *p_prefix, *p_guid;
	char *str_token = NULL;

	strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
	p_prefix = strtok_r(buf,":", &str_token);
	p_guid = strtok_r(NULL, " ", &str_token);
	temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
	errno = 0;
	if (errno) {
		printf("Wrong format for gid prefix:%s\n", p_prefix);
		return TCL_ERROR;
	}

	temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
	if (errno) {
		printf("Wrong format for gid guid:%s\n", p_guid);
		return TCL_ERROR;
	}

	_arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_class_port_info_trap_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_gid_get(_swigobj) (&_swigobj->trap_gid)
static int _wrap_ccClassPortInfo_trap_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_gid_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_gid_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_class_port_info_trap_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_tc_sl_fl_set(_swigobj,_swigval) (_swigobj->trap_tc_sl_fl = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_trap_tc_sl_fl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_tc_sl_fl_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_tc_sl_fl_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_trap_tc_sl_fl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_tc_sl_fl_get(_swigobj) (&_swigobj->trap_tc_sl_fl)
static int _wrap_ccClassPortInfo_trap_tc_sl_fl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_tc_sl_fl_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_tc_sl_fl_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_trap_tc_sl_fl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_lid_set(_swigobj,_swigval) (_swigobj->trap_lid = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_trap_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_lid_set { ccClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_lid_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_trap_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_lid_get(_swigobj) (&_swigobj->trap_lid)
static int _wrap_ccClassPortInfo_trap_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_lid_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_lid_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_trap_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_pkey_set(_swigobj,_swigval) (_swigobj->trap_pkey = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_trap_pkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_pkey_set { ccClassPortInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_pkey_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_trap_pkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_pkey_get(_swigobj) (&_swigobj->trap_pkey)
static int _wrap_ccClassPortInfo_trap_pkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_pkey_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_pkey_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_class_port_info_trap_pkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_hop_qp_set(_swigobj,_swigval) (_swigobj->trap_hop_qp = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_trap_hop_qp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_hop_qp_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_hop_qp_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_trap_hop_qp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_hop_qp_get(_swigobj) (&_swigobj->trap_hop_qp)
static int _wrap_ccClassPortInfo_trap_hop_qp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_hop_qp_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_hop_qp_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_trap_hop_qp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_qkey_set(_swigobj,_swigval) (_swigobj->trap_qkey = *(_swigval),_swigval)
static int _wrap_ccClassPortInfo_trap_qkey_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_qkey_set { ccClassPortInfo * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_qkey_set. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_trap_qkey_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_class_port_info_trap_qkey_get(_swigobj) (&_swigobj->trap_qkey)
static int _wrap_ccClassPortInfo_trap_qkey_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccClassPortInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_trap_qkey_get { ccClassPortInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_trap_qkey_get. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_class_port_info_trap_qkey_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  ccClassPortInfo_getByLid(ccClassPortInfo *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccClassPortInfo), // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CLASS_PORT_INFO),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccClassPortInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccClassPortInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_getByLid { ccClassPortInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_getByLid. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccClassPortInfo_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  ccClassPortInfo_setByLid(ccClassPortInfo *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid(
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccClassPortInfo), // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CLASS_PORT_INFO),
			0,                       // attribute modifier
			IB_MAD_METHOD_SET);
	}
static int _wrap_ccClassPortInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccClassPortInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccClassPortInfo_setByLid { ccClassPortInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccClassPortInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccClassPortInfo_setByLid. Expected _ccClassPortInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccClassPortInfo_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccClassPortInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccClassPortInfo methods : { dump cget configure getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccClassPortInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccClassPortInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_ccClassPortInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-base_ver") == 0) {
                    cmd = _wrap_ccClassPortInfo_base_ver_set;
                }  else if (strcmp(_str,"-class_ver") == 0) {
                    cmd = _wrap_ccClassPortInfo_class_ver_set;
                }  else if (strcmp(_str,"-cap_mask") == 0) {
                    cmd = _wrap_ccClassPortInfo_cap_mask_set;
                }  else if (strcmp(_str,"-cap_mask2_resp_time") == 0) {
                    cmd = _wrap_ccClassPortInfo_cap_mask2_resp_time_set;
                }  else if (strcmp(_str,"-redir_gid") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_gid_set;
                }  else if (strcmp(_str,"-redir_tc_sl_fl") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_tc_sl_fl_set;
                }  else if (strcmp(_str,"-redir_lid") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_lid_set;
                }  else if (strcmp(_str,"-redir_pkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_pkey_set;
                }  else if (strcmp(_str,"-redir_qp") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_qp_set;
                }  else if (strcmp(_str,"-redir_qkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_qkey_set;
                }  else if (strcmp(_str,"-trap_gid") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_gid_set;
                }  else if (strcmp(_str,"-trap_tc_sl_fl") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_tc_sl_fl_set;
                }  else if (strcmp(_str,"-trap_lid") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_lid_set;
                }  else if (strcmp(_str,"-trap_pkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_pkey_set;
                }  else if (strcmp(_str,"-trap_hop_qp") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_hop_qp_set;
                }  else if (strcmp(_str,"-trap_qkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_qkey_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-base_ver") == 0) {
                    cmd = _wrap_ccClassPortInfo_base_ver_get;
                }  else if (strcmp(_str,"-class_ver") == 0) {
                    cmd = _wrap_ccClassPortInfo_class_ver_get;
                }  else if (strcmp(_str,"-cap_mask") == 0) {
                    cmd = _wrap_ccClassPortInfo_cap_mask_get;
                }  else if (strcmp(_str,"-cap_mask2_resp_time") == 0) {
                    cmd = _wrap_ccClassPortInfo_cap_mask2_resp_time_get;
                }  else if (strcmp(_str,"-redir_gid") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_gid_get;
                }  else if (strcmp(_str,"-redir_tc_sl_fl") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_tc_sl_fl_get;
                }  else if (strcmp(_str,"-redir_lid") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_lid_get;
                }  else if (strcmp(_str,"-redir_pkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_pkey_get;
                }  else if (strcmp(_str,"-redir_qp") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_qp_get;
                }  else if (strcmp(_str,"-redir_qkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_redir_qkey_get;
                }  else if (strcmp(_str,"-trap_gid") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_gid_get;
                }  else if (strcmp(_str,"-trap_tc_sl_fl") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_tc_sl_fl_get;
                }  else if (strcmp(_str,"-trap_lid") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_lid_get;
                }  else if (strcmp(_str,"-trap_pkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_pkey_get;
                }  else if (strcmp(_str,"-trap_hop_qp") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_hop_qp_get;
                }  else if (strcmp(_str,"-trap_qkey") == 0) {
                    cmd = _wrap_ccClassPortInfo_trap_qkey_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccClassPortInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -base_ver -class_ver -cap_mask -cap_mask2_resp_time -redir_gid -redir_tc_sl_fl -redir_lid -redir_pkey -redir_qp -redir_qkey -trap_gid -trap_tc_sl_fl -trap_lid -trap_pkey -trap_hop_qp -trap_qkey  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccClassPortInfo_base_ver_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-base_ver ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_class_ver_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-class_ver ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_cap_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cap_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_cap_mask2_resp_time_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cap_mask2_resp_time ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_redir_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_redir_tc_sl_fl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_tc_sl_fl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_redir_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_redir_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_redir_qp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_qp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_redir_qkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-redir_qkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_trap_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_trap_tc_sl_fl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_tc_sl_fl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_trap_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_trap_pkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_pkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_trap_hop_qp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_hop_qp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccClassPortInfo_trap_qkey_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trap_qkey ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccClassPortInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccClassPortInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccClassPortInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccClassPortInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccClassPortInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccClassPortInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibcc_notice_generic_type_set(_swigobj,_swigval) (_swigobj->generic_type = *(_swigval),_swigval)
static int _wrap_ccNotice_generic_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic_type_set { ccNotice * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic_type_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_generic_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic_type_get(_swigobj) (&_swigobj->generic_type)
static int _wrap_ccNotice_generic_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic_type_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic_type_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_generic_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic__prod_type_msb_set(_swigobj,_swigval) (_swigobj->generic__prod_type_msb = *(_swigval),_swigval)
static int _wrap_ccNotice_generic__prod_type_msb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic__prod_type_msb_set { ccNotice * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic__prod_type_msb_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_generic__prod_type_msb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic__prod_type_msb_get(_swigobj) (&_swigobj->generic__prod_type_msb)
static int _wrap_ccNotice_generic__prod_type_msb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic__prod_type_msb_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic__prod_type_msb_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_generic__prod_type_msb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic__prod_type_lsb_set(_swigobj,_swigval) (_swigobj->generic__prod_type_lsb = *(_swigval),_swigval)
static int _wrap_ccNotice_generic__prod_type_lsb_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic__prod_type_lsb_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic__prod_type_lsb_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_generic__prod_type_lsb_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic__prod_type_lsb_get(_swigobj) (&_swigobj->generic__prod_type_lsb)
static int _wrap_ccNotice_generic__prod_type_lsb_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic__prod_type_lsb_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic__prod_type_lsb_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_generic__prod_type_lsb_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic__trap_num_set(_swigobj,_swigval) (_swigobj->generic__trap_num = *(_swigval),_swigval)
static int _wrap_ccNotice_generic__trap_num_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic__trap_num_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic__trap_num_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_generic__trap_num_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_generic__trap_num_get(_swigobj) (&_swigobj->generic__trap_num)
static int _wrap_ccNotice_generic__trap_num_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_generic__trap_num_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_generic__trap_num_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_generic__trap_num_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_issuer_lid_set(_swigobj,_swigval) (_swigobj->issuer_lid = *(_swigval),_swigval)
static int _wrap_ccNotice_issuer_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_issuer_lid_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_issuer_lid_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_issuer_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_issuer_lid_get(_swigobj) (&_swigobj->issuer_lid)
static int _wrap_ccNotice_issuer_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_issuer_lid_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_issuer_lid_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_issuer_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_toggle_count_set(_swigobj,_swigval) (_swigobj->toggle_count = *(_swigval),_swigval)
static int _wrap_ccNotice_toggle_count_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_toggle_count_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_toggle_count_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_toggle_count_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_toggle_count_get(_swigobj) (&_swigobj->toggle_count)
static int _wrap_ccNotice_toggle_count_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_toggle_count_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_toggle_count_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_toggle_count_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__source_lid_set(_swigobj,_swigval) (_swigobj->ntc0__source_lid = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__source_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__source_lid_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__source_lid_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_ntc0__source_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__source_lid_get(_swigobj) (&_swigobj->ntc0__source_lid)
static int _wrap_ccNotice_ntc0__source_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__source_lid_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__source_lid_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_ntc0__source_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__method_set(_swigobj,_swigval) (_swigobj->ntc0__method = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__method_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__method_set { ccNotice * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__method_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_ntc0__method_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__method_get(_swigobj) (&_swigobj->ntc0__method)
static int _wrap_ccNotice_ntc0__method_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__method_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__method_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_ntc0__method_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__resv0_set(_swigobj,_swigval) (_swigobj->ntc0__resv0 = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__resv0_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__resv0_set { ccNotice * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__resv0_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_ntc0__resv0_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__resv0_get(_swigobj) (&_swigobj->ntc0__resv0)
static int _wrap_ccNotice_ntc0__resv0_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__resv0_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__resv0_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ibcc_notice_ntc0__resv0_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__attr_id_set(_swigobj,_swigval) (_swigobj->ntc0__attr_id = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__attr_id_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__attr_id_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__attr_id_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_ntc0__attr_id_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__attr_id_get(_swigobj) (&_swigobj->ntc0__attr_id)
static int _wrap_ccNotice_ntc0__attr_id_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__attr_id_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__attr_id_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_ntc0__attr_id_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__resv1_set(_swigobj,_swigval) (_swigobj->ntc0__resv1 = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__resv1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__resv1_set { ccNotice * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__resv1_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_ntc0__resv1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__resv1_get(_swigobj) (&_swigobj->ntc0__resv1)
static int _wrap_ccNotice_ntc0__resv1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__resv1_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__resv1_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_notice_ntc0__resv1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__attr_mod_set(_swigobj,_swigval) (_swigobj->ntc0__attr_mod = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__attr_mod_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccNotice * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__attr_mod_set { ccNotice * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__attr_mod_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_notice_ntc0__attr_mod_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__attr_mod_get(_swigobj) (&_swigobj->ntc0__attr_mod)
static int _wrap_ccNotice_ntc0__attr_mod_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__attr_mod_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__attr_mod_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_notice_ntc0__attr_mod_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__qp_set(_swigobj,_swigval) (_swigobj->ntc0__qp = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__qp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccNotice * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__qp_set { ccNotice * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__qp_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_notice_ntc0__qp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__qp_get(_swigobj) (&_swigobj->ntc0__qp)
static int _wrap_ccNotice_ntc0__qp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__qp_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__qp_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ibcc_notice_ntc0__qp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__cc_key_set(_swigobj,_swigval) (_swigobj->ntc0__cc_key = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__cc_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    ccNotice * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__cc_key_set { ccNotice * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__cc_key_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibcc_notice_ntc0__cc_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__cc_key_get(_swigobj) (&_swigobj->ntc0__cc_key)
static int _wrap_ccNotice_ntc0__cc_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__cc_key_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__cc_key_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ibcc_notice_ntc0__cc_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__source_gid_set(_swigobj,_swigval) (_swigobj->ntc0__source_gid = *(_swigval),_swigval)
static int _wrap_ccNotice_ntc0__source_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccNotice * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__source_gid_set { ccNotice * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__source_gid_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	char buf[38];
	char *p_prefix, *p_guid;
	char *str_token = NULL;

	strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
	p_prefix = strtok_r(buf,":", &str_token);
	p_guid = strtok_r(NULL, " ", &str_token);
	temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
	errno = 0;
	if (errno) {
		printf("Wrong format for gid prefix:%s\n", p_prefix);
		return TCL_ERROR;
	}

	temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
	if (errno) {
		printf("Wrong format for gid guid:%s\n", p_guid);
		return TCL_ERROR;
	}

	_arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_notice_ntc0__source_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__source_gid_get(_swigobj) (&_swigobj->ntc0__source_gid)
static int _wrap_ccNotice_ntc0__source_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__source_gid_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__source_gid_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_notice_ntc0__source_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static uint8_array_t * _ibcc_notice_ntc0__padding_set(ccNotice *obj, uint8_array_t val[14]) {
{
	int i;
	for (i=0; i <14 ; i++) {
		obj->ntc0__padding[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_ccNotice_ntc0__padding_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccNotice * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[14];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__padding_set { ccNotice * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__padding_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 14))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 14; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ibcc_notice_ntc0__padding_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <14 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibcc_notice_ntc0__padding_get(_swigobj) ((uint8_array_t *) _swigobj->ntc0__padding)
static int _wrap_ccNotice_ntc0__padding_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_ntc0__padding_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_ntc0__padding_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ibcc_notice_ntc0__padding_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <14 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ibcc_notice_issuer_gid_set(_swigobj,_swigval) (_swigobj->issuer_gid = *(_swigval),_swigval)
static int _wrap_ccNotice_issuer_gid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccNotice * _arg0;
    ib_gid_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_gid_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_issuer_gid_set { ccNotice * } { ib_gid_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_issuer_gid_set. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	char buf[38];
	char *p_prefix, *p_guid;
	char *str_token = NULL;

	strcpy(buf, Tcl_GetStringFromObj(objv[2],NULL));
	p_prefix = strtok_r(buf,":", &str_token);
	p_guid = strtok_r(NULL, " ", &str_token);
	temp.unicast.prefix = cl_hton64(strtoull(p_prefix, NULL, 16));
	errno = 0;
	if (errno) {
		printf("Wrong format for gid prefix:%s\n", p_prefix);
		return TCL_ERROR;
	}

	temp.unicast.interface_id = cl_hton64(strtoull(p_guid, NULL, 16));
	if (errno) {
		printf("Wrong format for gid guid:%s\n", p_guid);
		return TCL_ERROR;
	}

	_arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_notice_issuer_gid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_notice_issuer_gid_get(_swigobj) (&_swigobj->issuer_gid)
static int _wrap_ccNotice_issuer_gid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_gid_t * _result;
    ccNotice * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_issuer_gid_get { ccNotice * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_issuer_gid_get. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_gid_t *)_ibcc_notice_issuer_gid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[38];
  sprintf(buff, "0x%016" PRIx64 ":0x%016" PRIx64,
          cl_ntoh64(_result->unicast.prefix),
          cl_ntoh64(_result->unicast.interface_id)
          );
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  ccNotice_trapByLid(ccNotice *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid(
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccNotice),        // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_NOTICE),
			0,                       // attribute modifier
			IB_MAD_METHOD_TRAP);
	}
static int _wrap_ccNotice_trapByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccNotice * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccNotice_trapByLid { ccNotice * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccNotice_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccNotice_trapByLid. Expected _ccNotice_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccNotice_trapByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccNoticeMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccNotice methods : { dump cget configure trapByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccNotice_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"trapByLid") == 0) {
        cmd = _wrap_ccNotice_trapByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-generic_type") == 0) {
                    cmd = _wrap_ccNotice_generic_type_set;
                }  else if (strcmp(_str,"-generic__prod_type_msb") == 0) {
                    cmd = _wrap_ccNotice_generic__prod_type_msb_set;
                }  else if (strcmp(_str,"-generic__prod_type_lsb") == 0) {
                    cmd = _wrap_ccNotice_generic__prod_type_lsb_set;
                }  else if (strcmp(_str,"-generic__trap_num") == 0) {
                    cmd = _wrap_ccNotice_generic__trap_num_set;
                }  else if (strcmp(_str,"-issuer_lid") == 0) {
                    cmd = _wrap_ccNotice_issuer_lid_set;
                }  else if (strcmp(_str,"-toggle_count") == 0) {
                    cmd = _wrap_ccNotice_toggle_count_set;
                }  else if (strcmp(_str,"-ntc0__source_lid") == 0) {
                    cmd = _wrap_ccNotice_ntc0__source_lid_set;
                }  else if (strcmp(_str,"-ntc0__method") == 0) {
                    cmd = _wrap_ccNotice_ntc0__method_set;
                }  else if (strcmp(_str,"-ntc0__resv0") == 0) {
                    cmd = _wrap_ccNotice_ntc0__resv0_set;
                }  else if (strcmp(_str,"-ntc0__attr_id") == 0) {
                    cmd = _wrap_ccNotice_ntc0__attr_id_set;
                }  else if (strcmp(_str,"-ntc0__resv1") == 0) {
                    cmd = _wrap_ccNotice_ntc0__resv1_set;
                }  else if (strcmp(_str,"-ntc0__attr_mod") == 0) {
                    cmd = _wrap_ccNotice_ntc0__attr_mod_set;
                }  else if (strcmp(_str,"-ntc0__qp") == 0) {
                    cmd = _wrap_ccNotice_ntc0__qp_set;
                }  else if (strcmp(_str,"-ntc0__cc_key") == 0) {
                    cmd = _wrap_ccNotice_ntc0__cc_key_set;
                }  else if (strcmp(_str,"-ntc0__source_gid") == 0) {
                    cmd = _wrap_ccNotice_ntc0__source_gid_set;
                }  else if (strcmp(_str,"-ntc0__padding") == 0) {
                    cmd = _wrap_ccNotice_ntc0__padding_set;
                }  else if (strcmp(_str,"-issuer_gid") == 0) {
                    cmd = _wrap_ccNotice_issuer_gid_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -generic_type -generic__prod_type_msb -generic__prod_type_lsb -generic__trap_num -issuer_lid -toggle_count -ntc0__source_lid -ntc0__method -ntc0__resv0 -ntc0__attr_id -ntc0__resv1 -ntc0__attr_mod -ntc0__qp -ntc0__cc_key -ntc0__source_gid -ntc0__padding -issuer_gid  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -generic_type -generic__prod_type_msb -generic__prod_type_lsb -generic__trap_num -issuer_lid -toggle_count -ntc0__source_lid -ntc0__method -ntc0__resv0 -ntc0__attr_id -ntc0__resv1 -ntc0__attr_mod -ntc0__qp -ntc0__cc_key -ntc0__source_gid -ntc0__padding -issuer_gid  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-generic_type") == 0) {
                    cmd = _wrap_ccNotice_generic_type_get;
                }  else if (strcmp(_str,"-generic__prod_type_msb") == 0) {
                    cmd = _wrap_ccNotice_generic__prod_type_msb_get;
                }  else if (strcmp(_str,"-generic__prod_type_lsb") == 0) {
                    cmd = _wrap_ccNotice_generic__prod_type_lsb_get;
                }  else if (strcmp(_str,"-generic__trap_num") == 0) {
                    cmd = _wrap_ccNotice_generic__trap_num_get;
                }  else if (strcmp(_str,"-issuer_lid") == 0) {
                    cmd = _wrap_ccNotice_issuer_lid_get;
                }  else if (strcmp(_str,"-toggle_count") == 0) {
                    cmd = _wrap_ccNotice_toggle_count_get;
                }  else if (strcmp(_str,"-ntc0__source_lid") == 0) {
                    cmd = _wrap_ccNotice_ntc0__source_lid_get;
                }  else if (strcmp(_str,"-ntc0__method") == 0) {
                    cmd = _wrap_ccNotice_ntc0__method_get;
                }  else if (strcmp(_str,"-ntc0__resv0") == 0) {
                    cmd = _wrap_ccNotice_ntc0__resv0_get;
                }  else if (strcmp(_str,"-ntc0__attr_id") == 0) {
                    cmd = _wrap_ccNotice_ntc0__attr_id_get;
                }  else if (strcmp(_str,"-ntc0__resv1") == 0) {
                    cmd = _wrap_ccNotice_ntc0__resv1_get;
                }  else if (strcmp(_str,"-ntc0__attr_mod") == 0) {
                    cmd = _wrap_ccNotice_ntc0__attr_mod_get;
                }  else if (strcmp(_str,"-ntc0__qp") == 0) {
                    cmd = _wrap_ccNotice_ntc0__qp_get;
                }  else if (strcmp(_str,"-ntc0__cc_key") == 0) {
                    cmd = _wrap_ccNotice_ntc0__cc_key_get;
                }  else if (strcmp(_str,"-ntc0__source_gid") == 0) {
                    cmd = _wrap_ccNotice_ntc0__source_gid_get;
                }  else if (strcmp(_str,"-ntc0__padding") == 0) {
                    cmd = _wrap_ccNotice_ntc0__padding_get;
                }  else if (strcmp(_str,"-issuer_gid") == 0) {
                    cmd = _wrap_ccNotice_issuer_gid_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccNotice_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -generic_type -generic__prod_type_msb -generic__prod_type_lsb -generic__trap_num -issuer_lid -toggle_count -ntc0__source_lid -ntc0__method -ntc0__resv0 -ntc0__attr_id -ntc0__resv1 -ntc0__attr_mod -ntc0__qp -ntc0__cc_key -ntc0__source_gid -ntc0__padding -issuer_gid  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -generic_type -generic__prod_type_msb -generic__prod_type_lsb -generic__trap_num -issuer_lid -toggle_count -ntc0__source_lid -ntc0__method -ntc0__resv0 -ntc0__attr_id -ntc0__resv1 -ntc0__attr_mod -ntc0__qp -ntc0__cc_key -ntc0__source_gid -ntc0__padding -issuer_gid  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccNotice_generic_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_generic__prod_type_msb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic__prod_type_msb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_generic__prod_type_lsb_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic__prod_type_lsb ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_generic__trap_num_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-generic__trap_num ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_issuer_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-issuer_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_toggle_count_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-toggle_count ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__source_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__source_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__method_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__method ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__resv0_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__resv0 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__attr_id_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__attr_id ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__resv1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__resv1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__attr_mod_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__attr_mod ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__qp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__qp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__cc_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__cc_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__source_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__source_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_ntc0__padding_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ntc0__padding ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccNotice_issuer_gid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-issuer_gid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure trapByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccNoticeCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccNotice * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccNotice_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccNotice_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccNotice object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccNoticeMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_cong_info_cong_info_set(_swigobj,_swigval) (_swigobj->cong_info = *(_swigval),_swigval)
static int _wrap_ccCongestionInfo_cong_info_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCongestionInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_cong_info_set { ccCongestionInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_cong_info_set. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_cong_info_cong_info_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_info_cong_info_get(_swigobj) (&_swigobj->cong_info)
static int _wrap_ccCongestionInfo_cong_info_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCongestionInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_cong_info_get { ccCongestionInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_cong_info_get. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_cong_info_cong_info_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_info_resv_set(_swigobj,_swigval) (_swigobj->resv = *(_swigval),_swigval)
static int _wrap_ccCongestionInfo_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCongestionInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_resv_set { ccCongestionInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_resv_set. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_cong_info_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_info_resv_get(_swigobj) (&_swigobj->resv)
static int _wrap_ccCongestionInfo_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCongestionInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_resv_get { ccCongestionInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_resv_get. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_cong_info_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_info_ctrl_table_cap_set(_swigobj,_swigval) (_swigobj->ctrl_table_cap = *(_swigval),_swigval)
static int _wrap_ccCongestionInfo_ctrl_table_cap_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCongestionInfo * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_ctrl_table_cap_set { ccCongestionInfo * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_ctrl_table_cap_set. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_cong_info_ctrl_table_cap_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_info_ctrl_table_cap_get(_swigobj) (&_swigobj->ctrl_table_cap)
static int _wrap_ccCongestionInfo_ctrl_table_cap_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCongestionInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_ctrl_table_cap_get { ccCongestionInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_ctrl_table_cap_get. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_cong_info_ctrl_table_cap_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  ccCongestionInfo_getByLid(ccCongestionInfo *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                     // log data
			0,                        // log data size
			(uint8_t *)self,          // mgt data
			sizeof(ccCongestionInfo), // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CONG_INFO),
			0,                        // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccCongestionInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccCongestionInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionInfo_getByLid { ccCongestionInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionInfo_getByLid. Expected _ccCongestionInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccCongestionInfo_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccCongestionInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccCongestionInfo methods : { dump cget configure getByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccCongestionInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccCongestionInfo_getByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-cong_info") == 0) {
                    cmd = _wrap_ccCongestionInfo_cong_info_set;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_ccCongestionInfo_resv_set;
                }  else if (strcmp(_str,"-ctrl_table_cap") == 0) {
                    cmd = _wrap_ccCongestionInfo_ctrl_table_cap_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -cong_info -resv -ctrl_table_cap  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -cong_info -resv -ctrl_table_cap  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-cong_info") == 0) {
                    cmd = _wrap_ccCongestionInfo_cong_info_get;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_ccCongestionInfo_resv_get;
                }  else if (strcmp(_str,"-ctrl_table_cap") == 0) {
                    cmd = _wrap_ccCongestionInfo_ctrl_table_cap_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccCongestionInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -cong_info -resv -ctrl_table_cap  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -cong_info -resv -ctrl_table_cap  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccCongestionInfo_cong_info_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cong_info ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCongestionInfo_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCongestionInfo_ctrl_table_cap_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ctrl_table_cap ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccCongestionInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccCongestionInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccCongestionInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccCongestionInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccCongestionInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccCongestionInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_cong_key_info_cc_key_set(_swigobj,_swigval) (_swigobj->cc_key = *(_swigval),_swigval)
static int _wrap_ccCongestionKeyInfo_cc_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    ccCongestionKeyInfo * _arg0;
    ib_net64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_cc_key_set { ccCongestionKeyInfo * } { ib_net64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_cc_key_set. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton64(strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL, 16));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_cong_key_info_cc_key_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_cc_key_get(_swigobj) (&_swigobj->cc_key)
static int _wrap_ccCongestionKeyInfo_cc_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net64_t * _result;
    ccCongestionKeyInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_cc_key_get { ccCongestionKeyInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_cc_key_get. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net64_t *)_ib_cong_key_info_cc_key_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, cl_ntoh64(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_protect_bit_set(_swigobj,_swigval) (_swigobj->protect_bit = *(_swigval),_swigval)
static int _wrap_ccCongestionKeyInfo_protect_bit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCongestionKeyInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_protect_bit_set { ccCongestionKeyInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_protect_bit_set. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_key_info_protect_bit_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_protect_bit_get(_swigobj) (&_swigobj->protect_bit)
static int _wrap_ccCongestionKeyInfo_protect_bit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCongestionKeyInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_protect_bit_get { ccCongestionKeyInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_protect_bit_get. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_key_info_protect_bit_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_lease_period_set(_swigobj,_swigval) (_swigobj->lease_period = *(_swigval),_swigval)
static int _wrap_ccCongestionKeyInfo_lease_period_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCongestionKeyInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_lease_period_set { ccCongestionKeyInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_lease_period_set. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_key_info_lease_period_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_lease_period_get(_swigobj) (&_swigobj->lease_period)
static int _wrap_ccCongestionKeyInfo_lease_period_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCongestionKeyInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_lease_period_get { ccCongestionKeyInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_lease_period_get. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_key_info_lease_period_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_violations_set(_swigobj,_swigval) (_swigobj->violations = *(_swigval),_swigval)
static int _wrap_ccCongestionKeyInfo_violations_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCongestionKeyInfo * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_violations_set { ccCongestionKeyInfo * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_violations_set. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_key_info_violations_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_key_info_violations_get(_swigobj) (&_swigobj->violations)
static int _wrap_ccCongestionKeyInfo_violations_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCongestionKeyInfo * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_violations_get { ccCongestionKeyInfo * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_violations_get. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_key_info_violations_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  ccCongestionKeyInfo_getByLid(ccCongestionKeyInfo *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccCongestionKeyInfo), // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CONG_KEY_INFO),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccCongestionKeyInfo_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccCongestionKeyInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_getByLid { ccCongestionKeyInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_getByLid. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccCongestionKeyInfo_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  ccCongestionKeyInfo_setByLid(ccCongestionKeyInfo *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid(
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccCongestionKeyInfo), // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CONG_KEY_INFO),
			0,                       // attribute modifier
			IB_MAD_METHOD_SET);
	}
static int _wrap_ccCongestionKeyInfo_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccCongestionKeyInfo * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCongestionKeyInfo_setByLid { ccCongestionKeyInfo * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCongestionKeyInfo_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCongestionKeyInfo_setByLid. Expected _ccCongestionKeyInfo_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccCongestionKeyInfo_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccCongestionKeyInfoMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccCongestionKeyInfo methods : { dump cget configure getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccCongestionKeyInfo_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccCongestionKeyInfo_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_ccCongestionKeyInfo_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-cc_key") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_cc_key_set;
                }  else if (strcmp(_str,"-protect_bit") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_protect_bit_set;
                }  else if (strcmp(_str,"-lease_period") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_lease_period_set;
                }  else if (strcmp(_str,"-violations") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_violations_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -cc_key -protect_bit -lease_period -violations  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -cc_key -protect_bit -lease_period -violations  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-cc_key") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_cc_key_get;
                }  else if (strcmp(_str,"-protect_bit") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_protect_bit_get;
                }  else if (strcmp(_str,"-lease_period") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_lease_period_get;
                }  else if (strcmp(_str,"-violations") == 0) {
                    cmd = _wrap_ccCongestionKeyInfo_violations_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccCongestionKeyInfo_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -cc_key -protect_bit -lease_period -violations  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -cc_key -protect_bit -lease_period -violations  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccCongestionKeyInfo_cc_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cc_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCongestionKeyInfo_protect_bit_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-protect_bit ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCongestionKeyInfo_lease_period_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-lease_period ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCongestionKeyInfo_violations_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-violations ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccCongestionKeyInfoCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccCongestionKeyInfo * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccCongestionKeyInfo_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccCongestionKeyInfo_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccCongestionKeyInfo object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccCongestionKeyInfoMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_cong_log_event_sw_slid_set(_swigobj,_swigval) (_swigobj->slid = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_sw_t_slid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_slid_set { ib_cong_log_event_sw_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_slid_set. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_sw_slid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_slid_get(_swigobj) (&_swigobj->slid)
static int _wrap_ib_cong_log_event_sw_t_slid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_slid_get { ib_cong_log_event_sw_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_slid_get. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_sw_slid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_dlid_set(_swigobj,_swigval) (_swigobj->dlid = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_sw_t_dlid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_dlid_set { ib_cong_log_event_sw_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_dlid_set. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_sw_dlid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_dlid_get(_swigobj) (&_swigobj->dlid)
static int _wrap_ib_cong_log_event_sw_t_dlid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_dlid_get { ib_cong_log_event_sw_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_dlid_get. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_sw_dlid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_sl_set(_swigobj,_swigval) (_swigobj->sl = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_sw_t_sl_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_sl_set { ib_cong_log_event_sw_t * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_sl_set. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_sw_sl_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_sl_get(_swigobj) (&_swigobj->sl)
static int _wrap_ib_cong_log_event_sw_t_sl_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_sl_get { ib_cong_log_event_sw_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_sl_get. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_sw_sl_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_time_stamp_set(_swigobj,_swigval) (_swigobj->time_stamp = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_sw_t_time_stamp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_time_stamp_set { ib_cong_log_event_sw_t * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_time_stamp_set. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_sw_time_stamp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_sw_time_stamp_get(_swigobj) (&_swigobj->time_stamp)
static int _wrap_ib_cong_log_event_sw_t_time_stamp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_sw_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_sw_t_time_stamp_get { ib_cong_log_event_sw_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_sw_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_sw_t_time_stamp_get. Expected _ib_cong_log_event_sw_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_sw_time_stamp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int Tclib_cong_log_event_sw_tMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ib_cong_log_event_sw_t methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ib_cong_log_event_sw_t_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-slid") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_slid_set;
                }  else if (strcmp(_str,"-dlid") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_dlid_set;
                }  else if (strcmp(_str,"-sl") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_sl_set;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_time_stamp_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -slid -dlid -sl -time_stamp  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -slid -dlid -sl -time_stamp  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-slid") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_slid_get;
                }  else if (strcmp(_str,"-dlid") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_dlid_get;
                }  else if (strcmp(_str,"-sl") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_sl_get;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ib_cong_log_event_sw_t_time_stamp_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ib_cong_log_event_sw_t_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -slid -dlid -sl -time_stamp  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -slid -dlid -sl -time_stamp  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ib_cong_log_event_sw_t_slid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-slid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_sw_t_dlid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-dlid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_sw_t_sl_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sl ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_sw_t_time_stamp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-time_stamp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int Tclib_cong_log_event_sw_tCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ib_cong_log_event_sw_t * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ib_cong_log_event_sw_t_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ib_cong_log_event_sw_t_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ib_cong_log_event_sw_t object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, Tclib_cong_log_event_sw_tMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_cong_log_event_ca_local_qp_resv0_set(_swigobj,_swigval) (_swigobj->local_qp_resv0 = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_ca_t_local_qp_resv0_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_local_qp_resv0_set { ib_cong_log_event_ca_t * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_local_qp_resv0_set. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_ca_local_qp_resv0_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_local_qp_resv0_get(_swigobj) (&_swigobj->local_qp_resv0)
static int _wrap_ib_cong_log_event_ca_t_local_qp_resv0_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_local_qp_resv0_get { ib_cong_log_event_ca_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_local_qp_resv0_get. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_ca_local_qp_resv0_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_remote_qp_sl_service_type_set(_swigobj,_swigval) (_swigobj->remote_qp_sl_service_type = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_remote_qp_sl_service_type_set { ib_cong_log_event_ca_t * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_remote_qp_sl_service_type_set. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_ca_remote_qp_sl_service_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_remote_qp_sl_service_type_get(_swigobj) (&_swigobj->remote_qp_sl_service_type)
static int _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_remote_qp_sl_service_type_get { ib_cong_log_event_ca_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_remote_qp_sl_service_type_get. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_ca_remote_qp_sl_service_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_remote_lid_set(_swigobj,_swigval) (_swigobj->remote_lid = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_ca_t_remote_lid_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_remote_lid_set { ib_cong_log_event_ca_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_remote_lid_set. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_ca_remote_lid_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_remote_lid_get(_swigobj) (&_swigobj->remote_lid)
static int _wrap_ib_cong_log_event_ca_t_remote_lid_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_remote_lid_get { ib_cong_log_event_ca_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_remote_lid_get. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_ca_remote_lid_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_resv1_set(_swigobj,_swigval) (_swigobj->resv1 = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_ca_t_resv1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_resv1_set { ib_cong_log_event_ca_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_resv1_set. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_ca_resv1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_resv1_get(_swigobj) (&_swigobj->resv1)
static int _wrap_ib_cong_log_event_ca_t_resv1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_resv1_get { ib_cong_log_event_ca_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_resv1_get. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cong_log_event_ca_resv1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_time_stamp_set(_swigobj,_swigval) (_swigobj->time_stamp = *(_swigval),_swigval)
static int _wrap_ib_cong_log_event_ca_t_time_stamp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_time_stamp_set { ib_cong_log_event_ca_t * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_time_stamp_set. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_ca_time_stamp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cong_log_event_ca_time_stamp_get(_swigobj) (&_swigobj->time_stamp)
static int _wrap_ib_cong_log_event_ca_t_time_stamp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ib_cong_log_event_ca_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cong_log_event_ca_t_time_stamp_get { ib_cong_log_event_ca_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cong_log_event_ca_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cong_log_event_ca_t_time_stamp_get. Expected _ib_cong_log_event_ca_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_cong_log_event_ca_time_stamp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int Tclib_cong_log_event_ca_tMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ib_cong_log_event_ca_t methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ib_cong_log_event_ca_t_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-local_qp_resv0") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_local_qp_resv0_set;
                }  else if (strcmp(_str,"-remote_qp_sl_service_type") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_set;
                }  else if (strcmp(_str,"-remote_lid") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_remote_lid_set;
                }  else if (strcmp(_str,"-resv1") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_resv1_set;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_time_stamp_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -local_qp_resv0 -remote_qp_sl_service_type -remote_lid -resv1 -time_stamp  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -local_qp_resv0 -remote_qp_sl_service_type -remote_lid -resv1 -time_stamp  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-local_qp_resv0") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_local_qp_resv0_get;
                }  else if (strcmp(_str,"-remote_qp_sl_service_type") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_get;
                }  else if (strcmp(_str,"-remote_lid") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_remote_lid_get;
                }  else if (strcmp(_str,"-resv1") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_resv1_get;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ib_cong_log_event_ca_t_time_stamp_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ib_cong_log_event_ca_t_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -local_qp_resv0 -remote_qp_sl_service_type -remote_lid -resv1 -time_stamp  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -local_qp_resv0 -remote_qp_sl_service_type -remote_lid -resv1 -time_stamp  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ib_cong_log_event_ca_t_local_qp_resv0_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-local_qp_resv0 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-remote_qp_sl_service_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_ca_t_remote_lid_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-remote_lid ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_ca_t_resv1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_cong_log_event_ca_t_time_stamp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-time_stamp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int Tclib_cong_log_event_ca_tCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ib_cong_log_event_ca_t * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ib_cong_log_event_ca_t_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ib_cong_log_event_ca_t_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ib_cong_log_event_ca_t object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, Tclib_cong_log_event_ca_tMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_sw_cong_log_log_type_set(_swigobj,_swigval) (_swigobj->log_type = *(_swigval),_swigval)
static int _wrap_ccSWCongestionLog_log_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionLog * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_log_type_set { ccSWCongestionLog * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_log_type_set. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_log_log_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_log_type_get(_swigobj) (&_swigobj->log_type)
static int _wrap_ccSWCongestionLog_log_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_log_type_get { ccSWCongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_log_type_get. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_log_log_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_cong_flags_set(_swigobj,_swigval) (_swigobj->cong_flags = *(_swigval),_swigval)
static int _wrap_ccSWCongestionLog_cong_flags_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionLog * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_cong_flags_set { ccSWCongestionLog * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_cong_flags_set. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_log_cong_flags_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_cong_flags_get(_swigobj) (&_swigobj->cong_flags)
static int _wrap_ccSWCongestionLog_cong_flags_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_cong_flags_get { ccSWCongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_cong_flags_get. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_log_cong_flags_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_event_counter_set(_swigobj,_swigval) (_swigobj->event_counter = *(_swigval),_swigval)
static int _wrap_ccSWCongestionLog_event_counter_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionLog * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_event_counter_set { ccSWCongestionLog * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_event_counter_set. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_log_event_counter_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_event_counter_get(_swigobj) (&_swigobj->event_counter)
static int _wrap_ccSWCongestionLog_event_counter_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_event_counter_get { ccSWCongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_event_counter_get. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_log_event_counter_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_time_stamp_set(_swigobj,_swigval) (_swigobj->time_stamp = *(_swigval),_swigval)
static int _wrap_ccSWCongestionLog_time_stamp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccSWCongestionLog * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_time_stamp_set { ccSWCongestionLog * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_time_stamp_set. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_sw_cong_log_time_stamp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_log_time_stamp_get(_swigobj) (&_swigobj->time_stamp)
static int _wrap_ccSWCongestionLog_time_stamp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccSWCongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_time_stamp_get { ccSWCongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_time_stamp_get. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_sw_cong_log_time_stamp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static uint8_array_t * _ib_sw_cong_log_port_map_set(ccSWCongestionLog *obj, uint8_array_t val[32]) {
{
	int i;
	for (i=0; i <32 ; i++) {
		obj->port_map[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_ccSWCongestionLog_port_map_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccSWCongestionLog * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[32];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_port_map_set { ccSWCongestionLog * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_port_map_set. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 32))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 32; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_sw_cong_log_port_map_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_sw_cong_log_port_map_get(_swigobj) ((uint8_array_t *) _swigobj->port_map)
static int _wrap_ccSWCongestionLog_port_map_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccSWCongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_port_map_get { ccSWCongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_port_map_get. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_sw_cong_log_port_map_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static ib_cong_log_event_sw_t * _ib_sw_cong_log_entry_list_set(ccSWCongestionLog *obj, ib_cong_log_event_sw_t val[15]) {
{
	int i;
	for (i=0; i <15 ; i++) {
		obj->entry_list[i] = *(val+i);
	}
}
    return (ib_cong_log_event_sw_t *) val;
}
static int _wrap_ccSWCongestionLog_entry_list_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_cong_log_event_sw_t * _result;
    ccSWCongestionLog * _arg0;
    ib_cong_log_event_sw_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_cong_log_event_sw_t  entrys[15];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_entry_list_set { ccSWCongestionLog * } { ib_cong_log_event_sw_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_entry_list_set. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	long int value;
	long int entry_index = 0;
	int k;
	int countSubLists, numElements;
	int i = 0;
	int option = 0;
	Tcl_Obj ** subListObjArray;
	Tcl_Obj  * tclObj;

	if (Tcl_ListObjGetElements(interp, objv[2], &countSubLists, &subListObjArray) != TCL_OK)
	{
		printf("Error: wrong format for SW Congestion Log Event: %s\n",
			Tcl_GetStringFromObj(objv[2],NULL));
		return TCL_ERROR;
	}

	/* SW Congestion Log Event List should have up to 15 events */
	if (countSubLists > 15)
	{
		printf("Error: SW Congestion Log Event List should have up to %d events (provided %d)\n",
			15, countSubLists);
		return TCL_ERROR;
	}

	/*
	 * There are two options to configure log_event:
	 *   1. Configure the whole list by providing list of value groups:
	 *        ccSWCongestionLogMad configure -log_event {{1 2 3 4} {5 6 7 8}}
	 *   2. Configure specific items from the list by providing index in addition to the above:
	 *        ccSWCongestionLogMad configure -log_event {{4 1 2 3 4} {8 5 6 7 8}}
	 */

	if (countSubLists > 0) {

		/* check how many members does the first substring have */

		if (Tcl_ListObjLength(interp, subListObjArray[0], &numElements) != TCL_OK) {
			printf("Error: wrong format for SW Congestion Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}

		if (numElements == 4)
			option = 1;
		else if (numElements == 5)
			option = 2;
		else {
			printf("Error: wrong number of elements for SW Congestion Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}
	}
	else {
		/* if the user didn't specify anything, use option 1,
		   wich will effectively clear the whole list values */
		option = 1;
	}

	for (i = 0; i < 15; i++) {
		entrys[i].slid = 0;
		entrys[i].dlid = 0;
		entrys[i].sl = 0;
		entrys[i].time_stamp = 0;
	}

	if (option == 1) {
		/*
		 * first option - list of groups of four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for SW Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 4) {
				printf("Error: wrong number of elements for SW Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 4; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of SW Congestion Log Event: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entrys[i].slid = cl_hton16(value); break;
					case 1: entrys[i].dlid = cl_hton16(value); break;
					case 2: entrys[i].sl = cl_hton32(value); break;
					case 3: entrys[i].time_stamp = cl_hton32(value); break;
					default: break;
				}
			}
		}

	}
	else {
		/*
		 * second option - index and four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for SW Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 5) {
				printf("Error: wrong number of elements for SW Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 5; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of SW Congestion Log Event: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entry_index = value; break;
					case 1: entrys[entry_index].slid = cl_hton16(value); break;
					case 2: entrys[entry_index].dlid = cl_hton16(value); break;
					case 3: entrys[entry_index].sl = cl_hton32(value); break;
					case 4: entrys[entry_index].time_stamp = cl_hton32(value); break;
					default: break;
				}
			}

		}
	}

	_arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_cong_log_event_sw_t *)_ib_sw_cong_log_entry_list_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-entry_list\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <15 ; i++) {
		sprintf(buff, " {#%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -slid 0x%04x", cl_ntoh16(_result[i].slid));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -dlid 0x%04x", cl_ntoh16(_result[i].dlid));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -sl 0x%08x", cl_ntoh32(_result[i].sl));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -time_stamp 0x%08x", cl_ntoh32(_result[i].time_stamp));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
#define _ib_sw_cong_log_entry_list_get(_swigobj) ((ib_cong_log_event_sw_t *) _swigobj->entry_list)
static int _wrap_ccSWCongestionLog_entry_list_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_cong_log_event_sw_t * _result;
    ccSWCongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_entry_list_get { ccSWCongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_entry_list_get. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_cong_log_event_sw_t *)_ib_sw_cong_log_entry_list_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-entry_list\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <15 ; i++) {
		sprintf(buff, " {#%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -slid 0x%04x", cl_ntoh16(_result[i].slid));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -dlid 0x%04x", cl_ntoh16(_result[i].dlid));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -sl 0x%08x", cl_ntoh32(_result[i].sl));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -time_stamp 0x%08x", cl_ntoh32(_result[i].time_stamp));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
static int  ccSWCongestionLog_getByLid(ccSWCongestionLog *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			(uint8_t *)self,           // log data
			sizeof(ccSWCongestionLog), // log data size
			NULL,                      // mgt data
			0,                         // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CONG_LOG),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccSWCongestionLog_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccSWCongestionLog * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionLog_getByLid { ccSWCongestionLog * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionLog_getByLid. Expected _ccSWCongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccSWCongestionLog_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccSWCongestionLogMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccSWCongestionLog methods : { dump cget configure getByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccSWCongestionLog_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccSWCongestionLog_getByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-log_type") == 0) {
                    cmd = _wrap_ccSWCongestionLog_log_type_set;
                }  else if (strcmp(_str,"-cong_flags") == 0) {
                    cmd = _wrap_ccSWCongestionLog_cong_flags_set;
                }  else if (strcmp(_str,"-event_counter") == 0) {
                    cmd = _wrap_ccSWCongestionLog_event_counter_set;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ccSWCongestionLog_time_stamp_set;
                }  else if (strcmp(_str,"-port_map") == 0) {
                    cmd = _wrap_ccSWCongestionLog_port_map_set;
                }  else if (strcmp(_str,"-entry_list") == 0) {
                    cmd = _wrap_ccSWCongestionLog_entry_list_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -log_type -cong_flags -event_counter -time_stamp -port_map -entry_list  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -log_type -cong_flags -event_counter -time_stamp -port_map -entry_list  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-log_type") == 0) {
                    cmd = _wrap_ccSWCongestionLog_log_type_get;
                }  else if (strcmp(_str,"-cong_flags") == 0) {
                    cmd = _wrap_ccSWCongestionLog_cong_flags_get;
                }  else if (strcmp(_str,"-event_counter") == 0) {
                    cmd = _wrap_ccSWCongestionLog_event_counter_get;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ccSWCongestionLog_time_stamp_get;
                }  else if (strcmp(_str,"-port_map") == 0) {
                    cmd = _wrap_ccSWCongestionLog_port_map_get;
                }  else if (strcmp(_str,"-entry_list") == 0) {
                    cmd = _wrap_ccSWCongestionLog_entry_list_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccSWCongestionLog_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -log_type -cong_flags -event_counter -time_stamp -port_map -entry_list  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -log_type -cong_flags -event_counter -time_stamp -port_map -entry_list  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccSWCongestionLog_log_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-log_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionLog_cong_flags_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cong_flags ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionLog_event_counter_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-event_counter ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionLog_time_stamp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-time_stamp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionLog_port_map_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_map ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionLog_entry_list_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-entry_list ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccSWCongestionLogCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccSWCongestionLog * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccSWCongestionLog_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccSWCongestionLog_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccSWCongestionLog object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccSWCongestionLogMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_ca_cong_log_log_type_set(_swigobj,_swigval) (_swigobj->log_type = *(_swigval),_swigval)
static int _wrap_ccCACongestionLog_log_type_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCACongestionLog * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_log_type_set { ccCACongestionLog * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_log_type_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_log_log_type_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_log_type_get(_swigobj) (&_swigobj->log_type)
static int _wrap_ccCACongestionLog_log_type_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_log_type_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_log_type_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_log_log_type_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_cong_flags_set(_swigobj,_swigval) (_swigobj->cong_flags = *(_swigval),_swigval)
static int _wrap_ccCACongestionLog_cong_flags_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCACongestionLog * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_cong_flags_set { ccCACongestionLog * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_cong_flags_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_log_cong_flags_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_cong_flags_get(_swigobj) (&_swigobj->cong_flags)
static int _wrap_ccCACongestionLog_cong_flags_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_cong_flags_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_cong_flags_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_log_cong_flags_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_event_counter_set(_swigobj,_swigval) (_swigobj->event_counter = *(_swigval),_swigval)
static int _wrap_ccCACongestionLog_event_counter_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionLog * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_event_counter_set { ccCACongestionLog * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_event_counter_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_log_event_counter_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_event_counter_get(_swigobj) (&_swigobj->event_counter)
static int _wrap_ccCACongestionLog_event_counter_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_event_counter_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_event_counter_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_log_event_counter_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_event_map_set(_swigobj,_swigval) (_swigobj->event_map = *(_swigval),_swigval)
static int _wrap_ccCACongestionLog_event_map_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionLog * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_event_map_set { ccCACongestionLog * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_event_map_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_log_event_map_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_event_map_get(_swigobj) (&_swigobj->event_map)
static int _wrap_ccCACongestionLog_event_map_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_event_map_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_event_map_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_log_event_map_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_resv_set(_swigobj,_swigval) (_swigobj->resv = *(_swigval),_swigval)
static int _wrap_ccCACongestionLog_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionLog * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_resv_set { ccCACongestionLog * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_resv_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_log_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_resv_get(_swigobj) (&_swigobj->resv)
static int _wrap_ccCACongestionLog_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_resv_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_resv_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_log_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_time_stamp_set(_swigobj,_swigval) (_swigobj->time_stamp = *(_swigval),_swigval)
static int _wrap_ccCACongestionLog_time_stamp_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccCACongestionLog * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_time_stamp_set { ccCACongestionLog * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_time_stamp_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_ca_cong_log_time_stamp_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_log_time_stamp_get(_swigobj) (&_swigobj->time_stamp)
static int _wrap_ccCACongestionLog_time_stamp_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_time_stamp_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_time_stamp_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_ca_cong_log_time_stamp_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static ib_cong_log_event_ca_t * _ib_ca_cong_log_log_event_set(ccCACongestionLog *obj, ib_cong_log_event_ca_t val[13]) {
{
	int i;
	for (i=0; i <13 ; i++) {
		obj->log_event[i] = *(val+i);
	}
}
    return (ib_cong_log_event_ca_t *) val;
}
static int _wrap_ccCACongestionLog_log_event_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_cong_log_event_ca_t * _result;
    ccCACongestionLog * _arg0;
    ib_cong_log_event_ca_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_cong_log_event_ca_t  entrys[13];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_log_event_set { ccCACongestionLog * } { ib_cong_log_event_ca_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_log_event_set. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	long int value;
	long int entry_index = 0;
	int k;
	int countSubLists, numElements;
	int i = 0;
	int option = 0;
	Tcl_Obj ** subListObjArray;
	Tcl_Obj  * tclObj;

	if (Tcl_ListObjGetElements(interp, objv[2], &countSubLists, &subListObjArray) != TCL_OK)
	{
		printf("Error: wrong format for CA Congestion Log Event: %s\n",
			Tcl_GetStringFromObj(objv[2],NULL));
		return TCL_ERROR;
	}

	/* CA Congestion Log Event List should have up to 13 events */
	if (countSubLists > 13)
	{
		printf("Error: CA Congestion Log Event List should have up to %d events (provided %d)\n",
			13, countSubLists);
		return TCL_ERROR;
	}

	/*
	 * There are two options to configure log_event:
	 *   1. Configure the whole list by providing list of value groups:
	 *        ccCACongestionLogMad configure -log_event {{1 2 3 4} {5 6 7 8}}
	 *   2. Configure specific items from the list by providing index in addition to the above:
	 *        ccCACongestionLogMad configure -log_event {{4 1 2 3 4} {8 5 6 7 8}}
	 */

	if (countSubLists > 0) {

		/* check how many members does the first substring have */

		if (Tcl_ListObjLength(interp, subListObjArray[0], &numElements) != TCL_OK) {
			printf("Error: wrong format for CA Congestion Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}

		if (numElements == 4)
			option = 1;
		else if (numElements == 5)
			option = 2;
		else {
			printf("Error: wrong number of elements for CA Congestion Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}
	}
	else {
		/* if the user didn't specify anything, use option 1,
		   wich will effectively clear the whole list values */
		option = 1;
	}

	for (i = 0; i < 13; i++) {
		entrys[i].local_qp_resv0 = 0;
		entrys[i].remote_qp_sl_service_type = 0;
		entrys[i].remote_lid = 0;
		entrys[i].time_stamp = 0;
	}

	if (option == 1) {
		/*
		 * first option - list of groups of four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for CA Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 4) {
				printf("Error: wrong number of elements for CA Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 4; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of CA Congestion Log Event: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entrys[i].local_qp_resv0 = cl_hton32(value); break;
					case 1: entrys[i].remote_qp_sl_service_type = cl_hton32(value); break;
					case 2: entrys[i].remote_lid = cl_hton16(value); break;
					case 3: entrys[i].time_stamp = cl_hton32(value); break;
					default: break;
				}
			}
		}

	}
	else {
		/*
		 * second option - index and four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for CA Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 5) {
				printf("Error: wrong number of elements for CA Congestion Log Event: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 5; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of CA Congestion Log Event: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entry_index = value; break;
					case 1: entrys[entry_index].local_qp_resv0 = cl_hton32(value); break;
					case 2: entrys[entry_index].remote_qp_sl_service_type = cl_hton32(value); break;
					case 3: entrys[entry_index].remote_lid = cl_hton16(value); break;
					case 4: entrys[entry_index].time_stamp = cl_hton32(value); break;
					default: break;
				}
			}

		}
	}

	_arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_cong_log_event_ca_t *)_ib_ca_cong_log_log_event_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-log_event\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <13 ; i++) {
		sprintf(buff, " {#%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -local_qp_resv0 0x%08x", cl_ntoh32(_result[i].local_qp_resv0));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -remote_qp_sl_service_type 0x%08x", cl_ntoh32(_result[i].remote_qp_sl_service_type));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -remote_lid 0x%04x", cl_ntoh16(_result[i].remote_lid));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -time_stamp 0x%08x", cl_ntoh32(_result[i].time_stamp));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
#define _ib_ca_cong_log_log_event_get(_swigobj) ((ib_cong_log_event_ca_t *) _swigobj->log_event)
static int _wrap_ccCACongestionLog_log_event_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_cong_log_event_ca_t * _result;
    ccCACongestionLog * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_log_event_get { ccCACongestionLog * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_log_event_get. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_cong_log_event_ca_t *)_ib_ca_cong_log_log_event_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-log_event\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <13 ; i++) {
		sprintf(buff, " {#%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -local_qp_resv0 0x%08x", cl_ntoh32(_result[i].local_qp_resv0));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -remote_qp_sl_service_type 0x%08x", cl_ntoh32(_result[i].remote_qp_sl_service_type));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -remote_lid 0x%04x", cl_ntoh16(_result[i].remote_lid));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -time_stamp 0x%08x", cl_ntoh32(_result[i].time_stamp));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
static int  ccCACongestionLog_getByLid(ccCACongestionLog *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			(uint8_t *)self,           // log data
			sizeof(ccCACongestionLog), // log data size
			NULL,                      // mgt data
			0,                         // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CONG_LOG),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccCACongestionLog_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccCACongestionLog * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionLog_getByLid { ccCACongestionLog * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionLog_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionLog_getByLid. Expected _ccCACongestionLog_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccCACongestionLog_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccCACongestionLogMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccCACongestionLog methods : { dump cget configure getByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccCACongestionLog_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccCACongestionLog_getByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-log_type") == 0) {
                    cmd = _wrap_ccCACongestionLog_log_type_set;
                }  else if (strcmp(_str,"-cong_flags") == 0) {
                    cmd = _wrap_ccCACongestionLog_cong_flags_set;
                }  else if (strcmp(_str,"-event_counter") == 0) {
                    cmd = _wrap_ccCACongestionLog_event_counter_set;
                }  else if (strcmp(_str,"-event_map") == 0) {
                    cmd = _wrap_ccCACongestionLog_event_map_set;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_ccCACongestionLog_resv_set;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ccCACongestionLog_time_stamp_set;
                }  else if (strcmp(_str,"-log_event") == 0) {
                    cmd = _wrap_ccCACongestionLog_log_event_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -log_type -cong_flags -event_counter -event_map -resv -time_stamp -log_event  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -log_type -cong_flags -event_counter -event_map -resv -time_stamp -log_event  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-log_type") == 0) {
                    cmd = _wrap_ccCACongestionLog_log_type_get;
                }  else if (strcmp(_str,"-cong_flags") == 0) {
                    cmd = _wrap_ccCACongestionLog_cong_flags_get;
                }  else if (strcmp(_str,"-event_counter") == 0) {
                    cmd = _wrap_ccCACongestionLog_event_counter_get;
                }  else if (strcmp(_str,"-event_map") == 0) {
                    cmd = _wrap_ccCACongestionLog_event_map_get;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_ccCACongestionLog_resv_get;
                }  else if (strcmp(_str,"-time_stamp") == 0) {
                    cmd = _wrap_ccCACongestionLog_time_stamp_get;
                }  else if (strcmp(_str,"-log_event") == 0) {
                    cmd = _wrap_ccCACongestionLog_log_event_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccCACongestionLog_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -log_type -cong_flags -event_counter -event_map -resv -time_stamp -log_event  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -log_type -cong_flags -event_counter -event_map -resv -time_stamp -log_event  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccCACongestionLog_log_type_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-log_type ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionLog_cong_flags_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cong_flags ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionLog_event_counter_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-event_counter ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionLog_event_map_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-event_map ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionLog_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionLog_time_stamp_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-time_stamp ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionLog_log_event_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-log_event ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccCACongestionLogCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccCACongestionLog * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccCACongestionLog_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccCACongestionLog_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccCACongestionLog object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccCACongestionLogMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_sw_cong_setting_control_map_set(_swigobj,_swigval) (_swigobj->control_map = *(_swigval),_swigval)
static int _wrap_ccSWCongestionSetting_control_map_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccSWCongestionSetting * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_control_map_set { ccSWCongestionSetting * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_control_map_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_sw_cong_setting_control_map_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_control_map_get(_swigobj) (&_swigobj->control_map)
static int _wrap_ccSWCongestionSetting_control_map_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_control_map_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_control_map_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_sw_cong_setting_control_map_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static uint8_array_t * _ib_sw_cong_setting_victim_mask_set(ccSWCongestionSetting *obj, uint8_array_t val[32]) {
{
	int i;
	for (i=0; i <32 ; i++) {
		obj->victim_mask[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_ccSWCongestionSetting_victim_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccSWCongestionSetting * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[32];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_victim_mask_set { ccSWCongestionSetting * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_victim_mask_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 32))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 32; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_sw_cong_setting_victim_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_victim_mask_get(_swigobj) ((uint8_array_t *) _swigobj->victim_mask)
static int _wrap_ccSWCongestionSetting_victim_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_victim_mask_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_victim_mask_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_sw_cong_setting_victim_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
static uint8_array_t * _ib_sw_cong_setting_credit_mask_set(ccSWCongestionSetting *obj, uint8_array_t val[32]) {
{
	int i;
	for (i=0; i <32 ; i++) {
		obj->credit_mask[i] = *(val+i);
	}
}
    return (uint8_array_t *) val;
}
static int _wrap_ccSWCongestionSetting_credit_mask_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccSWCongestionSetting * _arg0;
    uint8_array_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  entrys[32];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_credit_mask_set { ccSWCongestionSetting * } { uint8_array_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_credit_mask_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  char *buff;
  char *p_ch;
  char *last;
  long int entry;

  int i = 0;
  buff = (char *)malloc((strlen(Tcl_GetStringFromObj(objv[2],NULL))+1)*sizeof(char));
  strcpy(buff, Tcl_GetStringFromObj(objv[2],NULL));
  p_ch = strtok_r(buff, " \t",&last);
  while (p_ch && (i < 32))
  {
    entry = strtol(p_ch, NULL, 0);
    if (entry > 0xff)
    {
      printf("Error: wrong format or out of range value for expected uint8_t entry: %s\n", p_ch);
      return TCL_ERROR;
    }
    entrys[i++] = entry;
    p_ch = strtok_r(NULL, " \t", &last);
  }
  for (; i < 32; i++) entrys[i] = 0;

  free(buff);
  _arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_sw_cong_setting_credit_mask_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_credit_mask_get(_swigobj) ((uint8_array_t *) _swigobj->credit_mask)
static int _wrap_ccSWCongestionSetting_credit_mask_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_array_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_credit_mask_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_credit_mask_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_array_t *)_ib_sw_cong_setting_credit_mask_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  int i;
  char buff[8];
  for (i=0; i <32 ; i++) {
    sprintf(buff, "0x%02x ", *(_result+i));
    Tcl_AppendResult(interp, buff, NULL);
  }
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_threshold_resv_set(_swigobj,_swigval) (_swigobj->threshold_resv = *(_swigval),_swigval)
static int _wrap_ccSWCongestionSetting_threshold_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionSetting * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_threshold_resv_set { ccSWCongestionSetting * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_threshold_resv_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_setting_threshold_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_threshold_resv_get(_swigobj) (&_swigobj->threshold_resv)
static int _wrap_ccSWCongestionSetting_threshold_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_threshold_resv_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_threshold_resv_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_setting_threshold_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_packet_size_set(_swigobj,_swigval) (_swigobj->packet_size = *(_swigval),_swigval)
static int _wrap_ccSWCongestionSetting_packet_size_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionSetting * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_packet_size_set { ccSWCongestionSetting * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_packet_size_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_setting_packet_size_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_packet_size_get(_swigobj) (&_swigobj->packet_size)
static int _wrap_ccSWCongestionSetting_packet_size_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_packet_size_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_packet_size_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_cong_setting_packet_size_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_cs_threshold_resv_set(_swigobj,_swigval) (_swigobj->cs_threshold_resv = *(_swigval),_swigval)
static int _wrap_ccSWCongestionSetting_cs_threshold_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionSetting * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_cs_threshold_resv_set { ccSWCongestionSetting * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_cs_threshold_resv_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_setting_cs_threshold_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_cs_threshold_resv_get(_swigobj) (&_swigobj->cs_threshold_resv)
static int _wrap_ccSWCongestionSetting_cs_threshold_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_cs_threshold_resv_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_cs_threshold_resv_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_setting_cs_threshold_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_cs_return_delay_set(_swigobj,_swigval) (_swigobj->cs_return_delay = *(_swigval),_swigval)
static int _wrap_ccSWCongestionSetting_cs_return_delay_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionSetting * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_cs_return_delay_set { ccSWCongestionSetting * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_cs_return_delay_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_setting_cs_return_delay_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_cs_return_delay_get(_swigobj) (&_swigobj->cs_return_delay)
static int _wrap_ccSWCongestionSetting_cs_return_delay_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_cs_return_delay_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_cs_return_delay_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_setting_cs_return_delay_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_marking_rate_set(_swigobj,_swigval) (_swigobj->marking_rate = *(_swigval),_swigval)
static int _wrap_ccSWCongestionSetting_marking_rate_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionSetting * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_marking_rate_set { ccSWCongestionSetting * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_marking_rate_set. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_setting_marking_rate_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_cong_setting_marking_rate_get(_swigobj) (&_swigobj->marking_rate)
static int _wrap_ccSWCongestionSetting_marking_rate_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccSWCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_marking_rate_get { ccSWCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_marking_rate_get. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_cong_setting_marking_rate_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  ccSWCongestionSetting_getByLid(ccSWCongestionSetting *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccSWCongestionSetting),// mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_SW_CONG_SETTING),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccSWCongestionSetting_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccSWCongestionSetting * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_getByLid { ccSWCongestionSetting * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_getByLid. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccSWCongestionSetting_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  ccSWCongestionSetting_setByLid(ccSWCongestionSetting *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccSWCongestionSetting),// mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_SW_CONG_SETTING),
			0,                       // attribute modifier
			IB_MAD_METHOD_SET);
	}
static int _wrap_ccSWCongestionSetting_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccSWCongestionSetting * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWCongestionSetting_setByLid { ccSWCongestionSetting * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWCongestionSetting_setByLid. Expected _ccSWCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccSWCongestionSetting_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccSWCongestionSettingMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccSWCongestionSetting methods : { dump cget configure getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccSWCongestionSetting_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccSWCongestionSetting_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_ccSWCongestionSetting_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-control_map") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_control_map_set;
                }  else if (strcmp(_str,"-victim_mask") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_victim_mask_set;
                }  else if (strcmp(_str,"-credit_mask") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_credit_mask_set;
                }  else if (strcmp(_str,"-threshold_resv") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_threshold_resv_set;
                }  else if (strcmp(_str,"-packet_size") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_packet_size_set;
                }  else if (strcmp(_str,"-cs_threshold_resv") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_cs_threshold_resv_set;
                }  else if (strcmp(_str,"-cs_return_delay") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_cs_return_delay_set;
                }  else if (strcmp(_str,"-marking_rate") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_marking_rate_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -control_map -victim_mask -credit_mask -threshold_resv -packet_size -cs_threshold_resv -cs_return_delay -marking_rate  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -control_map -victim_mask -credit_mask -threshold_resv -packet_size -cs_threshold_resv -cs_return_delay -marking_rate  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-control_map") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_control_map_get;
                }  else if (strcmp(_str,"-victim_mask") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_victim_mask_get;
                }  else if (strcmp(_str,"-credit_mask") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_credit_mask_get;
                }  else if (strcmp(_str,"-threshold_resv") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_threshold_resv_get;
                }  else if (strcmp(_str,"-packet_size") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_packet_size_get;
                }  else if (strcmp(_str,"-cs_threshold_resv") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_cs_threshold_resv_get;
                }  else if (strcmp(_str,"-cs_return_delay") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_cs_return_delay_get;
                }  else if (strcmp(_str,"-marking_rate") == 0) {
                    cmd = _wrap_ccSWCongestionSetting_marking_rate_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccSWCongestionSetting_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -control_map -victim_mask -credit_mask -threshold_resv -packet_size -cs_threshold_resv -cs_return_delay -marking_rate  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -control_map -victim_mask -credit_mask -threshold_resv -packet_size -cs_threshold_resv -cs_return_delay -marking_rate  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccSWCongestionSetting_control_map_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-control_map ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_victim_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-victim_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_credit_mask_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-credit_mask ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_threshold_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-threshold_resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_packet_size_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-packet_size ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_cs_threshold_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cs_threshold_resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_cs_return_delay_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cs_return_delay ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccSWCongestionSetting_marking_rate_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-marking_rate ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccSWCongestionSettingCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccSWCongestionSetting * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccSWCongestionSetting_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccSWCongestionSetting_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccSWCongestionSetting object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccSWCongestionSettingMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_sw_port_cong_setting_element_valid_ctrl_type_res_threshold_set(_swigobj,_swigval) (_swigobj->valid_ctrl_type_res_threshold = *(_swigval),_swigval)
static int _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_sw_port_cong_setting_element_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_set { ib_sw_port_cong_setting_element_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_sw_port_cong_setting_element_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_set. Expected _ib_sw_port_cong_setting_element_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_port_cong_setting_element_valid_ctrl_type_res_threshold_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_port_cong_setting_element_valid_ctrl_type_res_threshold_get(_swigobj) (&_swigobj->valid_ctrl_type_res_threshold)
static int _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_sw_port_cong_setting_element_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get { ib_sw_port_cong_setting_element_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_sw_port_cong_setting_element_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get. Expected _ib_sw_port_cong_setting_element_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_port_cong_setting_element_valid_ctrl_type_res_threshold_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_port_cong_setting_element_packet_size_set(_swigobj,_swigval) (_swigobj->packet_size = *(_swigval),_swigval)
static int _wrap_ib_sw_port_cong_setting_element_t_packet_size_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_sw_port_cong_setting_element_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_sw_port_cong_setting_element_t_packet_size_set { ib_sw_port_cong_setting_element_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_sw_port_cong_setting_element_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_sw_port_cong_setting_element_t_packet_size_set. Expected _ib_sw_port_cong_setting_element_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_port_cong_setting_element_packet_size_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_port_cong_setting_element_packet_size_get(_swigobj) (&_swigobj->packet_size)
static int _wrap_ib_sw_port_cong_setting_element_t_packet_size_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_sw_port_cong_setting_element_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_sw_port_cong_setting_element_t_packet_size_get { ib_sw_port_cong_setting_element_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_sw_port_cong_setting_element_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_sw_port_cong_setting_element_t_packet_size_get. Expected _ib_sw_port_cong_setting_element_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_sw_port_cong_setting_element_packet_size_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_port_cong_setting_element_cong_param_set(_swigobj,_swigval) (_swigobj->cong_param = *(_swigval),_swigval)
static int _wrap_ib_sw_port_cong_setting_element_t_cong_param_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_sw_port_cong_setting_element_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_sw_port_cong_setting_element_t_cong_param_set { ib_sw_port_cong_setting_element_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_sw_port_cong_setting_element_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_sw_port_cong_setting_element_t_cong_param_set. Expected _ib_sw_port_cong_setting_element_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_port_cong_setting_element_cong_param_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_sw_port_cong_setting_element_cong_param_get(_swigobj) (&_swigobj->cong_param)
static int _wrap_ib_sw_port_cong_setting_element_t_cong_param_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_sw_port_cong_setting_element_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_sw_port_cong_setting_element_t_cong_param_get { ib_sw_port_cong_setting_element_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_sw_port_cong_setting_element_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_sw_port_cong_setting_element_t_cong_param_get. Expected _ib_sw_port_cong_setting_element_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_sw_port_cong_setting_element_cong_param_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int Tclib_sw_port_cong_setting_element_tMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ib_sw_port_cong_setting_element_t methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ib_sw_port_cong_setting_element_t_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-valid_ctrl_type_res_threshold") == 0) {
                    cmd = _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_set;
                }  else if (strcmp(_str,"-packet_size") == 0) {
                    cmd = _wrap_ib_sw_port_cong_setting_element_t_packet_size_set;
                }  else if (strcmp(_str,"-cong_param") == 0) {
                    cmd = _wrap_ib_sw_port_cong_setting_element_t_cong_param_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -valid_ctrl_type_res_threshold -packet_size -cong_param  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -valid_ctrl_type_res_threshold -packet_size -cong_param  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-valid_ctrl_type_res_threshold") == 0) {
                    cmd = _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get;
                }  else if (strcmp(_str,"-packet_size") == 0) {
                    cmd = _wrap_ib_sw_port_cong_setting_element_t_packet_size_get;
                }  else if (strcmp(_str,"-cong_param") == 0) {
                    cmd = _wrap_ib_sw_port_cong_setting_element_t_cong_param_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ib_sw_port_cong_setting_element_t_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -valid_ctrl_type_res_threshold -packet_size -cong_param  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -valid_ctrl_type_res_threshold -packet_size -cong_param  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-valid_ctrl_type_res_threshold ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_sw_port_cong_setting_element_t_packet_size_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-packet_size ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_sw_port_cong_setting_element_t_cong_param_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-cong_param ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int Tclib_sw_port_cong_setting_element_tCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ib_sw_port_cong_setting_element_t * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ib_sw_port_cong_setting_element_t_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ib_sw_port_cong_setting_element_t_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ib_sw_port_cong_setting_element_t object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, Tclib_sw_port_cong_setting_element_tMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


static ib_sw_port_cong_setting_element_t * _ib_sw_port_cong_setting_block_set(ccSWPortCongestionSetting *obj, ib_sw_port_cong_setting_element_t val[32]) {
{
	int i;
	for (i=0; i <32 ; i++) {
		obj->block[i] = *(val+i);
	}
}
    return (ib_sw_port_cong_setting_element_t *) val;
}
static int _wrap_ccSWPortCongestionSetting_block_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_sw_port_cong_setting_element_t * _result;
    ccSWPortCongestionSetting * _arg0;
    ib_sw_port_cong_setting_element_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_sw_port_cong_setting_element_t  entrys[32];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWPortCongestionSetting_block_set { ccSWPortCongestionSetting * } { ib_sw_port_cong_setting_element_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWPortCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWPortCongestionSetting_block_set. Expected _ccSWPortCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	long int value;
	long int entry_index = 0;
	int k;
	int countSubLists, numElements;
	int i = 0;
	int option = 0;
	Tcl_Obj ** subListObjArray;
	Tcl_Obj  * tclObj;

	if (Tcl_ListObjGetElements(interp, objv[2], &countSubLists, &subListObjArray) != TCL_OK)
	{
		printf("Error: wrong format for SW Port Congestion Setting Element: %s\n",
			Tcl_GetStringFromObj(objv[2],NULL));
		return TCL_ERROR;
	}

	/* SwitchPortCongestionSetting Block list should have up to 32 blocks */
	if (countSubLists > 32)
	{
		printf("Error: SwitchPortCongestionSetting Block list should have up to %d blocks (provided %d)\n",
			32, countSubLists);
		return TCL_ERROR;
	}

	/*
	 * There are two options to configure entry_list:
	 *   1. Configure the whole list by providing list of value groups:
	 *        ccSWPortCongestionSettingMad configure -block {{1 2 3} {4 5 6}}
	 *   2. Configure specific items from the list by providing index in addition to the above:
	 *        ccSWPortCongestionSettingMad configure -block {{4 1 2 3} {8 4 5 6}}
	 */

	if (countSubLists > 0) {

		/* check how many members does the first substring have */

		if (Tcl_ListObjLength(interp, subListObjArray[0], &numElements) != TCL_OK) {
			printf("Error: wrong format for SW Port Congestion Setting Element: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}

		if (numElements == 3)
			option = 1;
		else if (numElements == 4)
			option = 2;
		else {
			printf("Error: wrong number of elements for SW Port Congestion Setting Element: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}
	}
	else {
		/* if the user didn't specify anything, use option 1,
		   wich will effectively clear the whole list values */
		option = 1;
	}

	for (i = 0; i < 32; i++) {
		entrys[i].valid_ctrl_type_res_threshold = 0;
		entrys[i].packet_size = 0;
		entrys[i].cong_param = 0;
	}

	if (option == 1) {
		/*
		 * first option - list of groups of four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for SW Port Congestion Setting Element: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 3) {
				printf("Error: wrong number of elements for SW Port Congestion Setting Element: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 3; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of SW Port Congestion Setting Element: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entrys[i].valid_ctrl_type_res_threshold = value; break;
					case 1: entrys[i].packet_size = value; break;
					case 2: entrys[i].cong_param = cl_hton16(value); break;
					default: break;
				}
			}
		}

	}
	else {
		/*
		 * second option - index and four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for SW Port Congestion Setting Element: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 4) {
				printf("Error: wrong number of elements for SW Port Congestion Setting Element: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 4; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of SW Port Congestion Setting Element: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entry_index = value; break;
					case 1: entrys[entry_index].valid_ctrl_type_res_threshold = value; break;
					case 2: entrys[entry_index].packet_size = value; break;
					case 3: entrys[entry_index].cong_param = cl_hton16(value); break;
					default: break;
				}
			}

		}
	}

	_arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_sw_port_cong_setting_element_t *)_ib_sw_port_cong_setting_block_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-block\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <32 ; i++) {
		sprintf(buff, " {#%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -valid_ctrl_type_res_threshold 0x%02x", _result[i].valid_ctrl_type_res_threshold);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -packet_size 0x%02x", _result[i].packet_size);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -cong_param 0x%04x", cl_ntoh16(_result[i].cong_param));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
#define _ib_sw_port_cong_setting_block_get(_swigobj) ((ib_sw_port_cong_setting_element_t *) _swigobj->block)
static int _wrap_ccSWPortCongestionSetting_block_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_sw_port_cong_setting_element_t * _result;
    ccSWPortCongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWPortCongestionSetting_block_get { ccSWPortCongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWPortCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWPortCongestionSetting_block_get. Expected _ccSWPortCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_sw_port_cong_setting_element_t *)_ib_sw_port_cong_setting_block_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-block\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <32 ; i++) {
		sprintf(buff, " {#%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -valid_ctrl_type_res_threshold 0x%02x", _result[i].valid_ctrl_type_res_threshold);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -packet_size 0x%02x", _result[i].packet_size);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -cong_param 0x%04x", cl_ntoh16(_result[i].cong_param));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
static int  ccSWPortCongestionSetting_getByLid(ccSWPortCongestionSetting *self,uint16_t  lid,uint8_t  block) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccSWPortCongestionSetting),// mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_SW_PORT_CONG_SETTING),
			block,                   // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccSWPortCongestionSetting_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccSWPortCongestionSetting * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWPortCongestionSetting_getByLid { ccSWPortCongestionSetting * } lid block ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWPortCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWPortCongestionSetting_getByLid. Expected _ccSWPortCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccSWPortCongestionSetting_getByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  ccSWPortCongestionSetting_setByLid(ccSWPortCongestionSetting *self,uint16_t  lid,uint8_t  block) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccSWPortCongestionSetting),// mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_SW_PORT_CONG_SETTING),
			block,                   // attribute modifier
			IB_MAD_METHOD_SET);
	}
static int _wrap_ccSWPortCongestionSetting_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccSWPortCongestionSetting * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccSWPortCongestionSetting_setByLid { ccSWPortCongestionSetting * } lid block ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccSWPortCongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccSWPortCongestionSetting_setByLid. Expected _ccSWPortCongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccSWPortCongestionSetting_setByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccSWPortCongestionSettingMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccSWPortCongestionSetting methods : { dump cget configure getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccSWPortCongestionSetting_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccSWPortCongestionSetting_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_ccSWPortCongestionSetting_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-block") == 0) {
                    cmd = _wrap_ccSWPortCongestionSetting_block_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -block  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -block  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-block") == 0) {
                    cmd = _wrap_ccSWPortCongestionSetting_block_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccSWPortCongestionSetting_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -block  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -block  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccSWPortCongestionSetting_block_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-block ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccSWPortCongestionSettingCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccSWPortCongestionSetting * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccSWPortCongestionSetting_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccSWPortCongestionSetting_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccSWPortCongestionSetting object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccSWPortCongestionSettingMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_ca_cong_entry_ccti_timer_set(_swigobj,_swigval) (_swigobj->ccti_timer = *(_swigval),_swigval)
static int _wrap_ib_ca_cong_entry_t_ccti_timer_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_ca_cong_entry_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_ccti_timer_set { ib_ca_cong_entry_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_ccti_timer_set. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_entry_ccti_timer_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_ccti_timer_get(_swigobj) (&_swigobj->ccti_timer)
static int _wrap_ib_ca_cong_entry_t_ccti_timer_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_ca_cong_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_ccti_timer_get { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_ccti_timer_get. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_entry_ccti_timer_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_ccti_increase_set(_swigobj,_swigval) (_swigobj->ccti_increase = *(_swigval),_swigval)
static int _wrap_ib_ca_cong_entry_t_ccti_increase_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_ccti_increase_set { ib_ca_cong_entry_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_ccti_increase_set. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_ccti_increase_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_ccti_increase_get(_swigobj) (&_swigobj->ccti_increase)
static int _wrap_ib_ca_cong_entry_t_ccti_increase_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_ccti_increase_get { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_ccti_increase_get. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_ccti_increase_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_trigger_threshold_set(_swigobj,_swigval) (_swigobj->trigger_threshold = *(_swigval),_swigval)
static int _wrap_ib_ca_cong_entry_t_trigger_threshold_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_trigger_threshold_set { ib_ca_cong_entry_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_trigger_threshold_set. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_trigger_threshold_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_trigger_threshold_get(_swigobj) (&_swigobj->trigger_threshold)
static int _wrap_ib_ca_cong_entry_t_trigger_threshold_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_trigger_threshold_get { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_trigger_threshold_get. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_trigger_threshold_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_ccti_min_set(_swigobj,_swigval) (_swigobj->ccti_min = *(_swigval),_swigval)
static int _wrap_ib_ca_cong_entry_t_ccti_min_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_ccti_min_set { ib_ca_cong_entry_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_ccti_min_set. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_ccti_min_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_ccti_min_get(_swigobj) (&_swigobj->ccti_min)
static int _wrap_ib_ca_cong_entry_t_ccti_min_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_ccti_min_get { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_ccti_min_get. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_ccti_min_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_resv0_set(_swigobj,_swigval) (_swigobj->resv0 = *(_swigval),_swigval)
static int _wrap_ib_ca_cong_entry_t_resv0_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_resv0_set { ib_ca_cong_entry_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_resv0_set. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_resv0_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_resv0_get(_swigobj) (&_swigobj->resv0)
static int _wrap_ib_ca_cong_entry_t_resv0_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ib_ca_cong_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_resv0_get { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_resv0_get. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (uint8_t *)_ib_ca_cong_entry_resv0_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_resv1_set(_swigobj,_swigval) (_swigobj->resv1 = *(_swigval),_swigval)
static int _wrap_ib_ca_cong_entry_t_resv1_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_ca_cong_entry_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_resv1_set { ib_ca_cong_entry_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_resv1_set. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_entry_resv1_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_entry_resv1_get(_swigobj) (&_swigobj->resv1)
static int _wrap_ib_ca_cong_entry_t_resv1_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_ca_cong_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_ca_cong_entry_t_resv1_get { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_ca_cong_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_ca_cong_entry_t_resv1_get. Expected _ib_ca_cong_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_entry_resv1_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int Tclib_ca_cong_entry_tMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ib_ca_cong_entry_t methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ib_ca_cong_entry_t_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-ccti_timer") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_ccti_timer_set;
                }  else if (strcmp(_str,"-ccti_increase") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_ccti_increase_set;
                }  else if (strcmp(_str,"-trigger_threshold") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_trigger_threshold_set;
                }  else if (strcmp(_str,"-ccti_min") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_ccti_min_set;
                }  else if (strcmp(_str,"-resv0") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_resv0_set;
                }  else if (strcmp(_str,"-resv1") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_resv1_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -ccti_timer -ccti_increase -trigger_threshold -ccti_min -resv0 -resv1  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -ccti_timer -ccti_increase -trigger_threshold -ccti_min -resv0 -resv1  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-ccti_timer") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_ccti_timer_get;
                }  else if (strcmp(_str,"-ccti_increase") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_ccti_increase_get;
                }  else if (strcmp(_str,"-trigger_threshold") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_trigger_threshold_get;
                }  else if (strcmp(_str,"-ccti_min") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_ccti_min_get;
                }  else if (strcmp(_str,"-resv0") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_resv0_get;
                }  else if (strcmp(_str,"-resv1") == 0) {
                    cmd = _wrap_ib_ca_cong_entry_t_resv1_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ib_ca_cong_entry_t_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -ccti_timer -ccti_increase -trigger_threshold -ccti_min -resv0 -resv1  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -ccti_timer -ccti_increase -trigger_threshold -ccti_min -resv0 -resv1  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ib_ca_cong_entry_t_ccti_timer_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ccti_timer ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_ca_cong_entry_t_ccti_increase_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ccti_increase ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_ca_cong_entry_t_trigger_threshold_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-trigger_threshold ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_ca_cong_entry_t_ccti_min_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ccti_min ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_ca_cong_entry_t_resv0_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv0 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ib_ca_cong_entry_t_resv1_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv1 ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int Tclib_ca_cong_entry_tCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ib_ca_cong_entry_t * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ib_ca_cong_entry_t_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ib_ca_cong_entry_t_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ib_ca_cong_entry_t object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, Tclib_ca_cong_entry_tMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_ca_cong_setting_port_control_set(_swigobj,_swigval) (_swigobj->port_control = *(_swigval),_swigval)
static int _wrap_ccCACongestionSetting_port_control_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionSetting * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_port_control_set { ccCACongestionSetting * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_port_control_set. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_setting_port_control_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_setting_port_control_get(_swigobj) (&_swigobj->port_control)
static int _wrap_ccCACongestionSetting_port_control_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_port_control_get { ccCACongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_port_control_get. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_setting_port_control_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_setting_control_map_set(_swigobj,_swigval) (_swigobj->control_map = *(_swigval),_swigval)
static int _wrap_ccCACongestionSetting_control_map_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionSetting * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_control_map_set { ccCACongestionSetting * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_control_map_set. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_setting_control_map_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_ca_cong_setting_control_map_get(_swigobj) (&_swigobj->control_map)
static int _wrap_ccCACongestionSetting_control_map_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccCACongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_control_map_get { ccCACongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_control_map_get. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_ca_cong_setting_control_map_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static ib_ca_cong_entry_t * _ib_ca_cong_setting_entry_list_set(ccCACongestionSetting *obj, ib_ca_cong_entry_t val[16]) {
{
	int i;
	for (i=0; i <16 ; i++) {
		obj->entry_list[i] = *(val+i);
	}
}
    return (ib_ca_cong_entry_t *) val;
}
static int _wrap_ccCACongestionSetting_entry_list_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_ca_cong_entry_t * _result;
    ccCACongestionSetting * _arg0;
    ib_ca_cong_entry_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_ca_cong_entry_t  entrys[16];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_entry_list_set { ccCACongestionSetting * } { ib_ca_cong_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_entry_list_set. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	long int value;
	long int entry_index = 0;
	int k;
	int countSubLists, numElements;
	int i = 0;
	int option = 0;
	Tcl_Obj ** subListObjArray;
	Tcl_Obj  * tclObj;

	if (Tcl_ListObjGetElements(interp, objv[2], &countSubLists, &subListObjArray) != TCL_OK)
	{
		printf("Error: wrong format for CA Congestion Setting: %s\n",
			Tcl_GetStringFromObj(objv[2],NULL));
		return TCL_ERROR;
	}

	/* CA Congestion Setting Entry List should have up to 16 entries */
	if (countSubLists > 16)
	{
		printf("Error: CA Congestion Setting Entry List should have up to %d entries (provided %d)\n",
			16, countSubLists);
		return TCL_ERROR;
	}

	/*
	 * There are two options to configure entry_list:
	 *   1. Configure the whole list by providing list of value groups:
	 *        ccCACongestionSetting configure -entry_list {{1 2 3 4} {5 6 7 8}}
	 *   2. Configure specific items from the list by providing index in addition to the above:
	 *        ccCACongestionSetting configure -entry_list {{4 1 2 3 4} {8 5 6 7 8}}
	 */

	if (countSubLists > 0) {

		/* check how many members does the first substring have */

		if (Tcl_ListObjLength(interp, subListObjArray[0], &numElements) != TCL_OK) {
			printf("Error: wrong format for CA Congestion Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}

		if (numElements == 4)
			option = 1;
		else if (numElements == 5)
			option = 2;
		else {
			printf("Error: wrong number of elements for CA Congestion Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}
	}
	else {
		/* if the user didn't specify anything, use option 1,
		   wich will effectively clear the whole list values */
		option = 1;
	}

	for (i = 0; i < 16; i++) {
		entrys[i].ccti_timer = 0;
		entrys[i].ccti_increase = 0;
		entrys[i].trigger_threshold = 0;
		entrys[i].ccti_min = 0;
	}

	if (option == 1) {
		/*
		 * first option - list of groups of four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for CA Congestion Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 4) {
				printf("Error: wrong number of elements for CA Congestion Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 4; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of CA Congestion Entry: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entrys[i].ccti_timer = cl_hton16(value); break;
					case 1: entrys[i].ccti_increase = value; break;
					case 2: entrys[i].trigger_threshold = value; break;
					case 3: entrys[i].ccti_min = value; break;
					default: break;
				}
			}
		}

	}
	else {
		/*
		 * second option - index and four values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for CA Congestion Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 5) {
				printf("Error: wrong number of elements for CA Congestion Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			for (k = 0; k < 5; k++) {

				if (Tcl_ListObjIndex(interp, subListObjArray[i], k, &tclObj) != TCL_OK) {
					printf("Error: Fail to obtain the element of CA Congestion Entry: %s\n",
						Tcl_GetStringFromObj(subListObjArray[i],NULL));
					return TCL_ERROR;
				}
				value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);
				switch (k) {
					case 0: entry_index = value; break;
					case 1: entrys[entry_index].ccti_timer = cl_hton16(value); break;
					case 2: entrys[entry_index].ccti_increase = value; break;
					case 3: entrys[entry_index].trigger_threshold = value; break;
					case 4: entrys[entry_index].ccti_min = value; break;
					default: break;
				}
			}

		}
	}

	_arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_ca_cong_entry_t *)_ib_ca_cong_setting_entry_list_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-entry_list\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <16 ; i++) {
		sprintf(buff, " {SL%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -ccti_timer 0x%04x", cl_ntoh16(_result[i].ccti_timer));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -ccti_increase 0x%02x", _result[i].ccti_increase);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -trigger_threshold 0x%02x", _result[i].trigger_threshold);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -ccti_min 0x%02x", _result[i].ccti_min);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
#define _ib_ca_cong_setting_entry_list_get(_swigobj) ((ib_ca_cong_entry_t *) _swigobj->entry_list)
static int _wrap_ccCACongestionSetting_entry_list_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_ca_cong_entry_t * _result;
    ccCACongestionSetting * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_entry_list_get { ccCACongestionSetting * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_entry_list_get. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_ca_cong_entry_t *)_ib_ca_cong_setting_entry_list_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-entry_list\n ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <16 ; i++) {
		sprintf(buff, " {SL%02u:", i);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -ccti_timer 0x%04x", cl_ntoh16(_result[i].ccti_timer));
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -ccti_increase 0x%02x", _result[i].ccti_increase);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -trigger_threshold 0x%02x", _result[i].trigger_threshold);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, " -ccti_min 0x%02x", _result[i].ccti_min);
		Tcl_AppendResult(interp, buff, NULL);

		sprintf(buff, "}\n ");
		Tcl_AppendResult(interp, buff, NULL);
	}
}
    return TCL_OK;
}
static int  ccCACongestionSetting_getByLid(ccCACongestionSetting *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccCACongestionSetting),// mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CA_CONG_SETTING),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccCACongestionSetting_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccCACongestionSetting * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_getByLid { ccCACongestionSetting * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_getByLid. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccCACongestionSetting_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  ccCACongestionSetting_setByLid(ccCACongestionSetting *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccCACongestionSetting),// mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CA_CONG_SETTING),
			0,                       // attribute modifier
			IB_MAD_METHOD_SET);
	}
static int _wrap_ccCACongestionSetting_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccCACongestionSetting * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccCACongestionSetting_setByLid { ccCACongestionSetting * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccCACongestionSetting_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccCACongestionSetting_setByLid. Expected _ccCACongestionSetting_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccCACongestionSetting_setByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccCACongestionSettingMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccCACongestionSetting methods : { dump cget configure getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccCACongestionSetting_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccCACongestionSetting_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_ccCACongestionSetting_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-port_control") == 0) {
                    cmd = _wrap_ccCACongestionSetting_port_control_set;
                }  else if (strcmp(_str,"-control_map") == 0) {
                    cmd = _wrap_ccCACongestionSetting_control_map_set;
                }  else if (strcmp(_str,"-entry_list") == 0) {
                    cmd = _wrap_ccCACongestionSetting_entry_list_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -port_control -control_map -entry_list  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -port_control -control_map -entry_list  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-port_control") == 0) {
                    cmd = _wrap_ccCACongestionSetting_port_control_get;
                }  else if (strcmp(_str,"-control_map") == 0) {
                    cmd = _wrap_ccCACongestionSetting_control_map_get;
                }  else if (strcmp(_str,"-entry_list") == 0) {
                    cmd = _wrap_ccCACongestionSetting_entry_list_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccCACongestionSetting_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -port_control -control_map -entry_list  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -port_control -control_map -entry_list  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccCACongestionSetting_port_control_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-port_control ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionSetting_control_map_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-control_map ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccCACongestionSetting_entry_list_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-entry_list ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccCACongestionSettingCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccCACongestionSetting * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccCACongestionSetting_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccCACongestionSetting_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccCACongestionSetting object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccCACongestionSettingMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibcc_tbl_entry_shift_multiplier_set(_swigobj,_swigval) (_swigobj->shift_multiplier = *(_swigval),_swigval)
static int _wrap_ib_cc_tbl_entry_t_shift_multiplier_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cc_tbl_entry_t * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cc_tbl_entry_t_shift_multiplier_set { ib_cc_tbl_entry_t * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cc_tbl_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cc_tbl_entry_t_shift_multiplier_set. Expected _ib_cc_tbl_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_tbl_entry_shift_multiplier_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibcc_tbl_entry_shift_multiplier_get(_swigobj) (&_swigobj->shift_multiplier)
static int _wrap_ib_cc_tbl_entry_t_shift_multiplier_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ib_cc_tbl_entry_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ib_cc_tbl_entry_t_shift_multiplier_get { ib_cc_tbl_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ib_cc_tbl_entry_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ib_cc_tbl_entry_t_shift_multiplier_get. Expected _ib_cc_tbl_entry_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ibcc_tbl_entry_shift_multiplier_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int Tclib_cc_tbl_entry_tMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ib_cc_tbl_entry_t methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ib_cc_tbl_entry_t_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-shift_multiplier") == 0) {
                    cmd = _wrap_ib_cc_tbl_entry_t_shift_multiplier_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -shift_multiplier  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -shift_multiplier  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-shift_multiplier") == 0) {
                    cmd = _wrap_ib_cc_tbl_entry_t_shift_multiplier_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ib_cc_tbl_entry_t_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -shift_multiplier  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -shift_multiplier  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ib_cc_tbl_entry_t_shift_multiplier_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-shift_multiplier ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int Tclib_cc_tbl_entry_tCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ib_cc_tbl_entry_t * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ib_cc_tbl_entry_t_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ib_cc_tbl_entry_t_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ib_cc_tbl_entry_t object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, Tclib_cc_tbl_entry_tMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_cc_tbl_ccti_limit_set(_swigobj,_swigval) (_swigobj->ccti_limit = *(_swigval),_swigval)
static int _wrap_ccTable_ccti_limit_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccTable * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_ccti_limit_set { ccTable * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_ccti_limit_set. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cc_tbl_ccti_limit_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cc_tbl_ccti_limit_get(_swigobj) (&_swigobj->ccti_limit)
static int _wrap_ccTable_ccti_limit_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccTable * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_ccti_limit_get { ccTable * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_ccti_limit_get. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cc_tbl_ccti_limit_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cc_tbl_resv_set(_swigobj,_swigval) (_swigobj->resv = *(_swigval),_swigval)
static int _wrap_ccTable_resv_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccTable * _arg0;
    ib_net16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_resv_set { ccTable * } { ib_net16_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_resv_set. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton16(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cc_tbl_resv_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_cc_tbl_resv_get(_swigobj) (&_swigobj->resv)
static int _wrap_ccTable_resv_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net16_t * _result;
    ccTable * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_resv_get { ccTable * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_resv_get. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net16_t *)_ib_cc_tbl_resv_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_hton16(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static ib_cc_tbl_entry_t * _ib_cc_tbl_entry_list_set(ccTable *obj, ib_cc_tbl_entry_t val[64]) {
{
	int i;
	for (i=0; i <64 ; i++) {
		obj->entry_list[i] = *(val+i);
	}
}
    return (ib_cc_tbl_entry_t *) val;
}
static int _wrap_ccTable_entry_list_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_cc_tbl_entry_t * _result;
    ccTable * _arg0;
    ib_cc_tbl_entry_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_cc_tbl_entry_t  entrys[64];

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_entry_list_set { ccTable * } { ib_cc_tbl_entry_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_entry_list_set. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
	long int value;
	long int entry_index = 0;
	int countSubLists, numElements;
	int i = 0;
	int option = 0;
	Tcl_Obj ** subListObjArray;
	Tcl_Obj  * tclObj;

	if (Tcl_ListObjGetElements(interp, objv[2], &countSubLists, &subListObjArray) != TCL_OK)
	{
		printf("Error: wrong format for CC Table: %s\n",
			Tcl_GetStringFromObj(objv[2],NULL));
		return TCL_ERROR;
	}

	/* Congestion Control Table Entry List should have up to 64 entries */
	if (countSubLists > 64)
	{
		printf("Error: Congestion Control Table Entry List should have up to %d entries (provided %d)\n",
			64, countSubLists);
		return TCL_ERROR;
	}

	/*
	 * There are two options to configure entry_list:
	 *   1. Configure the whole list by providing list of values:
	 *        ccTableMad configure -entry_list {1 2 3 4 5 6}
	 *   2. Configure specific items from the list by providing index and value:
	 *        ccTableMad configure -entry_list {{1 3} {2 4} {7 16}}
	 */

	if (countSubLists > 0) {

		/* check how many members does the first substring have */

		if (Tcl_ListObjLength(interp, subListObjArray[0], &numElements) != TCL_OK) {
			printf("Error: wrong format for CC Table Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}

		if (numElements == 1)
			option = 1;
		else if (numElements == 2)
			option = 2;
		else {
			printf("Error: wrong number of elements for CC Table Entry: %s\n",
				Tcl_GetStringFromObj(subListObjArray[0],NULL));
			return TCL_ERROR;
		}
	}
	else {
		/* if the user didn't specify anything, use option 1,
		   wich will effectively clear the whole list values */
		option = 1;
	}

	for (i = 0; i < 64; i++)
		entrys[i].shift_multiplier = 0;

	if (option == 1) {
		/*
		 * first option - list of values
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 1) {
				printf("Error: wrong number of elements for CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (Tcl_ListObjIndex(interp, subListObjArray[i], 0, &tclObj) != TCL_OK) {
				printf("Error: Fail to obtain the element of CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);

			entrys[i].shift_multiplier = cl_hton16(value);
		}

	}
	else {
		/*
		 * second option - index and value
		 */

		for (i = 0; i < countSubLists; i++) {

			if (Tcl_ListObjLength(interp, subListObjArray[i], &numElements) != TCL_OK) {
				printf("Error: wrong format for CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (numElements != 2) {
				printf("Error: wrong number of elements for CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			if (Tcl_ListObjIndex(interp, subListObjArray[i], 0, &tclObj) != TCL_OK) {
				printf("Error: Fail to obtain the element of CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			entry_index = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);

			if (Tcl_ListObjIndex(interp, subListObjArray[i], 1, &tclObj) != TCL_OK) {
				printf("Error: Fail to obtain the element of CC Table Entry: %s\n",
					Tcl_GetStringFromObj(subListObjArray[i],NULL));
				return TCL_ERROR;
			}

			value = strtol(Tcl_GetStringFromObj(tclObj, NULL), NULL, 0);

			entrys[entry_index].shift_multiplier = cl_hton16(value);
		}
	}

	_arg1 = entrys;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_cc_tbl_entry_t *)_ib_cc_tbl_entry_list_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-entry_list { ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <64 ; i++) {
		sprintf(buff, "{#%02u: 0x%04x} ", i, cl_ntoh16(_result[i].shift_multiplier));
		Tcl_AppendResult(interp, buff, NULL);
	}

	sprintf(buff, "} ");
	Tcl_AppendResult(interp, buff, NULL);
}
    return TCL_OK;
}
#define _ib_cc_tbl_entry_list_get(_swigobj) ((ib_cc_tbl_entry_t *) _swigobj->entry_list)
static int _wrap_ccTable_entry_list_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_cc_tbl_entry_t * _result;
    ccTable * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_entry_list_get { ccTable * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_entry_list_get. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_cc_tbl_entry_t *)_ib_cc_tbl_entry_list_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
	int i;
	char buff[99];

	sprintf(buff, "-entry_list { ");
	Tcl_AppendResult(interp, buff, NULL);

	for (i=0; i <64 ; i++) {
		sprintf(buff, "{#%02u: 0x%04x} ", i, cl_ntoh16(_result[i].shift_multiplier));
		Tcl_AppendResult(interp, buff, NULL);
	}

	sprintf(buff, "} ");
	Tcl_AppendResult(interp, buff, NULL);
}
    return TCL_OK;
}
static int  ccTable_getByLid(ccTable *self,uint16_t  lid,uint8_t  sn) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccTable),         // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CC_TBL),
			sn,                      // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccTable_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_getByLid { ccTable * } lid sn ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_getByLid. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccTable_getByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
static int  ccTable_setByLid(ccTable *self,uint16_t  lid,uint8_t  sn) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccTable),         // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_CC_TBL),
			sn,                      // attribute modifier
			IB_MAD_METHOD_SET);
	}
static int _wrap_ccTable_setByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccTable * _arg0;
    uint16_t * _arg1;
    uint8_t * _arg2;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;
    uint8_t  temp0;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 4) || (objc > 4)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTable_setByLid { ccTable * } lid sn ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTable_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTable_setByLid. Expected _ccTable_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  temp0 = strtoul(Tcl_GetStringFromObj(objv[3],NULL), NULL, 0);
  _arg2 = &temp0;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccTable_setByLid(_arg0,*_arg1,*_arg2);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccTableMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccTable methods : { dump cget configure getByLid setByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccTable_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccTable_getByLid;
    }    else if (strcmp(_str,"setByLid") == 0) {
        cmd = _wrap_ccTable_setByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-ccti_limit") == 0) {
                    cmd = _wrap_ccTable_ccti_limit_set;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_ccTable_resv_set;
                }  else if (strcmp(_str,"-entry_list") == 0) {
                    cmd = _wrap_ccTable_entry_list_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -ccti_limit -resv -entry_list  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -ccti_limit -resv -entry_list  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-ccti_limit") == 0) {
                    cmd = _wrap_ccTable_ccti_limit_get;
                }  else if (strcmp(_str,"-resv") == 0) {
                    cmd = _wrap_ccTable_resv_get;
                }  else if (strcmp(_str,"-entry_list") == 0) {
                    cmd = _wrap_ccTable_entry_list_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccTable_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -ccti_limit -resv -entry_list  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -ccti_limit -resv -entry_list  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccTable_ccti_limit_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-ccti_limit ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccTable_resv_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-resv ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ccTable_entry_list_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-entry_list ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid setByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccTableCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccTable * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccTable_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccTable_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccTable object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccTableMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ib_time_stamp_value_set(_swigobj,_swigval) (_swigobj->value = *(_swigval),_swigval)
static int _wrap_ccTimeStamp_value_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccTimeStamp * _arg0;
    ib_net32_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    ib_net32_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTimeStamp_value_set { ccTimeStamp * } { ib_net32_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTimeStamp_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTimeStamp_value_set. Expected _ccTimeStamp_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = cl_hton32(strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0));
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_time_stamp_value_set(_arg0,_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ib_time_stamp_value_get(_swigobj) (&_swigobj->value)
static int _wrap_ccTimeStamp_value_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    ib_net32_t * _result;
    ccTimeStamp * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTimeStamp_value_get { ccTimeStamp * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTimeStamp_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTimeStamp_value_get. Expected _ccTimeStamp_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (ib_net32_t *)_ib_time_stamp_value_get(_arg0);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", cl_ntoh32(*_result));
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static int  ccTimeStamp_getByLid(ccTimeStamp *self,uint16_t  lid) {
		return ibcc_send_mad_by_lid (
			gp_ibcc,
			IBCC_DEAFULT_KEY,
			NULL,                    // log data
			0,                       // log data size
			(uint8_t *)self,         // mgt data
			sizeof(ccTimeStamp),     // mgt data size
			lid,
			CL_NTOH16(IB_MAD_ATTR_TIME_STAMP),
			0,                       // attribute modifier
			IB_MAD_METHOD_GET);
	}
static int _wrap_ccTimeStamp_getByLid(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    int  _result;
    ccTimeStamp * _arg0;
    uint16_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint16_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ccTimeStamp_getByLid { ccTimeStamp * } lid ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ccTimeStamp_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ccTimeStamp_getByLid. Expected _ccTimeStamp_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
{
  /* we can check if IBIS was initialized here */
  if (!IbisObj.initialized)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      "ibis was not yet initialized. please use ibis_init and then ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  if (! IbisObj.port_guid)
  {
    Tcl_SetStringObj(
      Tcl_GetObjResult(interp),
      " ibis was not yet initialized. please use ibis_set_port before.", -1);
    return TCL_ERROR;
  }

  ibis_tcl_error = 0;
      _result = (int )ccTimeStamp_getByLid(_arg0,*_arg1);
;
  if (ibis_tcl_error) {
	 Tcl_SetStringObj(Tcl_GetObjResult(interp), ibis_tcl_error_msg, -1);
	 return TCL_ERROR;
  }
}    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetIntObj(tcl_result,(long) _result);
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int TclccTimeStampMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ccTimeStamp methods : { dump cget configure getByLid  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ccTimeStamp_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);
      if (strcmp(_str,"getByLid") == 0) {
        cmd = _wrap_ccTimeStamp_getByLid;
    }
    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-value") == 0) {
                    cmd = _wrap_ccTimeStamp_value_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -value  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -value  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-value") == 0) {
                    cmd = _wrap_ccTimeStamp_value_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ccTimeStamp_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -value  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -value  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ccTimeStamp_value_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-value ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure getByLid }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int TclccTimeStampCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ccTimeStamp * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ccTimeStamp_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ccTimeStamp_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ccTimeStamp object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, TclccTimeStampMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


#define _ibis_opt_single_thread_set(_swigobj,_swigval) (_swigobj->single_thread = *(_swigval),_swigval)
static int _wrap_ibis_opt_t_single_thread_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    boolean_t * _result;
    ibis_opt_t * _arg0;
    boolean_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    boolean_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_single_thread_set { ibis_opt_t * } { boolean_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_single_thread_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  if (strcmp(Tcl_GetStringFromObj(objv[2],NULL), "TRUE")) {
	 temp = FALSE;
  } else {
	 temp = TRUE;
  }
  _arg1 = &temp;
}
    _result = (boolean_t *)_ibis_opt_single_thread_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
{
  if (*_result) {
	 Tcl_SetStringObj(tcl_result,"TRUE", 4);
  } else {
	 Tcl_SetStringObj(tcl_result,"FALSE", 5);
  }
}
    return TCL_OK;
}
#define _ibis_opt_single_thread_get(_swigobj) (&_swigobj->single_thread)
static int _wrap_ibis_opt_t_single_thread_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    boolean_t * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_single_thread_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_single_thread_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (boolean_t *)_ibis_opt_single_thread_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
{
  if (*_result) {
	 Tcl_SetStringObj(tcl_result,"TRUE", 4);
  } else {
	 Tcl_SetStringObj(tcl_result,"FALSE", 5);
  }
}
    return TCL_OK;
}
#define _ibis_opt_force_log_flush_set(_swigobj,_swigval) (_swigobj->force_log_flush = *(_swigval),_swigval)
static int _wrap_ibis_opt_t_force_log_flush_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    boolean_t * _result;
    ibis_opt_t * _arg0;
    boolean_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    boolean_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_force_log_flush_set { ibis_opt_t * } { boolean_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_force_log_flush_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  if (strcmp(Tcl_GetStringFromObj(objv[2],NULL), "TRUE")) {
	 temp = FALSE;
  } else {
	 temp = TRUE;
  }
  _arg1 = &temp;
}
    _result = (boolean_t *)_ibis_opt_force_log_flush_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
{
  if (*_result) {
	 Tcl_SetStringObj(tcl_result,"TRUE", 4);
  } else {
	 Tcl_SetStringObj(tcl_result,"FALSE", 5);
  }
}
    return TCL_OK;
}
#define _ibis_opt_force_log_flush_get(_swigobj) (&_swigobj->force_log_flush)
static int _wrap_ibis_opt_t_force_log_flush_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    boolean_t * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_force_log_flush_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_force_log_flush_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (boolean_t *)_ibis_opt_force_log_flush_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
{
  if (*_result) {
	 Tcl_SetStringObj(tcl_result,"TRUE", 4);
  } else {
	 Tcl_SetStringObj(tcl_result,"FALSE", 5);
  }
}
    return TCL_OK;
}
#define _ibis_opt_log_flags_set(_swigobj,_swigval) (_swigobj->log_flags = *(_swigval),_swigval)
static int _wrap_ibis_opt_t_log_flags_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ibis_opt_t * _arg0;
    uint8_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint8_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_log_flags_set { ibis_opt_t * } { uint8_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_log_flags_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoul(Tcl_GetStringFromObj(objv[2],NULL), NULL, 0);
  _arg1 = &temp;
}
    _result = (uint8_t *)_ibis_opt_log_flags_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibis_opt_log_flags_get(_swigobj) (&_swigobj->log_flags)
static int _wrap_ibis_opt_t_log_flags_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint8_t * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_log_flags_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_log_flags_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (uint8_t *)_ibis_opt_log_flags_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "%u", *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
static char * _ibis_opt_log_file_set(ibis_opt_t *obj, char val[1024]) {
{
  strncpy(obj->log_file,val,1024 - 1);
  obj->log_file[1024 - 1] = '\0';
}
    return (char *) val;
}
static int _wrap_ibis_opt_t_log_file_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    ibis_opt_t * _arg0;
    char * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    int templength;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_log_file_set { ibis_opt_t * } { char * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_log_file_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    if ((_arg1 = Tcl_GetStringFromObj(objv[2], &templength)) == NULL) return TCL_ERROR;
    _result = (char *)_ibis_opt_log_file_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
    return TCL_OK;
}
#define _ibis_opt_log_file_get(_swigobj) ((char *) _swigobj->log_file)
static int _wrap_ibis_opt_t_log_file_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    char * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_log_file_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_log_file_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (char *)_ibis_opt_log_file_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
    Tcl_SetStringObj(tcl_result,_result,-1);
    return TCL_OK;
}
#define _ibis_opt_sm_key_set(_swigobj,_swigval) (_swigobj->sm_key = *(_swigval),_swigval)
static int _wrap_ibis_opt_t_sm_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint64_t * _result;
    ibis_opt_t * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_sm_key_set { ibis_opt_t * } { uint64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_sm_key_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
    _result = (uint64_t *)_ibis_opt_sm_key_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibis_opt_sm_key_get(_swigobj) (&_swigobj->sm_key)
static int _wrap_ibis_opt_t_sm_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint64_t * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_sm_key_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_sm_key_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (uint64_t *)_ibis_opt_sm_key_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibis_opt_m_key_set(_swigobj,_swigval) (_swigobj->m_key = *(_swigval),_swigval)
static int _wrap_ibis_opt_t_m_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint64_t * _result;
    ibis_opt_t * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_m_key_set { ibis_opt_t * } { uint64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_m_key_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
    _result = (uint64_t *)_ibis_opt_m_key_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibis_opt_m_key_get(_swigobj) (&_swigobj->m_key)
static int _wrap_ibis_opt_t_m_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint64_t * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_m_key_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_m_key_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (uint64_t *)_ibis_opt_m_key_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibis_opt_v_key_set(_swigobj,_swigval) (_swigobj->v_key = *(_swigval),_swigval)
static int _wrap_ibis_opt_t_v_key_set(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint64_t * _result;
    ibis_opt_t * _arg0;
    uint64_t * _arg1;
    Tcl_Obj * tcl_result;
    char * rettype;
    uint64_t  temp;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 3) || (objc > 3)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_v_key_set { ibis_opt_t * } { uint64_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_v_key_set. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
{
  temp = strtoull(Tcl_GetStringFromObj(objv[2],NULL), NULL,16);
  _arg1 = &temp;
}
    _result = (uint64_t *)_ibis_opt_v_key_set(_arg0,_arg1);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
#define _ibis_opt_v_key_get(_swigobj) (&_swigobj->v_key)
static int _wrap_ibis_opt_t_v_key_get(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {

    uint64_t * _result;
    ibis_opt_t * _arg0;
    Tcl_Obj * tcl_result;
    char * rettype;

    clientData = clientData; objv = objv;
    tcl_result = Tcl_GetObjResult(interp);
    if ((objc < 2) || (objc > 2)) {
        Tcl_SetStringObj(tcl_result,"Wrong # args. ibis_opt_t_v_key_get { ibis_opt_t * } ",-1);
        return TCL_ERROR;
    }
    if ((rettype = SWIG_GetPointerObj(interp,objv[1],(void **) &_arg0,"_ibis_opt_t_p"))) {
        Tcl_SetStringObj(tcl_result, "Type error in argument 1 of ibis_opt_t_v_key_get. Expected _ibis_opt_t_p, received ", -1);
        Tcl_AppendToObj(tcl_result, rettype, -1);
        return TCL_ERROR;
    }
    _result = (uint64_t *)_ibis_opt_v_key_get(_arg0);
    tcl_result = Tcl_GetObjResult(interp);
{
  char buff[20];
  sprintf(buff, "0x%016" PRIx64, *_result);
  Tcl_SetStringObj(tcl_result,buff,strlen(buff));
}
    return TCL_OK;
}
/* methodcmd8.swg : Tcl8.x method invocation */

static int Tclibis_opt_tMethodCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
  char *_str;
  int rcode;
  Tcl_Obj **objv;
  Tcl_Obj *oldarg,*tcl_result,*obj;
  int length;
  char c;

  tcl_result = Tcl_GetObjResult(interp);
  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetStringObj(tcl_result,"ibis_opt_t methods : { dump cget configure  }",-1);
    return TCL_ERROR;
  }
  obj = Tcl_NewObj();
  SWIG_SetPointerObj(obj,(void *) clientData,"_ibis_opt_t_p");
  _str = Tcl_GetStringFromObj(objv[1],&length);
  c = *_str;
  if (0);

    else if ((c == 'c') && (strncmp(_str,"configure",length) == 0) && (length >= 2)) {
      int i = 2;
      cmd = 0;
      while (i+1 < objc) {
        _str = Tcl_GetStringFromObj(objv[i],&length);
                        if (strcmp(_str,"-single_thread") == 0) {
                    cmd = _wrap_ibis_opt_t_single_thread_set;
                }  else if (strcmp(_str,"-force_log_flush") == 0) {
                    cmd = _wrap_ibis_opt_t_force_log_flush_set;
                }  else if (strcmp(_str,"-log_flags") == 0) {
                    cmd = _wrap_ibis_opt_t_log_flags_set;
                }  else if (strcmp(_str,"-log_file") == 0) {
                    cmd = _wrap_ibis_opt_t_log_file_set;
                }  else if (strcmp(_str,"-sm_key") == 0) {
                    cmd = _wrap_ibis_opt_t_sm_key_set;
                }  else if (strcmp(_str,"-m_key") == 0) {
                    cmd = _wrap_ibis_opt_t_m_key_set;
                }  else if (strcmp(_str,"-v_key") == 0) {
                    cmd = _wrap_ibis_opt_t_v_key_set;
                }
          if (cmd) {
            oldarg = objv[i];
            objv[i] = obj;
            rcode = (*cmd)(clientData,interp,3,&objv[i-1]);
            objv[i] = oldarg;
            if (rcode == TCL_ERROR) return rcode;
            cmd = 0;
          } else {
            Tcl_SetStringObj(tcl_result,"Invalid configure option. Must be { -single_thread -force_log_flush -log_flags -log_file -sm_key -m_key -v_key  }",-1);
            return TCL_ERROR;
          }
        i+=2;
      }
      if ((i < objc) || (i == 2)) {
        Tcl_SetStringObj(tcl_result,"{ -single_thread -force_log_flush -log_flags -log_file -sm_key -m_key -v_key  }",-1);
        return TCL_ERROR;
      }
      return TCL_OK;
    } else if ((c == 'c') && (strncmp(_str,"cget",length) == 0) && (length >= 2)) {
      if (objc == 3) {
        _str = Tcl_GetStringFromObj(objv[2],&length);
        if (0) {}
                        if (strcmp(_str,"-single_thread") == 0) {
                    cmd = _wrap_ibis_opt_t_single_thread_get;
                }  else if (strcmp(_str,"-force_log_flush") == 0) {
                    cmd = _wrap_ibis_opt_t_force_log_flush_get;
                }  else if (strcmp(_str,"-log_flags") == 0) {
                    cmd = _wrap_ibis_opt_t_log_flags_get;
                }  else if (strcmp(_str,"-log_file") == 0) {
                    cmd = _wrap_ibis_opt_t_log_file_get;
                }  else if (strcmp(_str,"-sm_key") == 0) {
                    cmd = _wrap_ibis_opt_t_sm_key_get;
                }  else if (strcmp(_str,"-m_key") == 0) {
                    cmd = _wrap_ibis_opt_t_m_key_get;
                }  else if (strcmp(_str,"-v_key") == 0) {
                    cmd = _wrap_ibis_opt_t_v_key_get;
                }
          else if (strcmp(_str,"-this") == 0) {
            SWIG_SetPointerObj(tcl_result,(void *) clientData, "_ibis_opt_t_p");
            return TCL_OK;
          }
        if (cmd) {
          oldarg = objv[2];
          objv[2] = obj;
          rcode = (*cmd)(clientData,interp,objc-1,&objv[1]);
          objv[2] = oldarg;
          return rcode;
        } else {
          Tcl_SetStringObj(tcl_result,"Invalid cget option. Must be { -this -single_thread -force_log_flush -log_flags -log_file -sm_key -m_key -v_key  }",-1);
          return TCL_ERROR;
        }
      } else {
        Tcl_SetStringObj(tcl_result,"{ -this -single_thread -force_log_flush -log_flags -log_file -sm_key -m_key -v_key  }", -1);
        return TCL_ERROR;
      }
    } else if ((c == 'd') && (strncmp(_str,"dump",length) == 0) && (length >= 2)) {
      if (objc == 2) {
        Tcl_Obj *pDumpObj;
        pDumpObj = Tcl_NewStringObj("",-1);
        Tcl_IncrRefCount(pDumpObj);
                cmd = _wrap_ibis_opt_t_single_thread_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-single_thread ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ibis_opt_t_force_log_flush_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-force_log_flush ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ibis_opt_t_log_flags_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-log_flags ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ibis_opt_t_log_file_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-log_file ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ibis_opt_t_sm_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-sm_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ibis_opt_t_m_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-m_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);
        cmd = _wrap_ibis_opt_t_v_key_get;
        oldarg = objv[2];
        objv[2] = obj;
        rcode = (*cmd)(clientData,interp,objc,&objv[1]);
        objv[2] = oldarg;
        Tcl_AppendStringsToObj(pDumpObj, "-v_key ", Tcl_GetStringFromObj(tcl_result, NULL), " ", NULL);
        Tcl_SetStringObj(tcl_result, Tcl_GetStringFromObj(pDumpObj, NULL), -1);

        Tcl_DecrRefCount(pDumpObj);
        return TCL_OK;
      } else {
        Tcl_SetStringObj(tcl_result,"no parameters are allowed for dump", -1);
        return TCL_ERROR;
      }
    }
  if (!cmd) {
    Tcl_SetStringObj(tcl_result,"Invalid Method. Must be { dump cget configure }",-1);
    return TCL_ERROR;
  }
  oldarg = objv[1];
  objv[1] = obj;
  rcode = (*cmd)(clientData,interp,objc,objv);
  objv[1] = oldarg;
  return rcode;
}



/* objcmd8.swg : Tcl 8.x object creation */

static int Tclibis_opt_tCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
    void (*del)(ClientData) = 0;
    char *name = 0;
    int (*cmd)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST*) = 0;
    ibis_opt_t * newObj = 0;
    int firstarg = 0;
    int thisarg = 0;
    int length;
    char *_str;
    Tcl_Obj *tcl_result;

    tcl_result = Tcl_GetObjResult(interp);
    if (objc == 1) {
        cmd = 0;
    } else {
      _str = Tcl_GetStringFromObj(objv[1],&length);
      if (strcmp(_str,"-this") == 0) thisarg = 2;
      else if (strcmp(_str,"-args") == 0) {
	firstarg = 1;
	cmd = 0;
      } else if (objc == 2) {
	firstarg = 1;
	name = _str;
	cmd = 0;
      } else if (objc >= 3) {
	name = _str;
	_str = Tcl_GetStringFromObj(objv[2],&length);
	if (strcmp(_str,"-this") == 0) thisarg = 3;
	else {
	  firstarg = 1;
	  cmd = 0;
	}
      }
    }
    if (cmd) {
        int result;
        result = (*cmd)(clientData,interp,objc-firstarg,&objv[firstarg]);
        if (result == TCL_OK) {
            SWIG_GetPointerObj(interp,tcl_result,(void **) &newObj,"_ibis_opt_t_p");
        } else { return result; }
        if (!name) name = Tcl_GetStringFromObj(tcl_result,&length);
        del = 0;
    } else if (thisarg > 0) {
        if (thisarg < objc) {
            char *r;
            r = SWIG_GetPointerObj(interp,objv[thisarg],(void **) &newObj,"_ibis_opt_t_p");
            if (r) {
	      Tcl_SetStringObj(tcl_result,"Type error. not a ibis_opt_t object.",-1);
	      return TCL_ERROR;
            }
        if (!name) name = Tcl_GetStringFromObj(objv[thisarg],&length);
	Tcl_SetStringObj(tcl_result,name,-1);
        } else {
            Tcl_SetStringObj(tcl_result,"wrong # args.",-1);
            return TCL_ERROR;
        }
    } else {
        Tcl_SetStringObj(tcl_result,"No constructor available.",-1);
        return TCL_ERROR;
    }
    {
      Tcl_CmdInfo dummy;
      if (!Tcl_GetCommandInfo(interp,name,&dummy)) {
	Tcl_CreateObjCommand(interp,name, Tclibis_opt_tMethodCmd, (ClientData) newObj, del);
	return TCL_OK;
      } else {
	Tcl_SetStringObj(tcl_result,"Object name already exists!",-1);
	return TCL_ERROR;
      }
    }
}


SWIGEXPORT(int,Ibis_Init)(Tcl_Interp *interp) {
	 if (interp == 0)
		 return TCL_ERROR;
	 SWIG_RegisterType();
	 Tcl_CreateObjCommand(interp, SWIG_prefix "crDestroy", _wrap_crDestroy, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "crMultiMaxGet", _wrap_crMultiMaxGet, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "crRead", _wrap_crRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "crWrite", _wrap_crWrite, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "crReadMulti", _wrap_crReadMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "crWriteMulti", _wrap_crWriteMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);


 {

	}
	 Tcl_CreateObjCommand(interp, SWIG_prefix "pmMultiMaxGet", _wrap_pmMultiMaxGet, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "pmGetPortCounters", _wrap_pmGetPortCounters, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "pmGetPortCountersMulti", _wrap_pmGetPortCountersMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "pmGetExtPortCountersMulti", _wrap_pmGetExtPortCountersMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "pmClrAllCounters", _wrap_pmClrAllCounters, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "pmClrAllCountersMulti", _wrap_pmClrAllCountersMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsMultiMaxGet", _wrap_vsMultiMaxGet, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsCpuRead", _wrap_vsCpuRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsCpuWrite", _wrap_vsCpuWrite, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsI2cRead", _wrap_vsI2cRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsI2cWrite", _wrap_vsI2cWrite, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsI2cReadMulti", _wrap_vsI2cReadMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsI2cWriteMulti", _wrap_vsI2cWriteMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsGpioRead", _wrap_vsGpioRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsGpioWrite", _wrap_vsGpioWrite, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsSWReset", _wrap_vsSWReset, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsFlashStartMulti", _wrap_vsFlashStartMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsFlashStopMulti", _wrap_vsFlashStopMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsFlashSetBankMulti", _wrap_vsFlashSetBankMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsFlashEraseSectorMulti", _wrap_vsFlashEraseSectorMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsFlashReadSectorMulti", _wrap_vsFlashReadSectorMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsFlashWriteSectorMulti", _wrap_vsFlashWriteSectorMulti, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsMirrorRead", _wrap_vsMirrorRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsMirrorWrite", _wrap_vsMirrorWrite, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsGetGeneralInfo", _wrap_vsGetGeneralInfo, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "vsGetPrivateLFTMap", _wrap_vsGetPrivateLFTMap, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmVpdRead", _wrap_bbmVpdRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmVpdWrite", _wrap_bbmVpdWrite, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmVSDRead", _wrap_bbmVSDRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmBSNRead", _wrap_bbmBSNRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmModRead", _wrap_bbmModRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmChaRead", _wrap_bbmChaRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "bbmFWVerRead", _wrap_bbmFWVerRead, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_LID", (char *) &_wrap_const_IB_NR_COMPMASK_LID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_RESERVED1", (char *) &_wrap_const_IB_NR_COMPMASK_RESERVED1, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_BASEVERSION", (char *) &_wrap_const_IB_NR_COMPMASK_BASEVERSION, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_CLASSVERSION", (char *) &_wrap_const_IB_NR_COMPMASK_CLASSVERSION, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_NODETYPE", (char *) &_wrap_const_IB_NR_COMPMASK_NODETYPE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_NUMPORTS", (char *) &_wrap_const_IB_NR_COMPMASK_NUMPORTS, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_SYSIMAGEGUID", (char *) &_wrap_const_IB_NR_COMPMASK_SYSIMAGEGUID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_NODEGUID", (char *) &_wrap_const_IB_NR_COMPMASK_NODEGUID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_PORTGUID", (char *) &_wrap_const_IB_NR_COMPMASK_PORTGUID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_PARTCAP", (char *) &_wrap_const_IB_NR_COMPMASK_PARTCAP, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_DEVID", (char *) &_wrap_const_IB_NR_COMPMASK_DEVID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_REV", (char *) &_wrap_const_IB_NR_COMPMASK_REV, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_PORTNUM", (char *) &_wrap_const_IB_NR_COMPMASK_PORTNUM, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_VENDID", (char *) &_wrap_const_IB_NR_COMPMASK_VENDID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_NR_COMPMASK_NODEDESC", (char *) &_wrap_const_IB_NR_COMPMASK_NODEDESC, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LID", (char *) &_wrap_const_IB_PIR_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_PORTNUM", (char *) &_wrap_const_IB_PIR_COMPMASK_PORTNUM, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_RESV1", (char *) &_wrap_const_IB_PIR_COMPMASK_RESV1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_MKEY", (char *) &_wrap_const_IB_PIR_COMPMASK_MKEY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_GIDPRE", (char *) &_wrap_const_IB_PIR_COMPMASK_GIDPRE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_BASELID", (char *) &_wrap_const_IB_PIR_COMPMASK_BASELID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_SMLID", (char *) &_wrap_const_IB_PIR_COMPMASK_SMLID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_CAPMASK", (char *) &_wrap_const_IB_PIR_COMPMASK_CAPMASK, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_DIAGCODE", (char *) &_wrap_const_IB_PIR_COMPMASK_DIAGCODE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_MKEYLEASEPRD", (char *) &_wrap_const_IB_PIR_COMPMASK_MKEYLEASEPRD, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LOCALPORTNUM", (char *) &_wrap_const_IB_PIR_COMPMASK_LOCALPORTNUM, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LNKWIDTHSUPPORT", (char *) &_wrap_const_IB_PIR_COMPMASK_LNKWIDTHSUPPORT, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LNKWIDTHACTIVE", (char *) &_wrap_const_IB_PIR_COMPMASK_LNKWIDTHACTIVE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LINKWIDTHENABLED", (char *) &_wrap_const_IB_PIR_COMPMASK_LINKWIDTHENABLED, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LNKSPEEDSUPPORT", (char *) &_wrap_const_IB_PIR_COMPMASK_LNKSPEEDSUPPORT, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_PORTSTATE", (char *) &_wrap_const_IB_PIR_COMPMASK_PORTSTATE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_PORTPHYSTATE", (char *) &_wrap_const_IB_PIR_COMPMASK_PORTPHYSTATE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LINKDWNDFLTSTATE", (char *) &_wrap_const_IB_PIR_COMPMASK_LINKDWNDFLTSTATE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_MKEYPROTBITS", (char *) &_wrap_const_IB_PIR_COMPMASK_MKEYPROTBITS, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LMC", (char *) &_wrap_const_IB_PIR_COMPMASK_LMC, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LINKSPEEDACTIVE", (char *) &_wrap_const_IB_PIR_COMPMASK_LINKSPEEDACTIVE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LINKSPEEDENABLE", (char *) &_wrap_const_IB_PIR_COMPMASK_LINKSPEEDENABLE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_NEIGHBORMTU", (char *) &_wrap_const_IB_PIR_COMPMASK_NEIGHBORMTU, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_MASTERSMSL", (char *) &_wrap_const_IB_PIR_COMPMASK_MASTERSMSL, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_VLCAP", (char *) &_wrap_const_IB_PIR_COMPMASK_VLCAP, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_INITTYPE", (char *) &_wrap_const_IB_PIR_COMPMASK_INITTYPE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_VLHIGHLIMIT", (char *) &_wrap_const_IB_PIR_COMPMASK_VLHIGHLIMIT, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_VLARBHIGHCAP", (char *) &_wrap_const_IB_PIR_COMPMASK_VLARBHIGHCAP, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_VLARBLOWCAP", (char *) &_wrap_const_IB_PIR_COMPMASK_VLARBLOWCAP, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_INITTYPEREPLY", (char *) &_wrap_const_IB_PIR_COMPMASK_INITTYPEREPLY, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_MTUCAP", (char *) &_wrap_const_IB_PIR_COMPMASK_MTUCAP, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_VLSTALLCNT", (char *) &_wrap_const_IB_PIR_COMPMASK_VLSTALLCNT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_HOQLIFE", (char *) &_wrap_const_IB_PIR_COMPMASK_HOQLIFE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_OPVLS", (char *) &_wrap_const_IB_PIR_COMPMASK_OPVLS, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_PARENFIN", (char *) &_wrap_const_IB_PIR_COMPMASK_PARENFIN, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_PARENFOUT", (char *) &_wrap_const_IB_PIR_COMPMASK_PARENFOUT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_FILTERRAWIN", (char *) &_wrap_const_IB_PIR_COMPMASK_FILTERRAWIN, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_FILTERRAWOUT", (char *) &_wrap_const_IB_PIR_COMPMASK_FILTERRAWOUT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_MKEYVIO", (char *) &_wrap_const_IB_PIR_COMPMASK_MKEYVIO, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_PKEYVIO", (char *) &_wrap_const_IB_PIR_COMPMASK_PKEYVIO, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_QKEYVIO", (char *) &_wrap_const_IB_PIR_COMPMASK_QKEYVIO, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_GUIDCAP", (char *) &_wrap_const_IB_PIR_COMPMASK_GUIDCAP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_RESV2", (char *) &_wrap_const_IB_PIR_COMPMASK_RESV2, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_SUBNTO", (char *) &_wrap_const_IB_PIR_COMPMASK_SUBNTO, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_RESV3", (char *) &_wrap_const_IB_PIR_COMPMASK_RESV3, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_RESPTIME", (char *) &_wrap_const_IB_PIR_COMPMASK_RESPTIME, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_LOCALPHYERR", (char *) &_wrap_const_IB_PIR_COMPMASK_LOCALPHYERR, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PIR_COMPMASK_OVERRUNERR", (char *) &_wrap_const_IB_PIR_COMPMASK_OVERRUNERR, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SMR_COMPMASK_LID", (char *) &_wrap_const_IB_SMR_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SMR_COMPMASK_GUID", (char *) &_wrap_const_IB_SMR_COMPMASK_GUID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SMR_COMPMASK_SM_KEY", (char *) &_wrap_const_IB_SMR_COMPMASK_SM_KEY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SMR_COMPMASK_ACT_COUNT", (char *) &_wrap_const_IB_SMR_COMPMASK_ACT_COUNT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SMR_COMPMASK_STATE", (char *) &_wrap_const_IB_SMR_COMPMASK_STATE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SMR_COMPMASK_PRI", (char *) &_wrap_const_IB_SMR_COMPMASK_PRI, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_LID", (char *) &_wrap_const_IB_SWR_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_LIN_CAP", (char *) &_wrap_const_IB_SWR_COMPMASK_LIN_CAP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_RAND_CAP", (char *) &_wrap_const_IB_SWR_COMPMASK_RAND_CAP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_MCAST_CAP", (char *) &_wrap_const_IB_SWR_COMPMASK_MCAST_CAP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_LIN_TOP", (char *) &_wrap_const_IB_SWR_COMPMASK_LIN_TOP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_DEF_PORT", (char *) &_wrap_const_IB_SWR_COMPMASK_DEF_PORT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_DEF_MCAST_PRI", (char *) &_wrap_const_IB_SWR_COMPMASK_DEF_MCAST_PRI, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_DEF_MCAST_NOT", (char *) &_wrap_const_IB_SWR_COMPMASK_DEF_MCAST_NOT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_STATE", (char *) &_wrap_const_IB_SWR_COMPMASK_STATE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_LIFE", (char *) &_wrap_const_IB_SWR_COMPMASK_LIFE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_LMC", (char *) &_wrap_const_IB_SWR_COMPMASK_LMC, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_ENFORCE_CAP", (char *) &_wrap_const_IB_SWR_COMPMASK_ENFORCE_CAP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SWR_COMPMASK_FLAGS", (char *) &_wrap_const_IB_SWR_COMPMASK_FLAGS, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_LR_COMPMASK_FROM_LID", (char *) &_wrap_const_IB_LR_COMPMASK_FROM_LID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_LR_COMPMASK_FROM_PORT", (char *) &_wrap_const_IB_LR_COMPMASK_FROM_PORT, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_LR_COMPMASK_TO_PORT", (char *) &_wrap_const_IB_LR_COMPMASK_TO_PORT, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_LR_COMPMASK_TO_LID", (char *) &_wrap_const_IB_LR_COMPMASK_TO_LID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_DGID", (char *) &_wrap_const_IB_PR_COMPMASK_DGID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_SGID", (char *) &_wrap_const_IB_PR_COMPMASK_SGID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_DLID", (char *) &_wrap_const_IB_PR_COMPMASK_DLID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_SLID", (char *) &_wrap_const_IB_PR_COMPMASK_SLID, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_RAWTRAFIC", (char *) &_wrap_const_IB_PR_COMPMASK_RAWTRAFIC, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_RESV0", (char *) &_wrap_const_IB_PR_COMPMASK_RESV0, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_FLOWLABEL", (char *) &_wrap_const_IB_PR_COMPMASK_FLOWLABEL, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_HOPLIMIT", (char *) &_wrap_const_IB_PR_COMPMASK_HOPLIMIT, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_TCLASS", (char *) &_wrap_const_IB_PR_COMPMASK_TCLASS, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_REVERSIBLE", (char *) &_wrap_const_IB_PR_COMPMASK_REVERSIBLE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_NUMBPATH", (char *) &_wrap_const_IB_PR_COMPMASK_NUMBPATH, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_PKEY", (char *) &_wrap_const_IB_PR_COMPMASK_PKEY, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_RESV1", (char *) &_wrap_const_IB_PR_COMPMASK_RESV1, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_SL", (char *) &_wrap_const_IB_PR_COMPMASK_SL, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_MTUSELEC", (char *) &_wrap_const_IB_PR_COMPMASK_MTUSELEC, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_MTU", (char *) &_wrap_const_IB_PR_COMPMASK_MTU, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_RATESELEC", (char *) &_wrap_const_IB_PR_COMPMASK_RATESELEC, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_RATE", (char *) &_wrap_const_IB_PR_COMPMASK_RATE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_PKTLIFETIMESELEC", (char *) &_wrap_const_IB_PR_COMPMASK_PKTLIFETIMESELEC, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PR_COMPMASK_PFTLIFETIME", (char *) &_wrap_const_IB_PR_COMPMASK_PFTLIFETIME, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_LFT_COMPMASK_LID", (char *) &_wrap_const_IB_LFT_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_LFT_COMPMASK_BLOCK", (char *) &_wrap_const_IB_LFT_COMPMASK_BLOCK, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_GID", (char *) &_wrap_const_IB_MCR_COMPMASK_GID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_MGID", (char *) &_wrap_const_IB_MCR_COMPMASK_MGID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_PORT_GID", (char *) &_wrap_const_IB_MCR_COMPMASK_PORT_GID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_QKEY", (char *) &_wrap_const_IB_MCR_COMPMASK_QKEY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_MLID", (char *) &_wrap_const_IB_MCR_COMPMASK_MLID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_MTU_SEL", (char *) &_wrap_const_IB_MCR_COMPMASK_MTU_SEL, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_MTU", (char *) &_wrap_const_IB_MCR_COMPMASK_MTU, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_TCLASS", (char *) &_wrap_const_IB_MCR_COMPMASK_TCLASS, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_PKEY", (char *) &_wrap_const_IB_MCR_COMPMASK_PKEY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_RATE_SEL", (char *) &_wrap_const_IB_MCR_COMPMASK_RATE_SEL, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_RATE", (char *) &_wrap_const_IB_MCR_COMPMASK_RATE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_LIFE_SEL", (char *) &_wrap_const_IB_MCR_COMPMASK_LIFE_SEL, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_LIFE", (char *) &_wrap_const_IB_MCR_COMPMASK_LIFE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_SL", (char *) &_wrap_const_IB_MCR_COMPMASK_SL, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_FLOW", (char *) &_wrap_const_IB_MCR_COMPMASK_FLOW, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_HOP", (char *) &_wrap_const_IB_MCR_COMPMASK_HOP, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_SCOPE", (char *) &_wrap_const_IB_MCR_COMPMASK_SCOPE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_JOIN_STATE", (char *) &_wrap_const_IB_MCR_COMPMASK_JOIN_STATE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_MCR_COMPMASK_PROXY", (char *) &_wrap_const_IB_MCR_COMPMASK_PROXY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SID", (char *) &_wrap_const_IB_SR_COMPMASK_SID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SGID", (char *) &_wrap_const_IB_SR_COMPMASK_SGID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SPKEY", (char *) &_wrap_const_IB_SR_COMPMASK_SPKEY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_RES1", (char *) &_wrap_const_IB_SR_COMPMASK_RES1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SLEASE", (char *) &_wrap_const_IB_SR_COMPMASK_SLEASE, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SKEY", (char *) &_wrap_const_IB_SR_COMPMASK_SKEY, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SNAME", (char *) &_wrap_const_IB_SR_COMPMASK_SNAME, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_0", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_0, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_1", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_2", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_2, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_3", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_3, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_4", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_4, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_5", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_5, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_6", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_6, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_7", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_7, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_8", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_8, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_9", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_9, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_10", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_10, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_11", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_11, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_12", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_12, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_13", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_13, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_14", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_14, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA8_15", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA8_15, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_0", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_0, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_1", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_2", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_2, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_3", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_3, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_4", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_4, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_5", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_5, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_6", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_6, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA16_7", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA16_7, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA32_0", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA32_0, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA32_1", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA32_1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA32_2", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA32_2, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA32_3", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA32_3, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA64_0", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA64_0, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SR_COMPMASK_SDATA64_1", (char *) &_wrap_const_IB_SR_COMPMASK_SDATA64_1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SLVL_COMPMASK_LID", (char *) &_wrap_const_IB_SLVL_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SLVL_COMPMASK_IN_PORT", (char *) &_wrap_const_IB_SLVL_COMPMASK_IN_PORT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_SLVL_COMPMASK_OUT_PORT", (char *) &_wrap_const_IB_SLVL_COMPMASK_OUT_PORT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_VLA_COMPMASK_LID", (char *) &_wrap_const_IB_VLA_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_VLA_COMPMASK_OUT_PORT", (char *) &_wrap_const_IB_VLA_COMPMASK_OUT_PORT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_VLA_COMPMASK_BLOCK", (char *) &_wrap_const_IB_VLA_COMPMASK_BLOCK, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PKEY_COMPMASK_LID", (char *) &_wrap_const_IB_PKEY_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PKEY_COMPMASK_BLOCK", (char *) &_wrap_const_IB_PKEY_COMPMASK_BLOCK, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_PKEY_COMPMASK_PORT", (char *) &_wrap_const_IB_PKEY_COMPMASK_PORT, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_LID", (char *) &_wrap_const_IB_GIR_COMPMASK_LID, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_BLOCKNUM", (char *) &_wrap_const_IB_GIR_COMPMASK_BLOCKNUM, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID0", (char *) &_wrap_const_IB_GIR_COMPMASK_GID0, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID1", (char *) &_wrap_const_IB_GIR_COMPMASK_GID1, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID2", (char *) &_wrap_const_IB_GIR_COMPMASK_GID2, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID3", (char *) &_wrap_const_IB_GIR_COMPMASK_GID3, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID4", (char *) &_wrap_const_IB_GIR_COMPMASK_GID4, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID5", (char *) &_wrap_const_IB_GIR_COMPMASK_GID5, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID6", (char *) &_wrap_const_IB_GIR_COMPMASK_GID6, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IB_GIR_COMPMASK_GID7", (char *) &_wrap_const_IB_GIR_COMPMASK_GID7, TCL_LINK_STRING | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_NONE", (char *) &_wrap_const_IBIS_LOG_NONE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_ERROR", (char *) &_wrap_const_IBIS_LOG_ERROR, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_INFO", (char *) &_wrap_const_IBIS_LOG_INFO, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_VERBOSE", (char *) &_wrap_const_IBIS_LOG_VERBOSE, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_DEBUG", (char *) &_wrap_const_IBIS_LOG_DEBUG, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_FUNCS", (char *) &_wrap_const_IBIS_LOG_FUNCS, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_LinkVar(interp, SWIG_prefix "IBIS_LOG_FRAMES", (char *) &_wrap_const_IBIS_LOG_FRAMES, TCL_LINK_INT | TCL_LINK_READ_ONLY);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_puts", _wrap_ibis_puts, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_init", _wrap_ibis_init, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_set_verbosity", _wrap_ibis_set_verbosity, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_set_port", _wrap_ibis_set_port, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_get_port", _wrap_ibis_get_port, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_set_transaction_timeout", _wrap_ibis_set_transaction_timeout, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_exit", _wrap_ibis_exit, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_LinkVar(interp, SWIG_prefix "ibisSourceVersion", (char *) &ibisSourceVersion, TCL_LINK_STRING);


  /* Make sure that the osmv, complib and ibisp use
     same modes (debug/free) */
  if ( osm_is_debug() != cl_is_debug()    ||
       osm_is_debug() != ibisp_is_debug() ||
       ibisp_is_debug() != cl_is_debug() )
  {
    fprintf(stderr, "-E- OSMV, Complib and Ibis were compiled using different modes\n");
    fprintf(stderr, "-E- OSMV debug:%d Complib debug:%d IBIS debug:%d \n",
            osm_is_debug(), cl_is_debug(), ibisp_is_debug() );
    exit(1);
  }

  /* sub block required for declarations .... */
  {
    static int notFirstTime = 0;

    /* we initialize the structs etc only once. */
    if (0 == notFirstTime++) {
      Tcl_StaticPackage(interp, "ibis", Ibis_Init, NULL);
      Tcl_PkgProvide(interp, "ibis", IBIS_VERSION);
      /* Default Options  */
      memset(&IbisOpts, 0,sizeof(ibis_opt_t));
      IbisOpts.transaction_timeout = 4*OSM_DEFAULT_TRANS_TIMEOUT_MILLISEC;
      IbisOpts.single_thread = TRUE;
      IbisOpts.force_log_flush = TRUE;
      IbisOpts.sm_key = 0;
      IbisOpts.m_key = 0;
      IbisOpts.v_key = 0;
      IbisOpts.log_flags = OSM_LOG_ERROR;
      strcpy(IbisOpts.log_file,"/tmp/ibis.log");


      /* we want all exists to cleanup */
      Tcl_CreateExitHandler(ibis_exit, NULL);

      /* ------------------ IBCR ---------------------- */
      p_ibcr_global = ibcr_construct();

      if (p_ibcr_global == NULL) {
        printf("-E- Error from ibcr_construct.\n");
        exit(1);
      }

      /* ------------------ IBPM ---------------------- */
      p_ibpm_global = ibpm_construct();

      if (p_ibpm_global == NULL) {
        printf("-E- Error from ibpm_construct.\n");
        exit(1);
      }

      /* ------------------ IBVS ---------------------- */
		p_ibvs_global = ibvs_construct();

  		if (p_ibvs_global == NULL) {
			printf("-E- Error from ibvs_construct.\n");
         exit(1);
  		}

      /* ------------------ IBBBM ---------------------- */
		p_ibbbm_global = ibbbm_construct();

  		if (p_ibbbm_global == NULL) {
			printf("-E- Error from ibbbm_construct.\n");
         exit(1);
  		}

      /* ------------------ IBSM ---------------------- */
		gp_ibsm = ibsm_construct();

  		if (gp_ibsm == NULL) {
			printf("-E- Error from ibsm_construct.\n");
         exit(1);
  		}

      /* Initialize global records */
      memset(&ibsm_node_info_obj, 0, sizeof(ib_node_info_t));
      memset(&ibsm_port_info_obj, 0, sizeof(ib_port_info_t));
      memset(&ibsm_switch_info_obj, 0, sizeof(ib_switch_info_t));
      memset(&ibsm_lft_block_obj, 0, sizeof(ibsm_lft_block_t));
      memset(&ibsm_mft_block_obj, 0, sizeof(ibsm_mft_block_t));
      memset(&ibsm_guid_info_obj, 0, sizeof(ib_guid_info_t));
      memset(&ibsm_pkey_table_obj, 0, sizeof(ib_pkey_table_t));
      memset(&ibsm_sm_info_obj, 0, sizeof(ib_sm_info_t));

      /* ------------------ IBCC ---------------------- */

      gp_ibcc = ibcc_construct();

      if (gp_ibcc == NULL) {
          printf("-E- Error from ibcc_construct.\n");
          exit(1);
      }

      /* Initialize global records */
      memset(&ibcc_class_port_info_obj, 0, sizeof(ib_class_port_info_t));
      memset(&ibcc_notice_obj, 0, sizeof(ibcc_notice_attr_t));
      memset(&ibcc_cong_info_obj, 0, sizeof(ib_cong_info_t));
      memset(&ibcc_cong_key_info_obj, 0, sizeof(ib_cong_key_info_t));
      memset(&ibcc_ca_cong_log_obj, 0, sizeof(ibcc_ca_cong_log_t));
      memset(&ibcc_sw_cong_log_obj, 0, sizeof(ibcc_sw_cong_log_t));
      memset(&ibcc_sw_cong_setting_obj, 0, sizeof(ib_sw_cong_setting_t));
      memset(&ibcc_sw_port_cong_setting_obj, 0, sizeof(ib_sw_port_cong_setting_t));
      memset(&ibcc_ca_cong_setting_obj, 0, sizeof(ib_ca_cong_setting_t));
      memset(&ibcc_table_obj, 0, sizeof(ib_cc_tbl_t));
      memset(&ibcc_time_stamp_obj, 0, sizeof(ib_time_stamp_t));

      /* ------------------ IBSAC ---------------------- */

      /* Initialize global records */
      memset(&ibsac_node_rec, 0,sizeof(ibsac_node_rec));
      memset(&ibsac_portinfo_rec, 0,sizeof(ibsac_portinfo_rec));
      memset(&ibsac_sminfo_rec, 0, sizeof(ib_sminfo_record_t));
      memset(&ibsac_swinfo_rec, 0, sizeof(ib_switch_info_record_t));
      memset(&ibsac_link_rec, 0, sizeof(ib_link_record_t));
      memset(&ibsac_path_rec, 0, sizeof(ib_path_rec_t));
      memset(&ibsac_lft_rec, 0, sizeof(ib_lft_record_t));
      memset(&ibsac_mcm_rec, 0, sizeof(ib_member_rec_t));
      memset(&ibsac_class_port_info, 0, sizeof(ib_class_port_info_t));
      memset(&ibsac_inform_info, 0, sizeof(ib_inform_info_t));
      memset(&ibsac_svc_rec, 0, sizeof(ib_service_record_t));
      memset(&ibsac_slvl_rec, 0, sizeof(ib_slvl_table_record_t));
      memset(&ibsac_vlarb_rec, 0, sizeof(ib_vl_arb_table_record_t));
      memset(&ibsac_pkey_rec, 0, sizeof(ib_pkey_table_record_t));
      memset(&ibsac_guidinfo_rec, 0, sizeof(ib_guidinfo_record_t));

      /*
       * A1 Supported features:
       *
       * Query:                Rec/Info Types    Done
       *
       * NodeRecord            (nr, ni)           Y
       * PortInfoRecord        (pir, pi)          Y
       * SwitchInfoRecord      (swir, swi)        Y
       * SMInfoRecord          (smir, smi)        Y
       * PathRecord            (path)             Y
       * LinkRecord            (link)             Y
       * LinFwdTblRecord       (lft)              Y
       * MulticastFwdTblRecord (mftr, mft)        N - Not supported by OSM
       *
       * B Supported features:
       * MCMemberRecord        (mcm)              Y
       * ClassPortInfo         (cpi)              Y
       * InformInfo            (info)             Y
       * ServiceRecord         (svc)              Y
       * SL2VLTableRecord      (slvr, slvt)       Y
       * VLArbTableRecord      (vlarb)            Y
       * PKeyTableRecord       (pkr, pkt)         Y
       */

      /* We use alternate SWIG Objects mangling */
      SWIG_AltMnglInit();
      SWIG_AltMnglRegTypeToPrefix("_sacNodeInfo_p", "ni");
      SWIG_AltMnglRegTypeToPrefix("_sacNodeRec_p", "nr");
      SWIG_AltMnglRegTypeToPrefix("_sacPortInfo_p", "pi");
      SWIG_AltMnglRegTypeToPrefix("_sacPortRec_p", "pir");
      SWIG_AltMnglRegTypeToPrefix("_sacSmInfo_p", "smi");
      SWIG_AltMnglRegTypeToPrefix("_sacSmRec_p", "smir");
      SWIG_AltMnglRegTypeToPrefix("_sacSwInfo_p", "swi");
      SWIG_AltMnglRegTypeToPrefix("_sacSwRec_p", "swir");
      SWIG_AltMnglRegTypeToPrefix("_sacLinkRec_p", "link");
      SWIG_AltMnglRegTypeToPrefix("_sacPathRec_p", "path");
      SWIG_AltMnglRegTypeToPrefix("_sacLFTRec_p", "lft");
      SWIG_AltMnglRegTypeToPrefix("_sacMCMRec_p", "mcm");
      SWIG_AltMnglRegTypeToPrefix("_sacClassPortInfo_p", "cpi");
      SWIG_AltMnglRegTypeToPrefix("_sacInformInfo_p", "info");
      SWIG_AltMnglRegTypeToPrefix("_sacServiceRec_p", "svc");
      SWIG_AltMnglRegTypeToPrefix("_sacSlVlTbl_p", "slvt");
      SWIG_AltMnglRegTypeToPrefix("_sacSlVlRec_p", "slvr");
      SWIG_AltMnglRegTypeToPrefix("_sacVlArbRec_p", "vlarb");
      SWIG_AltMnglRegTypeToPrefix("_sacPKeyTbl_p", "pkt");
      SWIG_AltMnglRegTypeToPrefix("_sacPKeyRec_p", "pkr");
      SWIG_AltMnglRegTypeToPrefix("_sacGuidInfo_p", "gi");
      SWIG_AltMnglRegTypeToPrefix("_sacGuidRec_p", "gr");

      // register the pre-allocated objects
      SWIG_AltMnglRegObj("ni",&(ibsac_node_rec.node_info));
      SWIG_AltMnglRegObj("nr",&(ibsac_node_rec));

      SWIG_AltMnglRegObj("pi", &(ibsac_portinfo_rec.port_info));
      SWIG_AltMnglRegObj("pir",&(ibsac_portinfo_rec));

      SWIG_AltMnglRegObj("smi", &(ibsac_sminfo_rec.sm_info));
      SWIG_AltMnglRegObj("smir",&(ibsac_sminfo_rec));

      SWIG_AltMnglRegObj("swi", &(ibsac_swinfo_rec.switch_info));
      SWIG_AltMnglRegObj("swir",&(ibsac_swinfo_rec));

      SWIG_AltMnglRegObj("path",&(ibsac_path_rec));

      SWIG_AltMnglRegObj("link",&(ibsac_link_rec));

      SWIG_AltMnglRegObj("lft",&(ibsac_lft_rec));

      SWIG_AltMnglRegObj("mcm",&(ibsac_mcm_rec));

      SWIG_AltMnglRegObj("cpi",&(ibsac_class_port_info));
      SWIG_AltMnglRegObj("info",&(ibsac_inform_info));
      SWIG_AltMnglRegObj("svc",&(ibsac_svc_rec));

      SWIG_AltMnglRegObj("slvt", &(ibsac_slvl_rec.slvl_tbl));
      SWIG_AltMnglRegObj("slvr", &(ibsac_slvl_rec));

      SWIG_AltMnglRegObj("vlarb", &(ibsac_vlarb_rec));

      SWIG_AltMnglRegObj("pkt", &(ibsac_pkey_rec.pkey_tbl));
      SWIG_AltMnglRegObj("pkr", &(ibsac_pkey_rec));

      SWIG_AltMnglRegObj("gi", &(ibsac_guidinfo_rec.guid_info));
      SWIG_AltMnglRegObj("gr", &(ibsac_guidinfo_rec));

      usleep(1000);
    }

    /* we defined this as a native command so declare it in here */
    Tcl_CreateObjCommand(interp, "ibis_get_local_ports_info",
                         ibis_get_local_ports_info, NULL, NULL);

	 /* this will declare an object osm_opts */
	 ibis_opt_p = &IbisOpts;
	 Tcl_CreateObjCommand(interp,"ibis_opts", Tclibis_opt_tMethodCmd,
									 (ClientData)ibis_opt_p, 0);

    /* add commands for accessing the global query records */

    /* ------------------ IBSM ---------------------- */

    Tcl_CreateObjCommand(interp,"smNodeInfoMad",
                         TclsmNodeInfoMethodCmd,
                         (ClientData)&ibsm_node_info_obj, 0);

    Tcl_CreateObjCommand(interp,"smPortInfoMad",
                         TclsmPortInfoMethodCmd,
                         (ClientData)&ibsm_port_info_obj, 0);

    Tcl_CreateObjCommand(interp,"smSwitchInfoMad",
                         TclsmSwInfoMethodCmd,
                         (ClientData)&ibsm_switch_info_obj, 0);

    Tcl_CreateObjCommand(interp,"smLftBlockMad",
                         TclsmLftBlockMethodCmd,
                         (ClientData)&ibsm_lft_block_obj, 0);

    Tcl_CreateObjCommand(interp,"smMftBlockMad",
                         TclsmMftBlockMethodCmd,
                         (ClientData)&ibsm_mft_block_obj, 0);

    Tcl_CreateObjCommand(interp,"smGuidInfoMad",
                         TclsmGuidInfoMethodCmd,
                         (ClientData)&ibsm_guid_info_obj, 0);

    Tcl_CreateObjCommand(interp,"smPkeyTableMad",
                         TclsmPkeyTableMethodCmd,
                         (ClientData)&ibsm_pkey_table_obj, 0);

    Tcl_CreateObjCommand(interp,"smSlVlTableMad",
                         TclsmSlVlTableMethodCmd,
                         (ClientData)&ibsm_slvl_table_obj, 0);

    Tcl_CreateObjCommand(interp,"smVlArbTableMad",
                         TclsmVlArbTableMethodCmd,
                         (ClientData)&ibsm_vl_arb_table_obj, 0);

    Tcl_CreateObjCommand(interp,"smSMInfoMad",
                         TclsmSMInfoMethodCmd,
                         (ClientData)&ibsm_sm_info_obj, 0);

    Tcl_CreateObjCommand(interp,"smNodeDescMad",
                         TclsmNodeDescMethodCmd,
                         (ClientData)&ibsm_node_desc_obj, 0);

    Tcl_CreateObjCommand(interp,"smNoticeMad",
                         TclsmNoticeMethodCmd,
                         (ClientData)&ibsm_notice_obj, 0);

    /* ------------------ IBCC ---------------------- */

    Tcl_CreateObjCommand(interp,"ccClassPortInfoMad",
                         TclccClassPortInfoMethodCmd,
                         (ClientData)&ibcc_class_port_info_obj, 0);

    Tcl_CreateObjCommand(interp,"ccNoticeMad",
                         TclccNoticeMethodCmd,
                         (ClientData)&ibcc_notice_obj, 0);

    Tcl_CreateObjCommand(interp,"ccCongestionInfoMad",
                         TclccCongestionInfoMethodCmd,
                         (ClientData)&ibcc_cong_info_obj, 0);

    Tcl_CreateObjCommand(interp,"ccCongestionKeyInfoMad",
                         TclccCongestionKeyInfoMethodCmd,
                         (ClientData)&ibcc_cong_key_info_obj, 0);

    Tcl_CreateObjCommand(interp,"ccCACongestionLogMad",
                         TclccCACongestionLogMethodCmd,
                         (ClientData)&ibcc_ca_cong_log_obj, 0);

    Tcl_CreateObjCommand(interp,"ccSWCongestionLogMad",
                         TclccSWCongestionLogMethodCmd,
                         (ClientData)&ibcc_sw_cong_log_obj, 0);

    Tcl_CreateObjCommand(interp,"ccSWCongestionSettingMad",
                         TclccSWCongestionSettingMethodCmd,
                         (ClientData)&ibcc_sw_cong_setting_obj, 0);

    Tcl_CreateObjCommand(interp,"ccSWPortCongestionSettingMad",
                         TclccSWPortCongestionSettingMethodCmd,
                         (ClientData)&ibcc_sw_port_cong_setting_obj, 0);

    Tcl_CreateObjCommand(interp,"ccCACongestionSettingMad",
                         TclccCACongestionSettingMethodCmd,
                         (ClientData)&ibcc_ca_cong_setting_obj, 0);

    Tcl_CreateObjCommand(interp,"ccTableMad",
                         TclccTableMethodCmd,
                         (ClientData)&ibcc_table_obj, 0);

    Tcl_CreateObjCommand(interp,"ccTimeStampMad",
                         TclccTimeStampMethodCmd,
                         (ClientData)&ibcc_time_stamp_obj, 0);

    /* ------------------ IBSAC --------------------- */

	 Tcl_CreateObjCommand(interp,"sacNodeQuery",
								 TclsacNodeRecMethodCmd,
								 (ClientData)&ibsac_node_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacPortQuery",
								 TclsacPortRecMethodCmd,
								 (ClientData)&ibsac_portinfo_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacSmQuery",
								 TclsacSmRecMethodCmd,
								 (ClientData)&ibsac_sminfo_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacSwQuery",
								 TclsacSwRecMethodCmd,
								 (ClientData)&ibsac_swinfo_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacLinkQuery",
								 TclsacLinkRecMethodCmd,
								 (ClientData)&ibsac_link_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacPathQuery",
								 TclsacPathRecMethodCmd,
								 (ClientData)&ibsac_path_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacLFTQuery",
								 TclsacLFTRecMethodCmd,
								 (ClientData)&ibsac_lft_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacMCMQuery",
								 TclsacMCMRecMethodCmd,
								 (ClientData)&ibsac_mcm_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacClassPortInfoQuery",
								 TclsacClassPortInfoMethodCmd,
								 (ClientData)&ibsac_class_port_info, 0);

	 Tcl_CreateObjCommand(interp,"sacInformInfoQuery",
								 TclsacInformInfoMethodCmd,
								 (ClientData)&ibsac_inform_info, 0);

	 Tcl_CreateObjCommand(interp,"sacServiceQuery",
								 TclsacServiceRecMethodCmd,
								 (ClientData)&ibsac_svc_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacSLVlQuery",
								 TclsacSlVlRecMethodCmd,
								 (ClientData)&ibsac_slvl_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacVlArbQuery",
								 TclsacVlArbRecMethodCmd,
								 (ClientData)&ibsac_vlarb_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacPKeyQuery",
								 TclsacPKeyRecMethodCmd,
								 (ClientData)&ibsac_pkey_rec, 0);

	 Tcl_CreateObjCommand(interp,"sacGuidQuery",
								 TclsacGuidRecMethodCmd,
								 (ClientData)&ibsac_guidinfo_rec, 0);


    /*
      use an embedded Tcl code for doing init if given command line
      parameters: -port_num <port num>
    */
    Tcl_GlobalEval(
      interp,
      "if {[file tail $argv0] == \"ibis\"} {\n"
      " set _ibis_port_num_arg_idx [lsearch $argv -port_num]\n"
      " if {$_ibis_port_num_arg_idx >= 0} {\n"
      "  if {[llength $argv] < $_ibis_port_num_arg_idx + 2} {\n"
      "    puts {ibis given -port_num with no actual port number argument}\n"
      "  } else { \n"
      "    set _ibis_port_num [lindex $argv [expr $_ibis_port_num_arg_idx + 1]]\n"
      "    set argv [lreplace $argv $_ibis_port_num_arg_idx [expr $_ibis_port_num_arg_idx + 1]]\n"
      "    ibis_init\n"
      "    set _ibis_all_ports [ibis_get_local_ports_info]\n"
      "    set first_port_idx [lsearch -all $_ibis_all_ports [lindex $_ibis_all_ports 0]]\n"
      "    if {[llength $first_port_idx] > 1} {\n"
      "      set _ibis_port_info [lindex $_ibis_all_ports $_ibis_port_num]\n"
      "    } else {\n"
      "      set _ibis_port_info [lindex $_ibis_all_ports [expr $_ibis_port_num - 1]]\n"
      "    }\n"
      "    if {[lindex $_ibis_port_info 2] != \"ACTIVE\"} {\n"
      "       puts \"Port $_ibis_port_num is not ACTIVE: $_ibis_port_info\"\n"
      "       exit 1\n"
      "    } else { \n"
      "       ibis_set_port [lindex $_ibis_port_info 0]\n"
      "       puts \"Port set to:[lindex $_ibis_port_info 0]\"\n"
      "    }\n"
      "  }\n"
      " }\n"
      "}\n");
  }
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_base_version_set", _wrap_sacNodeInfo_base_version_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_base_version_get", _wrap_sacNodeInfo_base_version_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_class_version_set", _wrap_sacNodeInfo_class_version_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_class_version_get", _wrap_sacNodeInfo_class_version_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_node_type_set", _wrap_sacNodeInfo_node_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_node_type_get", _wrap_sacNodeInfo_node_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_num_ports_set", _wrap_sacNodeInfo_num_ports_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_num_ports_get", _wrap_sacNodeInfo_num_ports_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_sys_guid_set", _wrap_sacNodeInfo_sys_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_sys_guid_get", _wrap_sacNodeInfo_sys_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_node_guid_set", _wrap_sacNodeInfo_node_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_node_guid_get", _wrap_sacNodeInfo_node_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_port_guid_set", _wrap_sacNodeInfo_port_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_port_guid_get", _wrap_sacNodeInfo_port_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_partition_cap_set", _wrap_sacNodeInfo_partition_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_partition_cap_get", _wrap_sacNodeInfo_partition_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_device_id_set", _wrap_sacNodeInfo_device_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_device_id_get", _wrap_sacNodeInfo_device_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_revision_set", _wrap_sacNodeInfo_revision_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_revision_get", _wrap_sacNodeInfo_revision_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_port_num_vendor_id_set", _wrap_sacNodeInfo_port_num_vendor_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_port_num_vendor_id_get", _wrap_sacNodeInfo_port_num_vendor_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeInfo_delete", _wrap_sacNodeInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacNodeInfo",TclsacNodeInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_lid_set", _wrap_sacNodeRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_lid_get", _wrap_sacNodeRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_node_info_set", _wrap_sacNodeRec_node_info_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_node_info_get", _wrap_sacNodeRec_node_info_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_node_desc_set", _wrap_sacNodeRec_node_desc_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_node_desc_get", _wrap_sacNodeRec_node_desc_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_get", _wrap_sacNodeRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_getTable", _wrap_sacNodeRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacNodeRec_delete", _wrap_sacNodeRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacNodeRec",TclsacNodeRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_m_key_set", _wrap_sacPortInfo_m_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_m_key_get", _wrap_sacPortInfo_m_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_subnet_prefix_set", _wrap_sacPortInfo_subnet_prefix_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_subnet_prefix_get", _wrap_sacPortInfo_subnet_prefix_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_base_lid_set", _wrap_sacPortInfo_base_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_base_lid_get", _wrap_sacPortInfo_base_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_master_sm_base_lid_set", _wrap_sacPortInfo_master_sm_base_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_master_sm_base_lid_get", _wrap_sacPortInfo_master_sm_base_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_capability_mask_set", _wrap_sacPortInfo_capability_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_capability_mask_get", _wrap_sacPortInfo_capability_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_diag_code_set", _wrap_sacPortInfo_diag_code_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_diag_code_get", _wrap_sacPortInfo_diag_code_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_m_key_lease_period_set", _wrap_sacPortInfo_m_key_lease_period_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_m_key_lease_period_get", _wrap_sacPortInfo_m_key_lease_period_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_local_port_num_set", _wrap_sacPortInfo_local_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_local_port_num_get", _wrap_sacPortInfo_local_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_width_enabled_set", _wrap_sacPortInfo_link_width_enabled_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_width_enabled_get", _wrap_sacPortInfo_link_width_enabled_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_width_supported_set", _wrap_sacPortInfo_link_width_supported_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_width_supported_get", _wrap_sacPortInfo_link_width_supported_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_width_active_set", _wrap_sacPortInfo_link_width_active_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_width_active_get", _wrap_sacPortInfo_link_width_active_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_state_info1_set", _wrap_sacPortInfo_state_info1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_state_info1_get", _wrap_sacPortInfo_state_info1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_state_info2_set", _wrap_sacPortInfo_state_info2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_state_info2_get", _wrap_sacPortInfo_state_info2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_mkey_lmc_set", _wrap_sacPortInfo_mkey_lmc_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_mkey_lmc_get", _wrap_sacPortInfo_mkey_lmc_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_speed_set", _wrap_sacPortInfo_link_speed_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_link_speed_get", _wrap_sacPortInfo_link_speed_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_mtu_smsl_set", _wrap_sacPortInfo_mtu_smsl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_mtu_smsl_get", _wrap_sacPortInfo_mtu_smsl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_cap_set", _wrap_sacPortInfo_vl_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_cap_get", _wrap_sacPortInfo_vl_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_high_limit_set", _wrap_sacPortInfo_vl_high_limit_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_high_limit_get", _wrap_sacPortInfo_vl_high_limit_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_arb_high_cap_set", _wrap_sacPortInfo_vl_arb_high_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_arb_high_cap_get", _wrap_sacPortInfo_vl_arb_high_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_arb_low_cap_set", _wrap_sacPortInfo_vl_arb_low_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_arb_low_cap_get", _wrap_sacPortInfo_vl_arb_low_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_mtu_cap_set", _wrap_sacPortInfo_mtu_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_mtu_cap_get", _wrap_sacPortInfo_mtu_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_stall_life_set", _wrap_sacPortInfo_vl_stall_life_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_stall_life_get", _wrap_sacPortInfo_vl_stall_life_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_enforce_set", _wrap_sacPortInfo_vl_enforce_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_vl_enforce_get", _wrap_sacPortInfo_vl_enforce_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_m_key_violations_set", _wrap_sacPortInfo_m_key_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_m_key_violations_get", _wrap_sacPortInfo_m_key_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_p_key_violations_set", _wrap_sacPortInfo_p_key_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_p_key_violations_get", _wrap_sacPortInfo_p_key_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_q_key_violations_set", _wrap_sacPortInfo_q_key_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_q_key_violations_get", _wrap_sacPortInfo_q_key_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_guid_cap_set", _wrap_sacPortInfo_guid_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_guid_cap_get", _wrap_sacPortInfo_guid_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_subnet_timeout_set", _wrap_sacPortInfo_subnet_timeout_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_subnet_timeout_get", _wrap_sacPortInfo_subnet_timeout_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_resp_time_value_set", _wrap_sacPortInfo_resp_time_value_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_resp_time_value_get", _wrap_sacPortInfo_resp_time_value_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_error_threshold_set", _wrap_sacPortInfo_error_threshold_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_error_threshold_get", _wrap_sacPortInfo_error_threshold_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortInfo_delete", _wrap_sacPortInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacPortInfo",TclsacPortInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_lid_set", _wrap_sacPortRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_lid_get", _wrap_sacPortRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_port_num_set", _wrap_sacPortRec_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_port_num_get", _wrap_sacPortRec_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_port_info_set", _wrap_sacPortRec_port_info_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_port_info_get", _wrap_sacPortRec_port_info_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_get", _wrap_sacPortRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_getTable", _wrap_sacPortRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPortRec_delete", _wrap_sacPortRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacPortRec",TclsacPortRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_guid_set", _wrap_sacSmInfo_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_guid_get", _wrap_sacSmInfo_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_sm_key_set", _wrap_sacSmInfo_sm_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_sm_key_get", _wrap_sacSmInfo_sm_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_act_count_set", _wrap_sacSmInfo_act_count_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_act_count_get", _wrap_sacSmInfo_act_count_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_pri_state_set", _wrap_sacSmInfo_pri_state_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_pri_state_get", _wrap_sacSmInfo_pri_state_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmInfo_delete", _wrap_sacSmInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacSmInfo",TclsacSmInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_lid_set", _wrap_sacSmRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_lid_get", _wrap_sacSmRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_sm_info_set", _wrap_sacSmRec_sm_info_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_sm_info_get", _wrap_sacSmRec_sm_info_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_get", _wrap_sacSmRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_getTable", _wrap_sacSmRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSmRec_delete", _wrap_sacSmRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacSmRec",TclsacSmRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_lin_cap_set", _wrap_sacSwInfo_lin_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_lin_cap_get", _wrap_sacSwInfo_lin_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_rand_cap_set", _wrap_sacSwInfo_rand_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_rand_cap_get", _wrap_sacSwInfo_rand_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_mcast_cap_set", _wrap_sacSwInfo_mcast_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_mcast_cap_get", _wrap_sacSwInfo_mcast_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_lin_top_set", _wrap_sacSwInfo_lin_top_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_lin_top_get", _wrap_sacSwInfo_lin_top_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_def_port_set", _wrap_sacSwInfo_def_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_def_port_get", _wrap_sacSwInfo_def_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_def_mcast_pri_port_set", _wrap_sacSwInfo_def_mcast_pri_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_def_mcast_pri_port_get", _wrap_sacSwInfo_def_mcast_pri_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_def_mcast_not_port_set", _wrap_sacSwInfo_def_mcast_not_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_def_mcast_not_port_get", _wrap_sacSwInfo_def_mcast_not_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_life_state_set", _wrap_sacSwInfo_life_state_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_life_state_get", _wrap_sacSwInfo_life_state_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_lids_per_port_set", _wrap_sacSwInfo_lids_per_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_lids_per_port_get", _wrap_sacSwInfo_lids_per_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_enforce_cap_set", _wrap_sacSwInfo_enforce_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_enforce_cap_get", _wrap_sacSwInfo_enforce_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_flags_set", _wrap_sacSwInfo_flags_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_flags_get", _wrap_sacSwInfo_flags_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwInfo_delete", _wrap_sacSwInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacSwInfo",TclsacSwInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_lid_set", _wrap_sacSwRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_lid_get", _wrap_sacSwRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_switch_info_set", _wrap_sacSwRec_switch_info_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_switch_info_get", _wrap_sacSwRec_switch_info_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_get", _wrap_sacSwRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_getTable", _wrap_sacSwRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSwRec_delete", _wrap_sacSwRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacSwRec",TclsacSwRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_from_lid_set", _wrap_sacLinkRec_from_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_from_lid_get", _wrap_sacLinkRec_from_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_from_port_num_set", _wrap_sacLinkRec_from_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_from_port_num_get", _wrap_sacLinkRec_from_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_to_port_num_set", _wrap_sacLinkRec_to_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_to_port_num_get", _wrap_sacLinkRec_to_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_to_lid_set", _wrap_sacLinkRec_to_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_to_lid_get", _wrap_sacLinkRec_to_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_get", _wrap_sacLinkRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_getTable", _wrap_sacLinkRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLinkRec_delete", _wrap_sacLinkRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacLinkRec",TclsacLinkRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_service_id_set", _wrap_sacPathRec_service_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_service_id_get", _wrap_sacPathRec_service_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_dgid_set", _wrap_sacPathRec_dgid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_dgid_get", _wrap_sacPathRec_dgid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_sgid_set", _wrap_sacPathRec_sgid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_sgid_get", _wrap_sacPathRec_sgid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_dlid_set", _wrap_sacPathRec_dlid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_dlid_get", _wrap_sacPathRec_dlid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_slid_set", _wrap_sacPathRec_slid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_slid_get", _wrap_sacPathRec_slid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_hop_flow_raw_set", _wrap_sacPathRec_hop_flow_raw_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_hop_flow_raw_get", _wrap_sacPathRec_hop_flow_raw_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_tclass_set", _wrap_sacPathRec_tclass_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_tclass_get", _wrap_sacPathRec_tclass_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_num_path_set", _wrap_sacPathRec_num_path_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_num_path_get", _wrap_sacPathRec_num_path_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_pkey_set", _wrap_sacPathRec_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_pkey_get", _wrap_sacPathRec_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_qos_class_sl_set", _wrap_sacPathRec_qos_class_sl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_qos_class_sl_get", _wrap_sacPathRec_qos_class_sl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_mtu_set", _wrap_sacPathRec_mtu_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_mtu_get", _wrap_sacPathRec_mtu_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_rate_set", _wrap_sacPathRec_rate_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_rate_get", _wrap_sacPathRec_rate_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_pkt_life_set", _wrap_sacPathRec_pkt_life_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_pkt_life_get", _wrap_sacPathRec_pkt_life_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_preference_set", _wrap_sacPathRec_preference_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_preference_get", _wrap_sacPathRec_preference_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_get", _wrap_sacPathRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_getTable", _wrap_sacPathRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPathRec_delete", _wrap_sacPathRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacPathRec",TclsacPathRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_lid_set", _wrap_sacLFTRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_lid_get", _wrap_sacLFTRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_block_num_set", _wrap_sacLFTRec_block_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_block_num_get", _wrap_sacLFTRec_block_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_lft_set", _wrap_sacLFTRec_lft_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_lft_get", _wrap_sacLFTRec_lft_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_get", _wrap_sacLFTRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_getTable", _wrap_sacLFTRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacLFTRec_delete", _wrap_sacLFTRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacLFTRec",TclsacLFTRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_mgid_set", _wrap_sacMCMRec_mgid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_mgid_get", _wrap_sacMCMRec_mgid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_port_gid_set", _wrap_sacMCMRec_port_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_port_gid_get", _wrap_sacMCMRec_port_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_qkey_set", _wrap_sacMCMRec_qkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_qkey_get", _wrap_sacMCMRec_qkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_mlid_set", _wrap_sacMCMRec_mlid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_mlid_get", _wrap_sacMCMRec_mlid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_mtu_set", _wrap_sacMCMRec_mtu_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_mtu_get", _wrap_sacMCMRec_mtu_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_tclass_set", _wrap_sacMCMRec_tclass_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_tclass_get", _wrap_sacMCMRec_tclass_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_pkey_set", _wrap_sacMCMRec_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_pkey_get", _wrap_sacMCMRec_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_rate_set", _wrap_sacMCMRec_rate_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_rate_get", _wrap_sacMCMRec_rate_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_pkt_life_set", _wrap_sacMCMRec_pkt_life_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_pkt_life_get", _wrap_sacMCMRec_pkt_life_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_sl_flow_hop_set", _wrap_sacMCMRec_sl_flow_hop_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_sl_flow_hop_get", _wrap_sacMCMRec_sl_flow_hop_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_scope_state_set", _wrap_sacMCMRec_scope_state_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_scope_state_get", _wrap_sacMCMRec_scope_state_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_get", _wrap_sacMCMRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_getTable", _wrap_sacMCMRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_set", _wrap_sacMCMRec_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_del", _wrap_sacMCMRec_del, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_proxy_join_get", _wrap_sacMCMRec_proxy_join_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_proxy_join_set", _wrap_sacMCMRec_proxy_join_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacMCMRec_obj_delete", _wrap_sacMCMRec_obj_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacMCMRec",TclsacMCMRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_base_ver_set", _wrap_sacClassPortInfo_base_ver_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_base_ver_get", _wrap_sacClassPortInfo_base_ver_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_class_ver_set", _wrap_sacClassPortInfo_class_ver_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_class_ver_get", _wrap_sacClassPortInfo_class_ver_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_cap_mask_set", _wrap_sacClassPortInfo_cap_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_cap_mask_get", _wrap_sacClassPortInfo_cap_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_cap_mask2_resp_time_set", _wrap_sacClassPortInfo_cap_mask2_resp_time_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_cap_mask2_resp_time_get", _wrap_sacClassPortInfo_cap_mask2_resp_time_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_gid_set", _wrap_sacClassPortInfo_redir_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_gid_get", _wrap_sacClassPortInfo_redir_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_tc_sl_fl_set", _wrap_sacClassPortInfo_redir_tc_sl_fl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_tc_sl_fl_get", _wrap_sacClassPortInfo_redir_tc_sl_fl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_lid_set", _wrap_sacClassPortInfo_redir_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_lid_get", _wrap_sacClassPortInfo_redir_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_pkey_set", _wrap_sacClassPortInfo_redir_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_pkey_get", _wrap_sacClassPortInfo_redir_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_qp_set", _wrap_sacClassPortInfo_redir_qp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_qp_get", _wrap_sacClassPortInfo_redir_qp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_qkey_set", _wrap_sacClassPortInfo_redir_qkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_redir_qkey_get", _wrap_sacClassPortInfo_redir_qkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_gid_set", _wrap_sacClassPortInfo_trap_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_gid_get", _wrap_sacClassPortInfo_trap_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_tc_sl_fl_set", _wrap_sacClassPortInfo_trap_tc_sl_fl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_tc_sl_fl_get", _wrap_sacClassPortInfo_trap_tc_sl_fl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_lid_set", _wrap_sacClassPortInfo_trap_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_lid_get", _wrap_sacClassPortInfo_trap_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_pkey_set", _wrap_sacClassPortInfo_trap_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_pkey_get", _wrap_sacClassPortInfo_trap_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_hop_qp_set", _wrap_sacClassPortInfo_trap_hop_qp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_hop_qp_get", _wrap_sacClassPortInfo_trap_hop_qp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_qkey_set", _wrap_sacClassPortInfo_trap_qkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_trap_qkey_get", _wrap_sacClassPortInfo_trap_qkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_get", _wrap_sacClassPortInfo_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacClassPortInfo_delete", _wrap_sacClassPortInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacClassPortInfo",TclsacClassPortInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_gid_set", _wrap_sacInformInfo_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_gid_get", _wrap_sacInformInfo_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_lid_range_begin_set", _wrap_sacInformInfo_lid_range_begin_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_lid_range_begin_get", _wrap_sacInformInfo_lid_range_begin_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_lid_range_end_set", _wrap_sacInformInfo_lid_range_end_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_lid_range_end_get", _wrap_sacInformInfo_lid_range_end_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_reserved1_set", _wrap_sacInformInfo_reserved1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_reserved1_get", _wrap_sacInformInfo_reserved1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_is_generic_set", _wrap_sacInformInfo_is_generic_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_is_generic_get", _wrap_sacInformInfo_is_generic_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_subscribe_set", _wrap_sacInformInfo_subscribe_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_subscribe_get", _wrap_sacInformInfo_subscribe_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_trap_type_set", _wrap_sacInformInfo_trap_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_trap_type_get", _wrap_sacInformInfo_trap_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_get", _wrap_sacInformInfo_g_or_v_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_set", _wrap_sacInformInfo_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_delete", _wrap_sacInformInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacInformInfo",TclsacInformInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_get", _wrap_sacInformInfo_g_or_v_generic_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_get", _wrap_sacInformInfo_g_or_v_vend_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacInformInfo_g_or_v",TclsacInformInfo_g_or_vCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_trap_num_set", _wrap_sacInformInfo_g_or_v_generic_trap_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_trap_num_get", _wrap_sacInformInfo_g_or_v_generic_trap_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_qpn_resp_time_val_set", _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_qpn_resp_time_val_get", _wrap_sacInformInfo_g_or_v_generic_qpn_resp_time_val_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_reserved2_set", _wrap_sacInformInfo_g_or_v_generic_reserved2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_reserved2_get", _wrap_sacInformInfo_g_or_v_generic_reserved2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_node_type_msb_set", _wrap_sacInformInfo_g_or_v_generic_node_type_msb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_node_type_msb_get", _wrap_sacInformInfo_g_or_v_generic_node_type_msb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_node_type_lsb_set", _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_generic_node_type_lsb_get", _wrap_sacInformInfo_g_or_v_generic_node_type_lsb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacInformInfo_g_or_v_generic",TclsacInformInfo_g_or_v_genericCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_dev_id_set", _wrap_sacInformInfo_g_or_v_vend_dev_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_dev_id_get", _wrap_sacInformInfo_g_or_v_vend_dev_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_qpn_resp_time_val_set", _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_qpn_resp_time_val_get", _wrap_sacInformInfo_g_or_v_vend_qpn_resp_time_val_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_reserved2_set", _wrap_sacInformInfo_g_or_v_vend_reserved2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_reserved2_get", _wrap_sacInformInfo_g_or_v_vend_reserved2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_vendor_id_msb_set", _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_vendor_id_msb_get", _wrap_sacInformInfo_g_or_v_vend_vendor_id_msb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_vendor_id_lsb_set", _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacInformInfo_g_or_v_vend_vendor_id_lsb_get", _wrap_sacInformInfo_g_or_v_vend_vendor_id_lsb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacInformInfo_g_or_v_vend",TclsacInformInfo_g_or_v_vendCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_id_set", _wrap_sacServiceRec_service_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_id_get", _wrap_sacServiceRec_service_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_gid_set", _wrap_sacServiceRec_service_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_gid_get", _wrap_sacServiceRec_service_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_pkey_set", _wrap_sacServiceRec_service_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_pkey_get", _wrap_sacServiceRec_service_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_resv_set", _wrap_sacServiceRec_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_resv_get", _wrap_sacServiceRec_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_lease_set", _wrap_sacServiceRec_service_lease_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_lease_get", _wrap_sacServiceRec_service_lease_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_key_set", _wrap_sacServiceRec_service_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_key_get", _wrap_sacServiceRec_service_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_name_set", _wrap_sacServiceRec_service_name_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_name_get", _wrap_sacServiceRec_service_name_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data8_set", _wrap_sacServiceRec_service_data8_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data8_get", _wrap_sacServiceRec_service_data8_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data16_set", _wrap_sacServiceRec_service_data16_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data16_get", _wrap_sacServiceRec_service_data16_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data32_set", _wrap_sacServiceRec_service_data32_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data32_get", _wrap_sacServiceRec_service_data32_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data64_set", _wrap_sacServiceRec_service_data64_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_service_data64_get", _wrap_sacServiceRec_service_data64_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_get", _wrap_sacServiceRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_set", _wrap_sacServiceRec_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_getTable", _wrap_sacServiceRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_delete", _wrap_sacServiceRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacServiceRec_obj_delete", _wrap_sacServiceRec_obj_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacServiceRec",TclsacServiceRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlTbl_raw_vl_by_sl_set", _wrap_sacSlVlTbl_raw_vl_by_sl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlTbl_raw_vl_by_sl_get", _wrap_sacSlVlTbl_raw_vl_by_sl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacSlVlTbl",TclsacSlVlTblCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_lid_set", _wrap_sacSlVlRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_lid_get", _wrap_sacSlVlRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_in_port_num_set", _wrap_sacSlVlRec_in_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_in_port_num_get", _wrap_sacSlVlRec_in_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_out_port_num_set", _wrap_sacSlVlRec_out_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_out_port_num_get", _wrap_sacSlVlRec_out_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_resv_set", _wrap_sacSlVlRec_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_resv_get", _wrap_sacSlVlRec_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_slvl_tbl_set", _wrap_sacSlVlRec_slvl_tbl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_slvl_tbl_get", _wrap_sacSlVlRec_slvl_tbl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_get", _wrap_sacSlVlRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_getTable", _wrap_sacSlVlRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacSlVlRec_delete", _wrap_sacSlVlRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacSlVlRec",TclsacSlVlRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_lid_set", _wrap_sacVlArbRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_lid_get", _wrap_sacVlArbRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_port_num_set", _wrap_sacVlArbRec_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_port_num_get", _wrap_sacVlArbRec_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_block_num_set", _wrap_sacVlArbRec_block_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_block_num_get", _wrap_sacVlArbRec_block_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_reserved_set", _wrap_sacVlArbRec_reserved_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_reserved_get", _wrap_sacVlArbRec_reserved_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_vl_arb_tbl_set", _wrap_sacVlArbRec_vl_arb_tbl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_vl_arb_tbl_get", _wrap_sacVlArbRec_vl_arb_tbl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_get", _wrap_sacVlArbRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_getTable", _wrap_sacVlArbRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacVlArbRec_delete", _wrap_sacVlArbRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacVlArbRec",TclsacVlArbRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyTbl_pkey_entry_set", _wrap_sacPKeyTbl_pkey_entry_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyTbl_pkey_entry_get", _wrap_sacPKeyTbl_pkey_entry_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacPKeyTbl",TclsacPKeyTblCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_lid_set", _wrap_sacPKeyRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_lid_get", _wrap_sacPKeyRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_block_num_set", _wrap_sacPKeyRec_block_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_block_num_get", _wrap_sacPKeyRec_block_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_port_num_set", _wrap_sacPKeyRec_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_port_num_get", _wrap_sacPKeyRec_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_reserved1_set", _wrap_sacPKeyRec_reserved1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_reserved1_get", _wrap_sacPKeyRec_reserved1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_reserved2_set", _wrap_sacPKeyRec_reserved2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_reserved2_get", _wrap_sacPKeyRec_reserved2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_pkey_tbl_set", _wrap_sacPKeyRec_pkey_tbl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_pkey_tbl_get", _wrap_sacPKeyRec_pkey_tbl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_get", _wrap_sacPKeyRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_getTable", _wrap_sacPKeyRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacPKeyRec_delete", _wrap_sacPKeyRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacPKeyRec",TclsacPKeyRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidInfo_guid_set", _wrap_sacGuidInfo_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidInfo_guid_get", _wrap_sacGuidInfo_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidInfo_delete", _wrap_sacGuidInfo_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacGuidInfo",TclsacGuidInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_lid_set", _wrap_sacGuidRec_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_lid_get", _wrap_sacGuidRec_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_block_num_set", _wrap_sacGuidRec_block_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_block_num_get", _wrap_sacGuidRec_block_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_resv_set", _wrap_sacGuidRec_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_resv_get", _wrap_sacGuidRec_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_reserved_set", _wrap_sacGuidRec_reserved_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_reserved_get", _wrap_sacGuidRec_reserved_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_guid_info_set", _wrap_sacGuidRec_guid_info_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_guid_info_get", _wrap_sacGuidRec_guid_info_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_get", _wrap_sacGuidRec_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_set", _wrap_sacGuidRec_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_getTable", _wrap_sacGuidRec_getTable, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_delete", _wrap_sacGuidRec_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "sacGuidRec_obj_delete", _wrap_sacGuidRec_obj_delete, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "sacGuidRec",TclsacGuidRecCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_base_version_set", _wrap_smNodeInfo_base_version_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_base_version_get", _wrap_smNodeInfo_base_version_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_class_version_set", _wrap_smNodeInfo_class_version_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_class_version_get", _wrap_smNodeInfo_class_version_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_node_type_set", _wrap_smNodeInfo_node_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_node_type_get", _wrap_smNodeInfo_node_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_num_ports_set", _wrap_smNodeInfo_num_ports_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_num_ports_get", _wrap_smNodeInfo_num_ports_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_sys_guid_set", _wrap_smNodeInfo_sys_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_sys_guid_get", _wrap_smNodeInfo_sys_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_node_guid_set", _wrap_smNodeInfo_node_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_node_guid_get", _wrap_smNodeInfo_node_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_port_guid_set", _wrap_smNodeInfo_port_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_port_guid_get", _wrap_smNodeInfo_port_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_partition_cap_set", _wrap_smNodeInfo_partition_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_partition_cap_get", _wrap_smNodeInfo_partition_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_device_id_set", _wrap_smNodeInfo_device_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_device_id_get", _wrap_smNodeInfo_device_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_revision_set", _wrap_smNodeInfo_revision_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_revision_get", _wrap_smNodeInfo_revision_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_port_num_vendor_id_set", _wrap_smNodeInfo_port_num_vendor_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_port_num_vendor_id_get", _wrap_smNodeInfo_port_num_vendor_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_getByDr", _wrap_smNodeInfo_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_setByDr", _wrap_smNodeInfo_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_getByLid", _wrap_smNodeInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeInfo_setByLid", _wrap_smNodeInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNodeInfo",TclsmNodeInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_m_key_set", _wrap_smPortInfo_m_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_m_key_get", _wrap_smPortInfo_m_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_subnet_prefix_set", _wrap_smPortInfo_subnet_prefix_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_subnet_prefix_get", _wrap_smPortInfo_subnet_prefix_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_base_lid_set", _wrap_smPortInfo_base_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_base_lid_get", _wrap_smPortInfo_base_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_master_sm_base_lid_set", _wrap_smPortInfo_master_sm_base_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_master_sm_base_lid_get", _wrap_smPortInfo_master_sm_base_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_capability_mask_set", _wrap_smPortInfo_capability_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_capability_mask_get", _wrap_smPortInfo_capability_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_diag_code_set", _wrap_smPortInfo_diag_code_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_diag_code_get", _wrap_smPortInfo_diag_code_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_m_key_lease_period_set", _wrap_smPortInfo_m_key_lease_period_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_m_key_lease_period_get", _wrap_smPortInfo_m_key_lease_period_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_local_port_num_set", _wrap_smPortInfo_local_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_local_port_num_get", _wrap_smPortInfo_local_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_width_enabled_set", _wrap_smPortInfo_link_width_enabled_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_width_enabled_get", _wrap_smPortInfo_link_width_enabled_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_width_supported_set", _wrap_smPortInfo_link_width_supported_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_width_supported_get", _wrap_smPortInfo_link_width_supported_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_width_active_set", _wrap_smPortInfo_link_width_active_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_width_active_get", _wrap_smPortInfo_link_width_active_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_state_info1_set", _wrap_smPortInfo_state_info1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_state_info1_get", _wrap_smPortInfo_state_info1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_state_info2_set", _wrap_smPortInfo_state_info2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_state_info2_get", _wrap_smPortInfo_state_info2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_mkey_lmc_set", _wrap_smPortInfo_mkey_lmc_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_mkey_lmc_get", _wrap_smPortInfo_mkey_lmc_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_speed_set", _wrap_smPortInfo_link_speed_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_link_speed_get", _wrap_smPortInfo_link_speed_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_mtu_smsl_set", _wrap_smPortInfo_mtu_smsl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_mtu_smsl_get", _wrap_smPortInfo_mtu_smsl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_cap_set", _wrap_smPortInfo_vl_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_cap_get", _wrap_smPortInfo_vl_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_high_limit_set", _wrap_smPortInfo_vl_high_limit_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_high_limit_get", _wrap_smPortInfo_vl_high_limit_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_arb_high_cap_set", _wrap_smPortInfo_vl_arb_high_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_arb_high_cap_get", _wrap_smPortInfo_vl_arb_high_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_arb_low_cap_set", _wrap_smPortInfo_vl_arb_low_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_arb_low_cap_get", _wrap_smPortInfo_vl_arb_low_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_mtu_cap_set", _wrap_smPortInfo_mtu_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_mtu_cap_get", _wrap_smPortInfo_mtu_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_stall_life_set", _wrap_smPortInfo_vl_stall_life_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_stall_life_get", _wrap_smPortInfo_vl_stall_life_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_enforce_set", _wrap_smPortInfo_vl_enforce_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_vl_enforce_get", _wrap_smPortInfo_vl_enforce_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_m_key_violations_set", _wrap_smPortInfo_m_key_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_m_key_violations_get", _wrap_smPortInfo_m_key_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_p_key_violations_set", _wrap_smPortInfo_p_key_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_p_key_violations_get", _wrap_smPortInfo_p_key_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_q_key_violations_set", _wrap_smPortInfo_q_key_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_q_key_violations_get", _wrap_smPortInfo_q_key_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_guid_cap_set", _wrap_smPortInfo_guid_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_guid_cap_get", _wrap_smPortInfo_guid_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_subnet_timeout_set", _wrap_smPortInfo_subnet_timeout_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_subnet_timeout_get", _wrap_smPortInfo_subnet_timeout_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_resp_time_value_set", _wrap_smPortInfo_resp_time_value_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_resp_time_value_get", _wrap_smPortInfo_resp_time_value_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_error_threshold_set", _wrap_smPortInfo_error_threshold_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_error_threshold_get", _wrap_smPortInfo_error_threshold_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_getByDr", _wrap_smPortInfo_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_setByDr", _wrap_smPortInfo_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_getByLid", _wrap_smPortInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPortInfo_setByLid", _wrap_smPortInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smPortInfo",TclsmPortInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_lin_cap_set", _wrap_smSwInfo_lin_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_lin_cap_get", _wrap_smSwInfo_lin_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_rand_cap_set", _wrap_smSwInfo_rand_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_rand_cap_get", _wrap_smSwInfo_rand_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_mcast_cap_set", _wrap_smSwInfo_mcast_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_mcast_cap_get", _wrap_smSwInfo_mcast_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_lin_top_set", _wrap_smSwInfo_lin_top_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_lin_top_get", _wrap_smSwInfo_lin_top_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_def_port_set", _wrap_smSwInfo_def_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_def_port_get", _wrap_smSwInfo_def_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_def_mcast_pri_port_set", _wrap_smSwInfo_def_mcast_pri_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_def_mcast_pri_port_get", _wrap_smSwInfo_def_mcast_pri_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_def_mcast_not_port_set", _wrap_smSwInfo_def_mcast_not_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_def_mcast_not_port_get", _wrap_smSwInfo_def_mcast_not_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_life_state_set", _wrap_smSwInfo_life_state_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_life_state_get", _wrap_smSwInfo_life_state_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_lids_per_port_set", _wrap_smSwInfo_lids_per_port_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_lids_per_port_get", _wrap_smSwInfo_lids_per_port_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_enforce_cap_set", _wrap_smSwInfo_enforce_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_enforce_cap_get", _wrap_smSwInfo_enforce_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_flags_set", _wrap_smSwInfo_flags_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_flags_get", _wrap_smSwInfo_flags_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_getByDr", _wrap_smSwInfo_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_setByDr", _wrap_smSwInfo_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_getByLid", _wrap_smSwInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSwInfo_setByLid", _wrap_smSwInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smSwInfo",TclsmSwInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smLftBlock_lft_set", _wrap_smLftBlock_lft_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smLftBlock_lft_get", _wrap_smLftBlock_lft_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smLftBlock_getByDr", _wrap_smLftBlock_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smLftBlock_setByDr", _wrap_smLftBlock_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smLftBlock_getByLid", _wrap_smLftBlock_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smLftBlock_setByLid", _wrap_smLftBlock_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smLftBlock",TclsmLftBlockCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smMftBlock_mft_set", _wrap_smMftBlock_mft_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smMftBlock_mft_get", _wrap_smMftBlock_mft_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smMftBlock_getByDr", _wrap_smMftBlock_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smMftBlock_setByDr", _wrap_smMftBlock_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smMftBlock_getByLid", _wrap_smMftBlock_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smMftBlock_setByLid", _wrap_smMftBlock_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smMftBlock",TclsmMftBlockCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smGuidInfo_guid_set", _wrap_smGuidInfo_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smGuidInfo_guid_get", _wrap_smGuidInfo_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smGuidInfo_getByDr", _wrap_smGuidInfo_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smGuidInfo_setByDr", _wrap_smGuidInfo_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smGuidInfo_getByLid", _wrap_smGuidInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smGuidInfo_setByLid", _wrap_smGuidInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smGuidInfo",TclsmGuidInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPkeyTable_pkey_entry_set", _wrap_smPkeyTable_pkey_entry_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPkeyTable_pkey_entry_get", _wrap_smPkeyTable_pkey_entry_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPkeyTable_getByDr", _wrap_smPkeyTable_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPkeyTable_setByDr", _wrap_smPkeyTable_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPkeyTable_getByLid", _wrap_smPkeyTable_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smPkeyTable_setByLid", _wrap_smPkeyTable_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smPkeyTable",TclsmPkeyTableCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSlVlTable_raw_vl_by_sl_set", _wrap_smSlVlTable_raw_vl_by_sl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSlVlTable_raw_vl_by_sl_get", _wrap_smSlVlTable_raw_vl_by_sl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSlVlTable_getByDr", _wrap_smSlVlTable_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSlVlTable_setByDr", _wrap_smSlVlTable_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSlVlTable_getByLid", _wrap_smSlVlTable_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSlVlTable_setByLid", _wrap_smSlVlTable_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smSlVlTable",TclsmSlVlTableCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smVlArbTable_vl_entry_set", _wrap_smVlArbTable_vl_entry_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smVlArbTable_vl_entry_get", _wrap_smVlArbTable_vl_entry_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smVlArbTable_getByDr", _wrap_smVlArbTable_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smVlArbTable_setByDr", _wrap_smVlArbTable_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smVlArbTable_getByLid", _wrap_smVlArbTable_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smVlArbTable_setByLid", _wrap_smVlArbTable_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smVlArbTable",TclsmVlArbTableCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeDesc_description_set", _wrap_smNodeDesc_description_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeDesc_description_get", _wrap_smNodeDesc_description_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeDesc_getByDr", _wrap_smNodeDesc_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeDesc_setByDr", _wrap_smNodeDesc_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeDesc_getByLid", _wrap_smNodeDesc_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNodeDesc_setByLid", _wrap_smNodeDesc_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNodeDesc",TclsmNodeDescCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_guid_set", _wrap_smSMInfo_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_guid_get", _wrap_smSMInfo_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_sm_key_set", _wrap_smSMInfo_sm_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_sm_key_get", _wrap_smSMInfo_sm_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_act_count_set", _wrap_smSMInfo_act_count_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_act_count_get", _wrap_smSMInfo_act_count_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_pri_state_set", _wrap_smSMInfo_pri_state_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_pri_state_get", _wrap_smSMInfo_pri_state_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_getByDr", _wrap_smSMInfo_getByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_setByDr", _wrap_smSMInfo_setByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_getByLid", _wrap_smSMInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smSMInfo_setByLid", _wrap_smSMInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smSMInfo",TclsmSMInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_generic_type_set", _wrap_smNotice_generic_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_generic_type_get", _wrap_smNotice_generic_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_issuer_lid_set", _wrap_smNotice_issuer_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_issuer_lid_get", _wrap_smNotice_issuer_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_toggle_count_set", _wrap_smNotice_toggle_count_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_toggle_count_get", _wrap_smNotice_toggle_count_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_issuer_gid_set", _wrap_smNotice_issuer_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_issuer_gid_get", _wrap_smNotice_issuer_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_get", _wrap_smNotice_g_or_v_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_get", _wrap_smNotice_data_details_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_trapByDr", _wrap_smNotice_trapByDr, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_trapByLid", _wrap_smNotice_trapByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice",TclsmNoticeCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_get", _wrap_smNotice_g_or_v_generic_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_get", _wrap_smNotice_g_or_v_vend_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_g_or_v",TclsmNotice_g_or_vCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_raw_data_get", _wrap_smNotice_data_details_raw_data_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_64_67_get", _wrap_smNotice_data_details_ntc_64_67_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_128_get", _wrap_smNotice_data_details_ntc_128_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_get", _wrap_smNotice_data_details_ntc_129_131_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_get", _wrap_smNotice_data_details_ntc_144_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_get", _wrap_smNotice_data_details_ntc_145_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_get", _wrap_smNotice_data_details_ntc_256_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_get", _wrap_smNotice_data_details_ntc_257_258_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_get", _wrap_smNotice_data_details_ntc_259_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details",TclsmNotice_data_detailsCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_prod_type_msb_set", _wrap_smNotice_g_or_v_generic_prod_type_msb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_prod_type_msb_get", _wrap_smNotice_g_or_v_generic_prod_type_msb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_prod_type_lsb_set", _wrap_smNotice_g_or_v_generic_prod_type_lsb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_prod_type_lsb_get", _wrap_smNotice_g_or_v_generic_prod_type_lsb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_trap_num_set", _wrap_smNotice_g_or_v_generic_trap_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_generic_trap_num_get", _wrap_smNotice_g_or_v_generic_trap_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_g_or_v_generic",TclsmNotice_g_or_v_genericCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_vend_id_msb_set", _wrap_smNotice_g_or_v_vend_vend_id_msb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_vend_id_msb_get", _wrap_smNotice_g_or_v_vend_vend_id_msb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_vend_id_lsb_set", _wrap_smNotice_g_or_v_vend_vend_id_lsb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_vend_id_lsb_get", _wrap_smNotice_g_or_v_vend_vend_id_lsb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_dev_id_set", _wrap_smNotice_g_or_v_vend_dev_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_g_or_v_vend_dev_id_get", _wrap_smNotice_g_or_v_vend_dev_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_g_or_v_vend",TclsmNotice_g_or_v_vendCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_raw_data_details_set", _wrap_smNotice_data_details_raw_data_details_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_raw_data_details_get", _wrap_smNotice_data_details_raw_data_details_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_raw_data",TclsmNotice_data_details_raw_dataCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_64_67_res_set", _wrap_smNotice_data_details_ntc_64_67_res_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_64_67_res_get", _wrap_smNotice_data_details_ntc_64_67_res_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_64_67_gid_set", _wrap_smNotice_data_details_ntc_64_67_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_64_67_gid_get", _wrap_smNotice_data_details_ntc_64_67_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_64_67",TclsmNotice_data_details_ntc_64_67Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_128_sw_lid_set", _wrap_smNotice_data_details_ntc_128_sw_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_128_sw_lid_get", _wrap_smNotice_data_details_ntc_128_sw_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_128",TclsmNotice_data_details_ntc_128Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_pad_set", _wrap_smNotice_data_details_ntc_129_131_pad_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_pad_get", _wrap_smNotice_data_details_ntc_129_131_pad_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_lid_set", _wrap_smNotice_data_details_ntc_129_131_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_lid_get", _wrap_smNotice_data_details_ntc_129_131_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_port_num_set", _wrap_smNotice_data_details_ntc_129_131_port_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_129_131_port_num_get", _wrap_smNotice_data_details_ntc_129_131_port_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_129_131",TclsmNotice_data_details_ntc_129_131Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_pad1_set", _wrap_smNotice_data_details_ntc_144_pad1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_pad1_get", _wrap_smNotice_data_details_ntc_144_pad1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_lid_set", _wrap_smNotice_data_details_ntc_144_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_lid_get", _wrap_smNotice_data_details_ntc_144_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_pad2_set", _wrap_smNotice_data_details_ntc_144_pad2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_pad2_get", _wrap_smNotice_data_details_ntc_144_pad2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_new_cap_mask_set", _wrap_smNotice_data_details_ntc_144_new_cap_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_144_new_cap_mask_get", _wrap_smNotice_data_details_ntc_144_new_cap_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_144",TclsmNotice_data_details_ntc_144Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_pad1_set", _wrap_smNotice_data_details_ntc_145_pad1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_pad1_get", _wrap_smNotice_data_details_ntc_145_pad1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_lid_set", _wrap_smNotice_data_details_ntc_145_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_lid_get", _wrap_smNotice_data_details_ntc_145_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_pad2_set", _wrap_smNotice_data_details_ntc_145_pad2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_pad2_get", _wrap_smNotice_data_details_ntc_145_pad2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_new_sys_guid_set", _wrap_smNotice_data_details_ntc_145_new_sys_guid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_145_new_sys_guid_get", _wrap_smNotice_data_details_ntc_145_new_sys_guid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_145",TclsmNotice_data_details_ntc_145Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_pad1_set", _wrap_smNotice_data_details_ntc_256_pad1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_pad1_get", _wrap_smNotice_data_details_ntc_256_pad1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_lid_set", _wrap_smNotice_data_details_ntc_256_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_lid_get", _wrap_smNotice_data_details_ntc_256_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_pad2_set", _wrap_smNotice_data_details_ntc_256_pad2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_pad2_get", _wrap_smNotice_data_details_ntc_256_pad2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_method_set", _wrap_smNotice_data_details_ntc_256_method_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_method_get", _wrap_smNotice_data_details_ntc_256_method_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_pad3_set", _wrap_smNotice_data_details_ntc_256_pad3_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_pad3_get", _wrap_smNotice_data_details_ntc_256_pad3_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_attr_id_set", _wrap_smNotice_data_details_ntc_256_attr_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_attr_id_get", _wrap_smNotice_data_details_ntc_256_attr_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_attr_mod_set", _wrap_smNotice_data_details_ntc_256_attr_mod_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_attr_mod_get", _wrap_smNotice_data_details_ntc_256_attr_mod_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_mkey_set", _wrap_smNotice_data_details_ntc_256_mkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_mkey_get", _wrap_smNotice_data_details_ntc_256_mkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_dr_slid_set", _wrap_smNotice_data_details_ntc_256_dr_slid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_dr_slid_get", _wrap_smNotice_data_details_ntc_256_dr_slid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_dr_trunc_hop_set", _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_dr_trunc_hop_get", _wrap_smNotice_data_details_ntc_256_dr_trunc_hop_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_dr_rtn_path_set", _wrap_smNotice_data_details_ntc_256_dr_rtn_path_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_256_dr_rtn_path_get", _wrap_smNotice_data_details_ntc_256_dr_rtn_path_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_256",TclsmNotice_data_details_ntc_256Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_pad1_set", _wrap_smNotice_data_details_ntc_257_258_pad1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_pad1_get", _wrap_smNotice_data_details_ntc_257_258_pad1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_lid1_set", _wrap_smNotice_data_details_ntc_257_258_lid1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_lid1_get", _wrap_smNotice_data_details_ntc_257_258_lid1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_lid2_set", _wrap_smNotice_data_details_ntc_257_258_lid2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_lid2_get", _wrap_smNotice_data_details_ntc_257_258_lid2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_key_set", _wrap_smNotice_data_details_ntc_257_258_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_key_get", _wrap_smNotice_data_details_ntc_257_258_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_sl_set", _wrap_smNotice_data_details_ntc_257_258_sl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_sl_get", _wrap_smNotice_data_details_ntc_257_258_sl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_qp1_set", _wrap_smNotice_data_details_ntc_257_258_qp1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_qp1_get", _wrap_smNotice_data_details_ntc_257_258_qp1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_qp2_set", _wrap_smNotice_data_details_ntc_257_258_qp2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_qp2_get", _wrap_smNotice_data_details_ntc_257_258_qp2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_gid1_set", _wrap_smNotice_data_details_ntc_257_258_gid1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_gid1_get", _wrap_smNotice_data_details_ntc_257_258_gid1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_gid2_set", _wrap_smNotice_data_details_ntc_257_258_gid2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_257_258_gid2_get", _wrap_smNotice_data_details_ntc_257_258_gid2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_257_258",TclsmNotice_data_details_ntc_257_258Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_data_valid_set", _wrap_smNotice_data_details_ntc_259_data_valid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_data_valid_get", _wrap_smNotice_data_details_ntc_259_data_valid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_lid1_set", _wrap_smNotice_data_details_ntc_259_lid1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_lid1_get", _wrap_smNotice_data_details_ntc_259_lid1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_lid2_set", _wrap_smNotice_data_details_ntc_259_lid2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_lid2_get", _wrap_smNotice_data_details_ntc_259_lid2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_key_set", _wrap_smNotice_data_details_ntc_259_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_key_get", _wrap_smNotice_data_details_ntc_259_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_sl_set", _wrap_smNotice_data_details_ntc_259_sl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_sl_get", _wrap_smNotice_data_details_ntc_259_sl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_qp1_set", _wrap_smNotice_data_details_ntc_259_qp1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_qp1_get", _wrap_smNotice_data_details_ntc_259_qp1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_qp2_msb_set", _wrap_smNotice_data_details_ntc_259_qp2_msb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_qp2_msb_get", _wrap_smNotice_data_details_ntc_259_qp2_msb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_qp2_lsb_set", _wrap_smNotice_data_details_ntc_259_qp2_lsb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_qp2_lsb_get", _wrap_smNotice_data_details_ntc_259_qp2_lsb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_gid1_set", _wrap_smNotice_data_details_ntc_259_gid1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_gid1_get", _wrap_smNotice_data_details_ntc_259_gid1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_gid2_set", _wrap_smNotice_data_details_ntc_259_gid2_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_gid2_get", _wrap_smNotice_data_details_ntc_259_gid2_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_sw_lid_set", _wrap_smNotice_data_details_ntc_259_sw_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_sw_lid_get", _wrap_smNotice_data_details_ntc_259_sw_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_port_no_set", _wrap_smNotice_data_details_ntc_259_port_no_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "smNotice_data_details_ntc_259_port_no_get", _wrap_smNotice_data_details_ntc_259_port_no_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "smNotice_data_details_ntc_259",TclsmNotice_data_details_ntc_259Cmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_base_ver_set", _wrap_ccClassPortInfo_base_ver_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_base_ver_get", _wrap_ccClassPortInfo_base_ver_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_class_ver_set", _wrap_ccClassPortInfo_class_ver_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_class_ver_get", _wrap_ccClassPortInfo_class_ver_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_cap_mask_set", _wrap_ccClassPortInfo_cap_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_cap_mask_get", _wrap_ccClassPortInfo_cap_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_cap_mask2_resp_time_set", _wrap_ccClassPortInfo_cap_mask2_resp_time_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_cap_mask2_resp_time_get", _wrap_ccClassPortInfo_cap_mask2_resp_time_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_gid_set", _wrap_ccClassPortInfo_redir_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_gid_get", _wrap_ccClassPortInfo_redir_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_tc_sl_fl_set", _wrap_ccClassPortInfo_redir_tc_sl_fl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_tc_sl_fl_get", _wrap_ccClassPortInfo_redir_tc_sl_fl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_lid_set", _wrap_ccClassPortInfo_redir_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_lid_get", _wrap_ccClassPortInfo_redir_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_pkey_set", _wrap_ccClassPortInfo_redir_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_pkey_get", _wrap_ccClassPortInfo_redir_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_qp_set", _wrap_ccClassPortInfo_redir_qp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_qp_get", _wrap_ccClassPortInfo_redir_qp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_qkey_set", _wrap_ccClassPortInfo_redir_qkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_redir_qkey_get", _wrap_ccClassPortInfo_redir_qkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_gid_set", _wrap_ccClassPortInfo_trap_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_gid_get", _wrap_ccClassPortInfo_trap_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_tc_sl_fl_set", _wrap_ccClassPortInfo_trap_tc_sl_fl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_tc_sl_fl_get", _wrap_ccClassPortInfo_trap_tc_sl_fl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_lid_set", _wrap_ccClassPortInfo_trap_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_lid_get", _wrap_ccClassPortInfo_trap_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_pkey_set", _wrap_ccClassPortInfo_trap_pkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_pkey_get", _wrap_ccClassPortInfo_trap_pkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_hop_qp_set", _wrap_ccClassPortInfo_trap_hop_qp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_hop_qp_get", _wrap_ccClassPortInfo_trap_hop_qp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_qkey_set", _wrap_ccClassPortInfo_trap_qkey_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_trap_qkey_get", _wrap_ccClassPortInfo_trap_qkey_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_getByLid", _wrap_ccClassPortInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccClassPortInfo_setByLid", _wrap_ccClassPortInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccClassPortInfo",TclccClassPortInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic_type_set", _wrap_ccNotice_generic_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic_type_get", _wrap_ccNotice_generic_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic__prod_type_msb_set", _wrap_ccNotice_generic__prod_type_msb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic__prod_type_msb_get", _wrap_ccNotice_generic__prod_type_msb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic__prod_type_lsb_set", _wrap_ccNotice_generic__prod_type_lsb_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic__prod_type_lsb_get", _wrap_ccNotice_generic__prod_type_lsb_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic__trap_num_set", _wrap_ccNotice_generic__trap_num_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_generic__trap_num_get", _wrap_ccNotice_generic__trap_num_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_issuer_lid_set", _wrap_ccNotice_issuer_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_issuer_lid_get", _wrap_ccNotice_issuer_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_toggle_count_set", _wrap_ccNotice_toggle_count_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_toggle_count_get", _wrap_ccNotice_toggle_count_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__source_lid_set", _wrap_ccNotice_ntc0__source_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__source_lid_get", _wrap_ccNotice_ntc0__source_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__method_set", _wrap_ccNotice_ntc0__method_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__method_get", _wrap_ccNotice_ntc0__method_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__resv0_set", _wrap_ccNotice_ntc0__resv0_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__resv0_get", _wrap_ccNotice_ntc0__resv0_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__attr_id_set", _wrap_ccNotice_ntc0__attr_id_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__attr_id_get", _wrap_ccNotice_ntc0__attr_id_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__resv1_set", _wrap_ccNotice_ntc0__resv1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__resv1_get", _wrap_ccNotice_ntc0__resv1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__attr_mod_set", _wrap_ccNotice_ntc0__attr_mod_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__attr_mod_get", _wrap_ccNotice_ntc0__attr_mod_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__qp_set", _wrap_ccNotice_ntc0__qp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__qp_get", _wrap_ccNotice_ntc0__qp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__cc_key_set", _wrap_ccNotice_ntc0__cc_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__cc_key_get", _wrap_ccNotice_ntc0__cc_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__source_gid_set", _wrap_ccNotice_ntc0__source_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__source_gid_get", _wrap_ccNotice_ntc0__source_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__padding_set", _wrap_ccNotice_ntc0__padding_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_ntc0__padding_get", _wrap_ccNotice_ntc0__padding_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_issuer_gid_set", _wrap_ccNotice_issuer_gid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_issuer_gid_get", _wrap_ccNotice_issuer_gid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccNotice_trapByLid", _wrap_ccNotice_trapByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccNotice",TclccNoticeCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_cong_info_set", _wrap_ccCongestionInfo_cong_info_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_cong_info_get", _wrap_ccCongestionInfo_cong_info_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_resv_set", _wrap_ccCongestionInfo_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_resv_get", _wrap_ccCongestionInfo_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_ctrl_table_cap_set", _wrap_ccCongestionInfo_ctrl_table_cap_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_ctrl_table_cap_get", _wrap_ccCongestionInfo_ctrl_table_cap_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionInfo_getByLid", _wrap_ccCongestionInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccCongestionInfo",TclccCongestionInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_cc_key_set", _wrap_ccCongestionKeyInfo_cc_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_cc_key_get", _wrap_ccCongestionKeyInfo_cc_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_protect_bit_set", _wrap_ccCongestionKeyInfo_protect_bit_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_protect_bit_get", _wrap_ccCongestionKeyInfo_protect_bit_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_lease_period_set", _wrap_ccCongestionKeyInfo_lease_period_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_lease_period_get", _wrap_ccCongestionKeyInfo_lease_period_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_violations_set", _wrap_ccCongestionKeyInfo_violations_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_violations_get", _wrap_ccCongestionKeyInfo_violations_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_getByLid", _wrap_ccCongestionKeyInfo_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCongestionKeyInfo_setByLid", _wrap_ccCongestionKeyInfo_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccCongestionKeyInfo",TclccCongestionKeyInfoCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_slid_set", _wrap_ib_cong_log_event_sw_t_slid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_slid_get", _wrap_ib_cong_log_event_sw_t_slid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_dlid_set", _wrap_ib_cong_log_event_sw_t_dlid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_dlid_get", _wrap_ib_cong_log_event_sw_t_dlid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_sl_set", _wrap_ib_cong_log_event_sw_t_sl_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_sl_get", _wrap_ib_cong_log_event_sw_t_sl_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_time_stamp_set", _wrap_ib_cong_log_event_sw_t_time_stamp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_sw_t_time_stamp_get", _wrap_ib_cong_log_event_sw_t_time_stamp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ib_cong_log_event_sw_t",Tclib_cong_log_event_sw_tCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_local_qp_resv0_set", _wrap_ib_cong_log_event_ca_t_local_qp_resv0_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_local_qp_resv0_get", _wrap_ib_cong_log_event_ca_t_local_qp_resv0_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_remote_qp_sl_service_type_set", _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_remote_qp_sl_service_type_get", _wrap_ib_cong_log_event_ca_t_remote_qp_sl_service_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_remote_lid_set", _wrap_ib_cong_log_event_ca_t_remote_lid_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_remote_lid_get", _wrap_ib_cong_log_event_ca_t_remote_lid_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_resv1_set", _wrap_ib_cong_log_event_ca_t_resv1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_resv1_get", _wrap_ib_cong_log_event_ca_t_resv1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_time_stamp_set", _wrap_ib_cong_log_event_ca_t_time_stamp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cong_log_event_ca_t_time_stamp_get", _wrap_ib_cong_log_event_ca_t_time_stamp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ib_cong_log_event_ca_t",Tclib_cong_log_event_ca_tCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_log_type_set", _wrap_ccSWCongestionLog_log_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_log_type_get", _wrap_ccSWCongestionLog_log_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_cong_flags_set", _wrap_ccSWCongestionLog_cong_flags_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_cong_flags_get", _wrap_ccSWCongestionLog_cong_flags_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_event_counter_set", _wrap_ccSWCongestionLog_event_counter_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_event_counter_get", _wrap_ccSWCongestionLog_event_counter_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_time_stamp_set", _wrap_ccSWCongestionLog_time_stamp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_time_stamp_get", _wrap_ccSWCongestionLog_time_stamp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_port_map_set", _wrap_ccSWCongestionLog_port_map_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_port_map_get", _wrap_ccSWCongestionLog_port_map_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_entry_list_set", _wrap_ccSWCongestionLog_entry_list_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_entry_list_get", _wrap_ccSWCongestionLog_entry_list_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionLog_getByLid", _wrap_ccSWCongestionLog_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccSWCongestionLog",TclccSWCongestionLogCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_log_type_set", _wrap_ccCACongestionLog_log_type_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_log_type_get", _wrap_ccCACongestionLog_log_type_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_cong_flags_set", _wrap_ccCACongestionLog_cong_flags_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_cong_flags_get", _wrap_ccCACongestionLog_cong_flags_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_event_counter_set", _wrap_ccCACongestionLog_event_counter_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_event_counter_get", _wrap_ccCACongestionLog_event_counter_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_event_map_set", _wrap_ccCACongestionLog_event_map_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_event_map_get", _wrap_ccCACongestionLog_event_map_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_resv_set", _wrap_ccCACongestionLog_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_resv_get", _wrap_ccCACongestionLog_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_time_stamp_set", _wrap_ccCACongestionLog_time_stamp_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_time_stamp_get", _wrap_ccCACongestionLog_time_stamp_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_log_event_set", _wrap_ccCACongestionLog_log_event_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_log_event_get", _wrap_ccCACongestionLog_log_event_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionLog_getByLid", _wrap_ccCACongestionLog_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccCACongestionLog",TclccCACongestionLogCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_control_map_set", _wrap_ccSWCongestionSetting_control_map_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_control_map_get", _wrap_ccSWCongestionSetting_control_map_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_victim_mask_set", _wrap_ccSWCongestionSetting_victim_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_victim_mask_get", _wrap_ccSWCongestionSetting_victim_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_credit_mask_set", _wrap_ccSWCongestionSetting_credit_mask_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_credit_mask_get", _wrap_ccSWCongestionSetting_credit_mask_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_threshold_resv_set", _wrap_ccSWCongestionSetting_threshold_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_threshold_resv_get", _wrap_ccSWCongestionSetting_threshold_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_packet_size_set", _wrap_ccSWCongestionSetting_packet_size_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_packet_size_get", _wrap_ccSWCongestionSetting_packet_size_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_cs_threshold_resv_set", _wrap_ccSWCongestionSetting_cs_threshold_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_cs_threshold_resv_get", _wrap_ccSWCongestionSetting_cs_threshold_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_cs_return_delay_set", _wrap_ccSWCongestionSetting_cs_return_delay_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_cs_return_delay_get", _wrap_ccSWCongestionSetting_cs_return_delay_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_marking_rate_set", _wrap_ccSWCongestionSetting_marking_rate_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_marking_rate_get", _wrap_ccSWCongestionSetting_marking_rate_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_getByLid", _wrap_ccSWCongestionSetting_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWCongestionSetting_setByLid", _wrap_ccSWCongestionSetting_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccSWCongestionSetting",TclccSWCongestionSettingCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_set", _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get", _wrap_ib_sw_port_cong_setting_element_t_valid_ctrl_type_res_threshold_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_sw_port_cong_setting_element_t_packet_size_set", _wrap_ib_sw_port_cong_setting_element_t_packet_size_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_sw_port_cong_setting_element_t_packet_size_get", _wrap_ib_sw_port_cong_setting_element_t_packet_size_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_sw_port_cong_setting_element_t_cong_param_set", _wrap_ib_sw_port_cong_setting_element_t_cong_param_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_sw_port_cong_setting_element_t_cong_param_get", _wrap_ib_sw_port_cong_setting_element_t_cong_param_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ib_sw_port_cong_setting_element_t",Tclib_sw_port_cong_setting_element_tCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWPortCongestionSetting_block_set", _wrap_ccSWPortCongestionSetting_block_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWPortCongestionSetting_block_get", _wrap_ccSWPortCongestionSetting_block_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWPortCongestionSetting_getByLid", _wrap_ccSWPortCongestionSetting_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccSWPortCongestionSetting_setByLid", _wrap_ccSWPortCongestionSetting_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccSWPortCongestionSetting",TclccSWPortCongestionSettingCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_ccti_timer_set", _wrap_ib_ca_cong_entry_t_ccti_timer_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_ccti_timer_get", _wrap_ib_ca_cong_entry_t_ccti_timer_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_ccti_increase_set", _wrap_ib_ca_cong_entry_t_ccti_increase_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_ccti_increase_get", _wrap_ib_ca_cong_entry_t_ccti_increase_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_trigger_threshold_set", _wrap_ib_ca_cong_entry_t_trigger_threshold_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_trigger_threshold_get", _wrap_ib_ca_cong_entry_t_trigger_threshold_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_ccti_min_set", _wrap_ib_ca_cong_entry_t_ccti_min_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_ccti_min_get", _wrap_ib_ca_cong_entry_t_ccti_min_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_resv0_set", _wrap_ib_ca_cong_entry_t_resv0_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_resv0_get", _wrap_ib_ca_cong_entry_t_resv0_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_resv1_set", _wrap_ib_ca_cong_entry_t_resv1_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_ca_cong_entry_t_resv1_get", _wrap_ib_ca_cong_entry_t_resv1_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ib_ca_cong_entry_t",Tclib_ca_cong_entry_tCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_port_control_set", _wrap_ccCACongestionSetting_port_control_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_port_control_get", _wrap_ccCACongestionSetting_port_control_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_control_map_set", _wrap_ccCACongestionSetting_control_map_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_control_map_get", _wrap_ccCACongestionSetting_control_map_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_entry_list_set", _wrap_ccCACongestionSetting_entry_list_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_entry_list_get", _wrap_ccCACongestionSetting_entry_list_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_getByLid", _wrap_ccCACongestionSetting_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccCACongestionSetting_setByLid", _wrap_ccCACongestionSetting_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccCACongestionSetting",TclccCACongestionSettingCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cc_tbl_entry_t_shift_multiplier_set", _wrap_ib_cc_tbl_entry_t_shift_multiplier_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ib_cc_tbl_entry_t_shift_multiplier_get", _wrap_ib_cc_tbl_entry_t_shift_multiplier_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ib_cc_tbl_entry_t",Tclib_cc_tbl_entry_tCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_ccti_limit_set", _wrap_ccTable_ccti_limit_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_ccti_limit_get", _wrap_ccTable_ccti_limit_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_resv_set", _wrap_ccTable_resv_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_resv_get", _wrap_ccTable_resv_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_entry_list_set", _wrap_ccTable_entry_list_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_entry_list_get", _wrap_ccTable_entry_list_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_getByLid", _wrap_ccTable_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTable_setByLid", _wrap_ccTable_setByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccTable",TclccTableCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTimeStamp_value_set", _wrap_ccTimeStamp_value_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTimeStamp_value_get", _wrap_ccTimeStamp_value_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ccTimeStamp_getByLid", _wrap_ccTimeStamp_getByLid, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ccTimeStamp",TclccTimeStampCmd, (ClientData) NULL, NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_single_thread_set", _wrap_ibis_opt_t_single_thread_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_single_thread_get", _wrap_ibis_opt_t_single_thread_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_force_log_flush_set", _wrap_ibis_opt_t_force_log_flush_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_force_log_flush_get", _wrap_ibis_opt_t_force_log_flush_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_log_flags_set", _wrap_ibis_opt_t_log_flags_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_log_flags_get", _wrap_ibis_opt_t_log_flags_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_log_file_set", _wrap_ibis_opt_t_log_file_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_log_file_get", _wrap_ibis_opt_t_log_file_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_sm_key_set", _wrap_ibis_opt_t_sm_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_sm_key_get", _wrap_ibis_opt_t_sm_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_m_key_set", _wrap_ibis_opt_t_m_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_m_key_get", _wrap_ibis_opt_t_m_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_v_key_set", _wrap_ibis_opt_t_v_key_set, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp, SWIG_prefix "ibis_opt_t_v_key_get", _wrap_ibis_opt_t_v_key_get, (ClientData) NULL, (Tcl_CmdDeleteProc *) NULL);
	 Tcl_CreateObjCommand(interp,SWIG_prefix "ibis_opt_t",Tclibis_opt_tCmd, (ClientData) NULL, NULL);
/*
 * These are the pointer type-equivalency mappings.
 * (Used by the SWIG pointer type-checker).
 */
	 SWIG_RegisterMapping("_struct__ibsm_sm_info","_smSMInfo",0);
	 SWIG_RegisterMapping("_struct__ibsm_sm_info","__ibsm_sm_info",0);
	 SWIG_RegisterMapping("__ibcc_class_port_info","_ccClassPortInfo",0);
	 SWIG_RegisterMapping("__ibcc_class_port_info","_struct__ibcc_class_port_info",0);
	 SWIG_RegisterMapping("_struct__ibcc_notice","_ccNotice",0);
	 SWIG_RegisterMapping("_struct__ibcc_notice","__ibcc_notice",0);
	 SWIG_RegisterMapping("_signed_long","_long",0);
	 SWIG_RegisterMapping("_struct__ibsm_vl_arb_table","_smVlArbTable",0);
	 SWIG_RegisterMapping("_struct__ibsm_vl_arb_table","__ibsm_vl_arb_table",0);
	 SWIG_RegisterMapping("_ibis_opt_t","_struct__ibis_opt",0);
	 SWIG_RegisterMapping("_ibis_opt_t","__ibis_opt",0);
	 SWIG_RegisterMapping("__ib_guid_info","_sacGuidInfo",0);
	 SWIG_RegisterMapping("__ib_guid_info","_struct__ib_guid_info",0);
	 SWIG_RegisterMapping("_sacPortInfo","_struct__ib_port_info",0);
	 SWIG_RegisterMapping("_sacPortInfo","__ib_port_info",0);
	 SWIG_RegisterMapping("_struct__ib_pkey_table","_sacPKeyTbl",0);
	 SWIG_RegisterMapping("_struct__ib_pkey_table","__ib_pkey_table",0);
	 SWIG_RegisterMapping("_ccTimeStamp","_struct__ib_time_stamp",0);
	 SWIG_RegisterMapping("_ccTimeStamp","__ib_time_stamp",0);
	 SWIG_RegisterMapping("_sacNodeInfo","_struct__ib_node_info",0);
	 SWIG_RegisterMapping("_sacNodeInfo","__ib_node_info",0);
	 SWIG_RegisterMapping("_struct__ib_portinfo_record","_sacPortRec",0);
	 SWIG_RegisterMapping("_struct__ib_portinfo_record","__ib_portinfo_record",0);
	 SWIG_RegisterMapping("__ibcc_notice","_ccNotice",0);
	 SWIG_RegisterMapping("__ibcc_notice","_struct__ibcc_notice",0);
	 SWIG_RegisterMapping("_struct__ib_port_info","_sacPortInfo",0);
	 SWIG_RegisterMapping("_struct__ib_port_info","__ib_port_info",0);
	 SWIG_RegisterMapping("_struct__ib_cong_log_event_ca","_ib_cong_log_event_ca_t",0);
	 SWIG_RegisterMapping("_struct__ib_cong_log_event_ca","__ib_cong_log_event_ca",0);
	 SWIG_RegisterMapping("_struct__ib_switch_info","_sacSwInfo",0);
	 SWIG_RegisterMapping("_struct__ib_switch_info","__ib_switch_info",0);
	 SWIG_RegisterMapping("_sacNodeRec","_struct__ib_node_record_t",0);
	 SWIG_RegisterMapping("_sacNodeRec","__ib_node_record_t",0);
	 SWIG_RegisterMapping("__ib_switch_info","_sacSwInfo",0);
	 SWIG_RegisterMapping("__ib_switch_info","_struct__ib_switch_info",0);
	 SWIG_RegisterMapping("_struct__ibsm_mft_block","_smMftBlock",0);
	 SWIG_RegisterMapping("_struct__ibsm_mft_block","__ibsm_mft_block",0);
	 SWIG_RegisterMapping("_struct__ibcc_class_port_info","_ccClassPortInfo",0);
	 SWIG_RegisterMapping("_struct__ibcc_class_port_info","__ibcc_class_port_info",0);
	 SWIG_RegisterMapping("__ibsm_mft_block","_smMftBlock",0);
	 SWIG_RegisterMapping("__ibsm_mft_block","_struct__ibsm_mft_block",0);
	 SWIG_RegisterMapping("_ib_cong_log_event_sw_t","_struct__ib_cong_log_event_sw",0);
	 SWIG_RegisterMapping("_ib_cong_log_event_sw_t","__ib_cong_log_event_sw",0);
	 SWIG_RegisterMapping("_long","_unsigned_long",0);
	 SWIG_RegisterMapping("_long","_signed_long",0);
	 SWIG_RegisterMapping("_ib_cong_log_event_ca_t","_struct__ib_cong_log_event_ca",0);
	 SWIG_RegisterMapping("_ib_cong_log_event_ca_t","__ib_cong_log_event_ca",0);
	 SWIG_RegisterMapping("_sacSlVlTbl","_struct__ib_slvl_table",0);
	 SWIG_RegisterMapping("_sacSlVlTbl","__ib_slvl_table",0);
	 SWIG_RegisterMapping("_smNotice","_struct__ibsm_notice",0);
	 SWIG_RegisterMapping("_smNotice","__ibsm_notice",0);
	 SWIG_RegisterMapping("_struct__ib_sw_cong_setting","_ccSWCongestionSetting",0);
	 SWIG_RegisterMapping("_struct__ib_sw_cong_setting","__ib_sw_cong_setting",0);
	 SWIG_RegisterMapping("_struct__ibsm_port_info","_smPortInfo",0);
	 SWIG_RegisterMapping("_struct__ibsm_port_info","__ibsm_port_info",0);
	 SWIG_RegisterMapping("_struct__ib_node_info","_sacNodeInfo",0);
	 SWIG_RegisterMapping("_struct__ib_node_info","__ib_node_info",0);
	 SWIG_RegisterMapping("__ibsm_port_info","_smPortInfo",0);
	 SWIG_RegisterMapping("__ibsm_port_info","_struct__ibsm_port_info",0);
	 SWIG_RegisterMapping("_struct__ib_sm_info","_sacSmInfo",0);
	 SWIG_RegisterMapping("_struct__ib_sm_info","__ib_sm_info",0);
	 SWIG_RegisterMapping("_sacLinkRec","_struct__ib_link_record",0);
	 SWIG_RegisterMapping("_sacLinkRec","__ib_link_record",0);
	 SWIG_RegisterMapping("_sacClassPortInfo","_struct__ibsac_class_port_info",0);
	 SWIG_RegisterMapping("_sacClassPortInfo","__ibsac_class_port_info",0);
	 SWIG_RegisterMapping("__ibsm_vl_arb_table","_smVlArbTable",0);
	 SWIG_RegisterMapping("__ibsm_vl_arb_table","_struct__ibsm_vl_arb_table",0);
	 SWIG_RegisterMapping("_sacPKeyTbl","_struct__ib_pkey_table",0);
	 SWIG_RegisterMapping("_sacPKeyTbl","__ib_pkey_table",0);
	 SWIG_RegisterMapping("__ib_portinfo_record","_sacPortRec",0);
	 SWIG_RegisterMapping("__ib_portinfo_record","_struct__ib_portinfo_record",0);
	 SWIG_RegisterMapping("__ib_node_record_t","_sacNodeRec",0);
	 SWIG_RegisterMapping("__ib_node_record_t","_struct__ib_node_record_t",0);
	 SWIG_RegisterMapping("_sacGuidInfo","_struct__ib_guid_info",0);
	 SWIG_RegisterMapping("_sacGuidInfo","__ib_guid_info",0);
	 SWIG_RegisterMapping("_smVlArbTable","_struct__ibsm_vl_arb_table",0);
	 SWIG_RegisterMapping("_smVlArbTable","__ibsm_vl_arb_table",0);
	 SWIG_RegisterMapping("_struct__ibsm_node_info","_smNodeInfo",0);
	 SWIG_RegisterMapping("_struct__ibsm_node_info","__ibsm_node_info",0);
	 SWIG_RegisterMapping("__ibsm_switch_info","_smSwInfo",0);
	 SWIG_RegisterMapping("__ibsm_switch_info","_struct__ibsm_switch_info",0);
	 SWIG_RegisterMapping("__ibsm_node_info","_smNodeInfo",0);
	 SWIG_RegisterMapping("__ibsm_node_info","_struct__ibsm_node_info",0);
	 SWIG_RegisterMapping("_ccSWCongestionSetting","_struct__ib_sw_cong_setting",0);
	 SWIG_RegisterMapping("_ccSWCongestionSetting","__ib_sw_cong_setting",0);
	 SWIG_RegisterMapping("__ib_member_rec","_sacMCMRec",0);
	 SWIG_RegisterMapping("__ib_member_rec","_struct__ib_member_rec",0);
	 SWIG_RegisterMapping("__ib_sw_port_cong_setting","_ccSWPortCongestionSetting",0);
	 SWIG_RegisterMapping("__ib_sw_port_cong_setting","_struct__ib_sw_port_cong_setting",0);
	 SWIG_RegisterMapping("__ibis_opt","_ibis_opt_t",0);
	 SWIG_RegisterMapping("__ibis_opt","_struct__ibis_opt",0);
	 SWIG_RegisterMapping("_struct__ib_time_stamp","_ccTimeStamp",0);
	 SWIG_RegisterMapping("_struct__ib_time_stamp","__ib_time_stamp",0);
	 SWIG_RegisterMapping("__ib_sw_cong_setting","_ccSWCongestionSetting",0);
	 SWIG_RegisterMapping("__ib_sw_cong_setting","_struct__ib_sw_cong_setting",0);
	 SWIG_RegisterMapping("_sacServiceRec","_struct__ib_service_record",0);
	 SWIG_RegisterMapping("_sacServiceRec","__ib_service_record",0);
	 SWIG_RegisterMapping("_ib_cc_tbl_entry_t","_struct__ibcc_tbl_entry",0);
	 SWIG_RegisterMapping("_ib_cc_tbl_entry_t","__ibcc_tbl_entry",0);
	 SWIG_RegisterMapping("_struct__ib_sw_cong_log","_ccSWCongestionLog",0);
	 SWIG_RegisterMapping("_struct__ib_sw_cong_log","__ib_sw_cong_log",0);
	 SWIG_RegisterMapping("__ib_sw_cong_log","_ccSWCongestionLog",0);
	 SWIG_RegisterMapping("__ib_sw_cong_log","_struct__ib_sw_cong_log",0);
	 SWIG_RegisterMapping("_struct__ib_path_rec","_sacPathRec",0);
	 SWIG_RegisterMapping("_struct__ib_path_rec","__ib_path_rec",0);
	 SWIG_RegisterMapping("_struct__ib_ca_cong_log","_ccCACongestionLog",0);
	 SWIG_RegisterMapping("_struct__ib_ca_cong_log","__ib_ca_cong_log",0);
	 SWIG_RegisterMapping("__ib_cong_key_info","_ccCongestionKeyInfo",0);
	 SWIG_RegisterMapping("__ib_cong_key_info","_struct__ib_cong_key_info",0);
	 SWIG_RegisterMapping("__ib_ca_cong_log","_ccCACongestionLog",0);
	 SWIG_RegisterMapping("__ib_ca_cong_log","_struct__ib_ca_cong_log",0);
	 SWIG_RegisterMapping("_struct__ibsac_class_port_info","_sacClassPortInfo",0);
	 SWIG_RegisterMapping("_struct__ibsac_class_port_info","__ibsac_class_port_info",0);
	 SWIG_RegisterMapping("_struct__ibsm_node_desc","_smNodeDesc",0);
	 SWIG_RegisterMapping("_struct__ibsm_node_desc","__ibsm_node_desc",0);
	 SWIG_RegisterMapping("_struct__ib_sw_port_cong_setting_element","_ib_sw_port_cong_setting_element_t",0);
	 SWIG_RegisterMapping("_struct__ib_sw_port_cong_setting_element","__ib_sw_port_cong_setting_element",0);
	 SWIG_RegisterMapping("_sacSmInfo","_struct__ib_sm_info",0);
	 SWIG_RegisterMapping("_sacSmInfo","__ib_sm_info",0);
	 SWIG_RegisterMapping("__ibsm_node_desc","_smNodeDesc",0);
	 SWIG_RegisterMapping("__ibsm_node_desc","_struct__ibsm_node_desc",0);
	 SWIG_RegisterMapping("__ibsac_class_port_info","_sacClassPortInfo",0);
	 SWIG_RegisterMapping("__ibsac_class_port_info","_struct__ibsac_class_port_info",0);
	 SWIG_RegisterMapping("_struct__ib_guidinfo_record","_sacGuidRec",0);
	 SWIG_RegisterMapping("_struct__ib_guidinfo_record","__ib_guidinfo_record",0);
	 SWIG_RegisterMapping("__ib_cong_log_event_sw","_ib_cong_log_event_sw_t",0);
	 SWIG_RegisterMapping("__ib_cong_log_event_sw","_struct__ib_cong_log_event_sw",0);
	 SWIG_RegisterMapping("_ccCongestionKeyInfo","_struct__ib_cong_key_info",0);
	 SWIG_RegisterMapping("_ccCongestionKeyInfo","__ib_cong_key_info",0);
	 SWIG_RegisterMapping("__ib_path_rec","_sacPathRec",0);
	 SWIG_RegisterMapping("__ib_path_rec","_struct__ib_path_rec",0);
	 SWIG_RegisterMapping("_struct__ib_ca_cong_setting","_ccCACongestionSetting",0);
	 SWIG_RegisterMapping("_struct__ib_ca_cong_setting","__ib_ca_cong_setting",0);
	 SWIG_RegisterMapping("__ib_cong_info","_ccCongestionInfo",0);
	 SWIG_RegisterMapping("__ib_cong_info","_struct__ib_cong_info",0);
	 SWIG_RegisterMapping("__ib_slvl_table","_sacSlVlTbl",0);
	 SWIG_RegisterMapping("__ib_slvl_table","_struct__ib_slvl_table",0);
	 SWIG_RegisterMapping("_struct__ib_guid_info","_sacGuidInfo",0);
	 SWIG_RegisterMapping("_struct__ib_guid_info","__ib_guid_info",0);
	 SWIG_RegisterMapping("_unsigned_long","_long",0);
	 SWIG_RegisterMapping("_smPkeyTable","_struct__ibsm_pkey_table",0);
	 SWIG_RegisterMapping("_smPkeyTable","__ibsm_pkey_table",0);
	 SWIG_RegisterMapping("_struct__ib_lft_record","_sacLFTRec",0);
	 SWIG_RegisterMapping("_struct__ib_lft_record","__ib_lft_record",0);
	 SWIG_RegisterMapping("_struct__ibcc_tbl_entry","_ib_cc_tbl_entry_t",0);
	 SWIG_RegisterMapping("_struct__ibcc_tbl_entry","__ibcc_tbl_entry",0);
	 SWIG_RegisterMapping("_sacPathRec","_struct__ib_path_rec",0);
	 SWIG_RegisterMapping("_sacPathRec","__ib_path_rec",0);
	 SWIG_RegisterMapping("_struct__ib_cong_log_event_sw","_ib_cong_log_event_sw_t",0);
	 SWIG_RegisterMapping("_struct__ib_cong_log_event_sw","__ib_cong_log_event_sw",0);
	 SWIG_RegisterMapping("__ibcc_tbl_entry","_ib_cc_tbl_entry_t",0);
	 SWIG_RegisterMapping("__ibcc_tbl_entry","_struct__ibcc_tbl_entry",0);
	 SWIG_RegisterMapping("_smPortInfo","_struct__ibsm_port_info",0);
	 SWIG_RegisterMapping("_smPortInfo","__ibsm_port_info",0);
	 SWIG_RegisterMapping("_smNodeInfo","_struct__ibsm_node_info",0);
	 SWIG_RegisterMapping("_smNodeInfo","__ibsm_node_info",0);
	 SWIG_RegisterMapping("__ib_pkey_table","_sacPKeyTbl",0);
	 SWIG_RegisterMapping("__ib_pkey_table","_struct__ib_pkey_table",0);
	 SWIG_RegisterMapping("__ib_guidinfo_record","_sacGuidRec",0);
	 SWIG_RegisterMapping("__ib_guidinfo_record","_struct__ib_guidinfo_record",0);
	 SWIG_RegisterMapping("_signed_int","_int",0);
	 SWIG_RegisterMapping("_struct__ibsm_guid_info","_smGuidInfo",0);
	 SWIG_RegisterMapping("_struct__ibsm_guid_info","__ibsm_guid_info",0);
	 SWIG_RegisterMapping("_ccSWCongestionLog","_struct__ib_sw_cong_log",0);
	 SWIG_RegisterMapping("_ccSWCongestionLog","__ib_sw_cong_log",0);
	 SWIG_RegisterMapping("__ibsm_guid_info","_smGuidInfo",0);
	 SWIG_RegisterMapping("__ibsm_guid_info","_struct__ibsm_guid_info",0);
	 SWIG_RegisterMapping("_struct__ib_node_record_t","_sacNodeRec",0);
	 SWIG_RegisterMapping("_struct__ib_node_record_t","__ib_node_record_t",0);
	 SWIG_RegisterMapping("__ib_slvl_table_record","_sacSlVlRec",0);
	 SWIG_RegisterMapping("__ib_slvl_table_record","_struct__ib_slvl_table_record",0);
	 SWIG_RegisterMapping("_ccClassPortInfo","_struct__ibcc_class_port_info",0);
	 SWIG_RegisterMapping("_ccClassPortInfo","__ibcc_class_port_info",0);
	 SWIG_RegisterMapping("_ccCACongestionSetting","_struct__ib_ca_cong_setting",0);
	 SWIG_RegisterMapping("_ccCACongestionSetting","__ib_ca_cong_setting",0);
	 SWIG_RegisterMapping("_sacInformInfo","_struct__ibsac_inform_info",0);
	 SWIG_RegisterMapping("_sacInformInfo","__ibsac_inform_info",0);
	 SWIG_RegisterMapping("_struct__ibsm_switch_info","_smSwInfo",0);
	 SWIG_RegisterMapping("_struct__ibsm_switch_info","__ibsm_switch_info",0);
	 SWIG_RegisterMapping("__ib_ca_cong_setting","_ccCACongestionSetting",0);
	 SWIG_RegisterMapping("__ib_ca_cong_setting","_struct__ib_ca_cong_setting",0);
	 SWIG_RegisterMapping("_unsigned_short","_short",0);
	 SWIG_RegisterMapping("_smSwInfo","_struct__ibsm_switch_info",0);
	 SWIG_RegisterMapping("_smSwInfo","__ibsm_switch_info",0);
	 SWIG_RegisterMapping("_struct__ib_service_record","_sacServiceRec",0);
	 SWIG_RegisterMapping("_struct__ib_service_record","__ib_service_record",0);
	 SWIG_RegisterMapping("_struct__ibsm_notice","_smNotice",0);
	 SWIG_RegisterMapping("_struct__ibsm_notice","__ibsm_notice",0);
	 SWIG_RegisterMapping("_struct__ibsm_slvl_table","_smSlVlTable",0);
	 SWIG_RegisterMapping("_struct__ibsm_slvl_table","__ibsm_slvl_table",0);
	 SWIG_RegisterMapping("__ibsm_sm_info","_smSMInfo",0);
	 SWIG_RegisterMapping("__ibsm_sm_info","_struct__ibsm_sm_info",0);
	 SWIG_RegisterMapping("_smNodeDesc","_struct__ibsm_node_desc",0);
	 SWIG_RegisterMapping("_smNodeDesc","__ibsm_node_desc",0);
	 SWIG_RegisterMapping("_signed_short","_short",0);
	 SWIG_RegisterMapping("_struct__ib_slvl_table_record","_sacSlVlRec",0);
	 SWIG_RegisterMapping("_struct__ib_slvl_table_record","__ib_slvl_table_record",0);
	 SWIG_RegisterMapping("_smGuidInfo","_struct__ibsm_guid_info",0);
	 SWIG_RegisterMapping("_smGuidInfo","__ibsm_guid_info",0);
	 SWIG_RegisterMapping("__ib_pkey_table_record","_sacPKeyRec",0);
	 SWIG_RegisterMapping("__ib_pkey_table_record","_struct__ib_pkey_table_record",0);
	 SWIG_RegisterMapping("__ib_sminfo_record","_sacSmRec",0);
	 SWIG_RegisterMapping("__ib_sminfo_record","_struct__ib_sminfo_record",0);
	 SWIG_RegisterMapping("__ib_ca_cong_entry","_ib_ca_cong_entry_t",0);
	 SWIG_RegisterMapping("__ib_ca_cong_entry","_struct__ib_ca_cong_entry",0);
	 SWIG_RegisterMapping("_sacPortRec","_struct__ib_portinfo_record",0);
	 SWIG_RegisterMapping("_sacPortRec","__ib_portinfo_record",0);
	 SWIG_RegisterMapping("_struct__ibsm_pkey_table","_smPkeyTable",0);
	 SWIG_RegisterMapping("_struct__ibsm_pkey_table","__ibsm_pkey_table",0);
	 SWIG_RegisterMapping("__ibsm_notice","_smNotice",0);
	 SWIG_RegisterMapping("__ibsm_notice","_struct__ibsm_notice",0);
	 SWIG_RegisterMapping("_struct__ib_cong_key_info","_ccCongestionKeyInfo",0);
	 SWIG_RegisterMapping("_struct__ib_cong_key_info","__ib_cong_key_info",0);
	 SWIG_RegisterMapping("_unsigned_int","_int",0);
	 SWIG_RegisterMapping("_sacGuidRec","_struct__ib_guidinfo_record",0);
	 SWIG_RegisterMapping("_sacGuidRec","__ib_guidinfo_record",0);
	 SWIG_RegisterMapping("__ibsm_slvl_table","_smSlVlTable",0);
	 SWIG_RegisterMapping("__ibsm_slvl_table","_struct__ibsm_slvl_table",0);
	 SWIG_RegisterMapping("_short","_unsigned_short",0);
	 SWIG_RegisterMapping("_short","_signed_short",0);
	 SWIG_RegisterMapping("__ib_port_info","_sacPortInfo",0);
	 SWIG_RegisterMapping("__ib_port_info","_struct__ib_port_info",0);
	 SWIG_RegisterMapping("_ccCongestionInfo","_struct__ib_cong_info",0);
	 SWIG_RegisterMapping("_ccCongestionInfo","__ib_cong_info",0);
	 SWIG_RegisterMapping("_sacSmRec","_struct__ib_sminfo_record",0);
	 SWIG_RegisterMapping("_sacSmRec","__ib_sminfo_record",0);
	 SWIG_RegisterMapping("__ib_service_record","_sacServiceRec",0);
	 SWIG_RegisterMapping("__ib_service_record","_struct__ib_service_record",0);
	 SWIG_RegisterMapping("_sacSwInfo","_struct__ib_switch_info",0);
	 SWIG_RegisterMapping("_sacSwInfo","__ib_switch_info",0);
	 SWIG_RegisterMapping("_struct__ibsac_inform_info","_sacInformInfo",0);
	 SWIG_RegisterMapping("_struct__ibsac_inform_info","__ibsac_inform_info",0);
	 SWIG_RegisterMapping("_struct__ib_vl_arb_table_record","_sacVlArbRec",0);
	 SWIG_RegisterMapping("_struct__ib_vl_arb_table_record","__ib_vl_arb_table_record",0);
	 SWIG_RegisterMapping("_ccSWPortCongestionSetting","_struct__ib_sw_port_cong_setting",0);
	 SWIG_RegisterMapping("_ccSWPortCongestionSetting","__ib_sw_port_cong_setting",0);
	 SWIG_RegisterMapping("__ib_time_stamp","_ccTimeStamp",0);
	 SWIG_RegisterMapping("__ib_time_stamp","_struct__ib_time_stamp",0);
	 SWIG_RegisterMapping("_sacMCMRec","_struct__ib_member_rec",0);
	 SWIG_RegisterMapping("_sacMCMRec","__ib_member_rec",0);
	 SWIG_RegisterMapping("_struct__ibis_opt","_ibis_opt_t",0);
	 SWIG_RegisterMapping("_struct__ibis_opt","__ibis_opt",0);
	 SWIG_RegisterMapping("__ib_sm_info","_sacSmInfo",0);
	 SWIG_RegisterMapping("__ib_sm_info","_struct__ib_sm_info",0);
	 SWIG_RegisterMapping("__ibsm_pkey_table","_smPkeyTable",0);
	 SWIG_RegisterMapping("__ibsm_pkey_table","_struct__ibsm_pkey_table",0);
	 SWIG_RegisterMapping("_int","_unsigned_int",0);
	 SWIG_RegisterMapping("_int","_signed_int",0);
	 SWIG_RegisterMapping("_ib_ca_cong_entry_t","_struct__ib_ca_cong_entry",0);
	 SWIG_RegisterMapping("_ib_ca_cong_entry_t","__ib_ca_cong_entry",0);
	 SWIG_RegisterMapping("_struct__ib_pkey_table_record","_sacPKeyRec",0);
	 SWIG_RegisterMapping("_struct__ib_pkey_table_record","__ib_pkey_table_record",0);
	 SWIG_RegisterMapping("__ib_node_info","_sacNodeInfo",0);
	 SWIG_RegisterMapping("__ib_node_info","_struct__ib_node_info",0);
	 SWIG_RegisterMapping("_ccCACongestionLog","_struct__ib_ca_cong_log",0);
	 SWIG_RegisterMapping("_ccCACongestionLog","__ib_ca_cong_log",0);
	 SWIG_RegisterMapping("_sacLFTRec","_struct__ib_lft_record",0);
	 SWIG_RegisterMapping("_sacLFTRec","__ib_lft_record",0);
	 SWIG_RegisterMapping("_struct__ib_member_rec","_sacMCMRec",0);
	 SWIG_RegisterMapping("_struct__ib_member_rec","__ib_member_rec",0);
	 SWIG_RegisterMapping("__ib_cc_tbl","_ccTable",0);
	 SWIG_RegisterMapping("__ib_cc_tbl","_struct__ib_cc_tbl",0);
	 SWIG_RegisterMapping("_struct__ib_cong_info","_ccCongestionInfo",0);
	 SWIG_RegisterMapping("_struct__ib_cong_info","__ib_cong_info",0);
	 SWIG_RegisterMapping("__ibsac_inform_info","_sacInformInfo",0);
	 SWIG_RegisterMapping("__ibsac_inform_info","_struct__ibsac_inform_info",0);
	 SWIG_RegisterMapping("_ccTable","_struct__ib_cc_tbl",0);
	 SWIG_RegisterMapping("_ccTable","__ib_cc_tbl",0);
	 SWIG_RegisterMapping("_struct__ib_switch_info_record","_sacSwRec",0);
	 SWIG_RegisterMapping("_struct__ib_switch_info_record","__ib_switch_info_record",0);
	 SWIG_RegisterMapping("_sacVlArbRec","_struct__ib_vl_arb_table_record",0);
	 SWIG_RegisterMapping("_sacVlArbRec","__ib_vl_arb_table_record",0);
	 SWIG_RegisterMapping("_smSlVlTable","_struct__ibsm_slvl_table",0);
	 SWIG_RegisterMapping("_smSlVlTable","__ibsm_slvl_table",0);
	 SWIG_RegisterMapping("__ib_switch_info_record","_sacSwRec",0);
	 SWIG_RegisterMapping("__ib_switch_info_record","_struct__ib_switch_info_record",0);
	 SWIG_RegisterMapping("__ib_vl_arb_table_record","_sacVlArbRec",0);
	 SWIG_RegisterMapping("__ib_vl_arb_table_record","_struct__ib_vl_arb_table_record",0);
	 SWIG_RegisterMapping("__ib_sw_port_cong_setting_element","_ib_sw_port_cong_setting_element_t",0);
	 SWIG_RegisterMapping("__ib_sw_port_cong_setting_element","_struct__ib_sw_port_cong_setting_element",0);
	 SWIG_RegisterMapping("_struct__ib_sw_port_cong_setting","_ccSWPortCongestionSetting",0);
	 SWIG_RegisterMapping("_struct__ib_sw_port_cong_setting","__ib_sw_port_cong_setting",0);
	 SWIG_RegisterMapping("__ib_lft_record","_sacLFTRec",0);
	 SWIG_RegisterMapping("__ib_lft_record","_struct__ib_lft_record",0);
	 SWIG_RegisterMapping("_smSMInfo","_struct__ibsm_sm_info",0);
	 SWIG_RegisterMapping("_smSMInfo","__ibsm_sm_info",0);
	 SWIG_RegisterMapping("_sacSlVlRec","_struct__ib_slvl_table_record",0);
	 SWIG_RegisterMapping("_sacSlVlRec","__ib_slvl_table_record",0);
	 SWIG_RegisterMapping("_smLftBlock","_struct__ibsm_lft_block",0);
	 SWIG_RegisterMapping("_smLftBlock","__ibsm_lft_block",0);
	 SWIG_RegisterMapping("_smMftBlock","_struct__ibsm_mft_block",0);
	 SWIG_RegisterMapping("_smMftBlock","__ibsm_mft_block",0);
	 SWIG_RegisterMapping("_sacSwRec","_struct__ib_switch_info_record",0);
	 SWIG_RegisterMapping("_sacSwRec","__ib_switch_info_record",0);
	 SWIG_RegisterMapping("_struct__ib_cc_tbl","_ccTable",0);
	 SWIG_RegisterMapping("_struct__ib_cc_tbl","__ib_cc_tbl",0);
	 SWIG_RegisterMapping("_struct__ib_link_record","_sacLinkRec",0);
	 SWIG_RegisterMapping("_struct__ib_link_record","__ib_link_record",0);
	 SWIG_RegisterMapping("_struct__ibsm_lft_block","_smLftBlock",0);
	 SWIG_RegisterMapping("_struct__ibsm_lft_block","__ibsm_lft_block",0);
	 SWIG_RegisterMapping("_ccNotice","_struct__ibcc_notice",0);
	 SWIG_RegisterMapping("_ccNotice","__ibcc_notice",0);
	 SWIG_RegisterMapping("_ib_sw_port_cong_setting_element_t","_struct__ib_sw_port_cong_setting_element",0);
	 SWIG_RegisterMapping("_ib_sw_port_cong_setting_element_t","__ib_sw_port_cong_setting_element",0);
	 SWIG_RegisterMapping("_struct__ib_sminfo_record","_sacSmRec",0);
	 SWIG_RegisterMapping("_struct__ib_sminfo_record","__ib_sminfo_record",0);
	 SWIG_RegisterMapping("__ib_link_record","_sacLinkRec",0);
	 SWIG_RegisterMapping("__ib_link_record","_struct__ib_link_record",0);
	 SWIG_RegisterMapping("__ibsm_lft_block","_smLftBlock",0);
	 SWIG_RegisterMapping("__ibsm_lft_block","_struct__ibsm_lft_block",0);
	 SWIG_RegisterMapping("__ib_cong_log_event_ca","_ib_cong_log_event_ca_t",0);
	 SWIG_RegisterMapping("__ib_cong_log_event_ca","_struct__ib_cong_log_event_ca",0);
	 SWIG_RegisterMapping("_struct__ib_ca_cong_entry","_ib_ca_cong_entry_t",0);
	 SWIG_RegisterMapping("_struct__ib_ca_cong_entry","__ib_ca_cong_entry",0);
	 SWIG_RegisterMapping("_sacPKeyRec","_struct__ib_pkey_table_record",0);
	 SWIG_RegisterMapping("_sacPKeyRec","__ib_pkey_table_record",0);
	 SWIG_RegisterMapping("_struct__ib_slvl_table","_sacSlVlTbl",0);
	 SWIG_RegisterMapping("_struct__ib_slvl_table","__ib_slvl_table",0);
	 
   if (Tcl_PkgRequire(interp,"tclreadline",0,0) != NULL) {
     Tcl_Eval(interp,
				  "if {$tcl_interactive} {namespace eval tclreadline {proc prompt1 {} {return \"ibis >\"} }; ::tclreadline::Loop ibis.log }"
     );
   }
return TCL_OK;
}
