.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IBDMSH 1"
.TH IBDMSH 1 "2009-03-16" "IBDM 1.0" "IB DATA MODEL PACKAGE"
.SH "NAME"
\&\fBibdmsh\fR IB DATA MODEL \- Extentended TCL shell
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBibdmsh\fR is a \s-1TCL\s0 shell extended with interface for the \s-1IB\s0 data model.
To use this shell you will write \s-1TCL\s0 code that directly access the \s-1IB\s0 data model objects and functions.
.PP
The following sub sections provide detailed definition for those objects and \s-1API\s0.
.SH "IBDM Constants"
.IX Header "IBDM Constants"
.Sh "Node Types"
.IX Subsection "Node Types"
The following constants are used by the node object type field
.Sp
.RS 4
[ Constant : int  ] \f(CW$IB_UNKNOWN_NODE_TYPE\fR = \s-1IB_UNKNOWN_NODE_TYPE\s0
.Sp
[ Constant : int  ] \f(CW$IB_SW_NODE\fR = \s-1IB_SW_NODE\s0
.Sp
[ Constant : int  ] \f(CW$IB_CA_NODE\fR = \s-1IB_CA_NODE\s0
.RE
.Sh "Log Verbosity Flags"
.IX Subsection "Log Verbosity Flags"
The following constants are used as argument bits for the global variable \f(CW$FabricUtilsVerboseLevel\fR
.Sp
.RS 4
[ Constant : int  ] \f(CW$FABU_LOG_NONE\fR = 0x0
.Sp
[ Constant : int  ] \f(CW$FABU_LOG_ERROR\fR = 0x1
.Sp
[ Constant : int  ] \f(CW$FABU_LOG_INFO\fR = 0x2
.Sp
[ Constant : int  ]  \f(CW$FABU_LOG_VERBOSE\fR = 0x4
.RE
.SH "IBDM Globals"
.IX Header "IBDM Globals"
Log level: set to FABU_LOG* values
.Sp
.RS 4
[ Global : int ] \f(CW$FabricUtilsVerboseLevel\fR
.RE
.SH "IBDM Objects"
.IX Header "IBDM Objects"
This section decribes the various object types exposed by \s-1IBDM\s0.
.PP
\&\s-1IBDM\s0 exposes some of its internal objects. The objects identifiers returned by the various function calls are formatted according to the following rules:
.PP
Fabric: fabric:<idx>
.PP
System: system:<fab idx>:<sys name>
.PP
SysPort: sysport:<fab idx>:<sys name>:<port name>
.PP
Node: node:<fab idx>:<node name>
.PP
Port: port:<fab idx>:<node name>/<port num>
.PP
\&\s-1IBDM\s0 Objects are standard Swig-Tcl objects. As such they have two flavors for their usage: Variables, Objects.
.PP
\&\fBVariables/Pointers:\fR
   For each object attribute a \*(L"get\*(R" and \*(L"set\*(R" methods are provided.
   The format of the methods is: <class>_<attribute>_<get|set>.
   The \*(L"set\*(R" method is only available for read/write attributes.
.PP
.Vb 4
\&   Example:
\&   set nodes [ibdm_get_nodes]
\&   set node  [lindex $nodes 0]
\&   IBNode_numPorts_get $node
.Ve
.PP
\&\fBObjects:\fR
   Given an object pointer one can convert it to a Tcl \*(L"Object\*(R"
   using the following command:
   <class> <obj_name> \-this <obj pointer>
.PP
.Vb 2
\&   Once declared the <obj-name> can be used in conjunction to
\&   with the standard "configure" and "cget" commands.
.Ve
.PP
.Vb 3
\&   Example (following the previous one):
\&   IBFabric VaTech -this $fabric
\&   VaTech cget -NodeByName
.Ve
.PP
.Vb 5
\&   To delete an object symbol (and enable its mapping to another
\&   pointer) use:
\&   rename <obj name> ""
\&   for example:
\&   rename VaTech ""
.Ve
.Sh "class IBPort"
.IX Subsection "class IBPort"
The following are the different fields and methods of the \s-1IB\s0 Port class which describes an \s-1IB\s0 device (chip) physical port.
.RE
.IP "[ Member data: returns IBPort * ] \-p_remotePort"
.IX Item "[ Member data: returns IBPort * ] -p_remotePort"
Port connected on the other side of link
.RE
.IP "[ Member data: returns IBSysPort * ] \-p_sysPort"
.IX Item "[ Member data: returns IBSysPort * ] -p_sysPort"
The system port (if any) connected to
.RE
.IP "[ Member data: returns IBNode * ] \-p_node"
.IX Item "[ Member data: returns IBNode * ] -p_node"
The node the port is part of.
.RE
.IP "[ Member data: returns int ] \-num"
.IX Item "[ Member data: returns int ] -num"
Physical ports are identified by number.
.RE
.IP "[ Member data: returns unsigned int  ] \-base_lid"
.IX Item "[ Member data: returns unsigned int  ] -base_lid"
The base lid assigned to the port.
.RE
.IP "[ Member data: returns IBLinkWidth * ] \-width"
.IX Item "[ Member data: returns IBLinkWidth * ] -width"
The link width of the port
.RE
.IP "[ Member data: returns IBLinkSpeed * ] \-speed"
.IX Item "[ Member data: returns IBLinkSpeed * ] -speed"
The link speed of the port
.RE
.IP "[ Member data: returns unsigned int  ] \-counter1"
.IX Item "[ Member data: returns unsigned int  ] -counter1"
A generic value to be used by various algorithms
.RE
.IP "[ Constructor: returns IBPort * ] IBPort name p_nodePtr number"
.IX Item "[ Constructor: returns IBPort * ] IBPort name p_nodePtr number"
IBPort constructor
.RE
.IP "[ Member : returns new_uint64_t  ] guid_get"
.IX Item "[ Member : returns new_uint64_t  ] guid_get"
Obtain the guid of the port
.RE
.IP "[ Member : returns void  ] guid_set guid"
.IX Item "[ Member : returns void  ] guid_set guid"
Modify the guid of the port
.RE
.IP "[ Member : returns new_string  ] getName"
.IX Item "[ Member : returns new_string  ] getName"
Get the port name: A device port connected to system port (front pannel) returns the front pannel port name.
.RE
.IP "[ Member : returns void  ] connect p_otherPort ?width? ?speed?"
.IX Item "[ Member : returns void  ] connect p_otherPort ?width? ?speed?"
Connect the port to another node port with optional width and speed parameters
.RE
.IP "[ Member : returns int  ] disconnect"
.IX Item "[ Member : returns int  ] disconnect"
Disconnect the port. Return 0 if successful
.Sh "class IBNode"
.IX Subsection "class IBNode"
The \s-1IB\s0 Node class represents a single \s-1IB\s0 Device (chip)
.RE
.IP "[ Member data: returns string * ] \-name"
.IX Item "[ Member data: returns string * ] -name"
Name of the node (instance name of the chip)
.RE
.IP "[ Member data: returns IBNodeType  ] \-type"
.IX Item "[ Member data: returns IBNodeType  ] -type"
Either a \f(CW$IB_SW_NODE\fR or \f(CW$IB_CA_NODE\fR
.RE
.IP "[ Member data: returns uint16_t * ] \-devId"
.IX Item "[ Member data: returns uint16_t * ] -devId"
The device \s-1ID\s0 of the node
.RE
.IP "[ Member data: returns uint16_t * ] \-revId"
.IX Item "[ Member data: returns uint16_t * ] -revId"
The device revision Id.
.RE
.IP "[ Member data: returns uint16_t * ] \-vendId"
.IX Item "[ Member data: returns uint16_t * ] -vendId"
The device Vendor \s-1ID\s0.
.RE
.IP "[ Member data: returns string * ] \-attributes"
.IX Item "[ Member data: returns string * ] -attributes"
Comma-sep string of arbitrary attributes k=v
.RE
.IP "[ Member data: returns uint8_t ] \-rank"
.IX Item "[ Member data: returns uint8_t ] -rank"
The rank of the node (0 is a root)
.RE
.IP "[ Member data: returns IBSystem * ] \-p_system"
.IX Item "[ Member data: returns IBSystem * ] -p_system"
What system we belong to
.RE
.IP "[ Member data: returns IBFabric * ] \-p_fabric"
.IX Item "[ Member data: returns IBFabric * ] -p_fabric"
What fabric we belong to.
.RE
.IP "[ Member data: returns unsigned int  ] \-numPorts"
.IX Item "[ Member data: returns unsigned int  ] -numPorts"
Number of physical ports
.RE
.IP "[ Member data: returns vec_pport * ] \-Ports"
.IX Item "[ Member data: returns vec_pport * ] -Ports"
Vector of all the ports
.RE
.IP "[ Member data: returns vec_vec_byte * ] \-MinHopsTable"
.IX Item "[ Member data: returns vec_vec_byte * ] -MinHopsTable"
A table of the number of hops required to get from each port to each target \s-1LID\s0
.RE
.IP "[ Member data: returns vec_byte * ] \-LFT"
.IX Item "[ Member data: returns vec_byte * ] -LFT"
The \s-1LFT\s0 of this node (for switches only) which is a long vector of target ports \- index is the \s-1LID\s0
.RE
.IP "[ Member : returns new_uint64_t  ] guid_get"
.IX Item "[ Member : returns new_uint64_t  ] guid_get"
Obtain the node \s-1GUID\s0
.RE
.IP "[ Member : returns void  ] guid_set guid"
.IX Item "[ Member : returns void  ] guid_set guid"
Set the node \s-1GUID\s0
.RE
.IP "[ Constructor: returns IBNode * ] IBNode name n p_fab p_sys t np"
.IX Item "[ Constructor: returns IBNode * ] IBNode name n p_fab p_sys t np"
Constractor
.RE
.IP "[ Member : returns IBPort * ] makePort num"
.IX Item "[ Member : returns IBPort * ] makePort num"
Create a new port by its number (if required) return the port pointer
.RE
.IP "[ Member : returns IBPort * ] getPort num"
.IX Item "[ Member : returns IBPort * ] getPort num"
Get a port by number num = 1..N:
.RE
.IP "[ Member : returns void  ] setHops p_port lid hops"
.IX Item "[ Member : returns void  ] setHops p_port lid hops"
Set the min hop for the given port (* is all) lid pair
.RE
.IP "[ Member : returns int  ] getHops p_port lid"
.IX Item "[ Member : returns int  ] getHops p_port lid"
Get the min number of hops defined for the given port or all
.RE
.IP "[ Member : returns IBPort * ] getFirstMinHopPort lid"
.IX Item "[ Member : returns IBPort * ] getFirstMinHopPort lid"
Scan the node ports and find the first port with min hop to the lid
.RE
.IP "[ Member : returns void  ] setLFTPortForLid lid portNum"
.IX Item "[ Member : returns void  ] setLFTPortForLid lid portNum"
Set the Linear Forwarding Table for the given \s-1LID\s0
.RE
.IP "[ Member : returns int  ] getLFTPortForLid lid"
.IX Item "[ Member : returns int  ] getLFTPortForLid lid"
Get the \s-1LFT\s0 for a given \s-1LID\s0
.RE
.IP "[ Member : returns void  ] repHopTable"
.IX Item "[ Member : returns void  ] repHopTable"
Dump out the min hop table of the node
.Sh "class IBSysPort"
.IX Subsection "class IBSysPort"
The IBSysPort class represents an \s-1IB\s0 plug on the system front or back pannels
.RE
.IP "[ Member data: returns string * ] \-name"
.IX Item "[ Member data: returns string * ] -name"
The front pannel name (silk) of the port
.RE
.IP "[ Member data: returns IBSysPort * ] \-p_remoteSysPort"
.IX Item "[ Member data: returns IBSysPort * ] -p_remoteSysPort"
If connected the other side sys port
.RE
.IP "[ Member data: returns IBSystem * ] \-p_system"
.IX Item "[ Member data: returns IBSystem * ] -p_system"
System it benongs to
.RE
.IP "[ Member data: returns IBPort * ] \-p_nodePort"
.IX Item "[ Member data: returns IBPort * ] -p_nodePort"
The node port it connects to.
.RE
.IP "[ Constructor: returns IBSysPort * ] IBSysPort name n p_sys"
.IX Item "[ Constructor: returns IBSysPort * ] IBSysPort name n p_sys"
Constructor
.RE
.IP "[ Member : returns void  ] connect p_otherSysPort ?width? ?speed?"
.IX Item "[ Member : returns void  ] connect p_otherSysPort ?width? ?speed?"
Connect two SysPorts
.RE
.IP "[ Member : returns int  ] disconnect"
.IX Item "[ Member : returns int  ] disconnect"
Disconnect the SysPort (and ports). Return 0 if successful
.Sh "class IBSystem"
.IX Subsection "class IBSystem"
The IBSystem class represents an entire chassis
.RE
.IP "[ Member data: returns string * ] \-name"
.IX Item "[ Member data: returns string * ] -name"
The \*(L"host\*(R" name of the system
.RE
.IP "[ Member data: returns string * ] \-type"
.IX Item "[ Member data: returns string * ] -type"
What is the type i.e. Cougar, Buffalo, \s-1MTS2400\s0, etc. A corresponding \s-1IBNL\s0 file should exist \- defining this system type
.RE
.IP "[ Member data: returns IBFabric * ] \-p_fabric"
.IX Item "[ Member data: returns IBFabric * ] -p_fabric"
Fabric the system belongs to
.RE
.IP "[ Member data: returns map_str_pnode * ] \-NodeByName"
.IX Item "[ Member data: returns map_str_pnode * ] -NodeByName"
Provide the node pointer by its name
.RE
.IP "[ Member data: returns map_str_psysport * ] \-PortByName"
.IX Item "[ Member data: returns map_str_psysport * ] -PortByName"
A map provising pointer to the SysPort by name
.RE
.IP "[ Constructor: returns IBSystem * ] IBSystem name n p_fab t"
.IX Item "[ Constructor: returns IBSystem * ] IBSystem name n p_fab t"
Constractor
.RE
.IP "[ Member : returns new_uint64_t  ] guid_get"
.IX Item "[ Member : returns new_uint64_t  ] guid_get"
Obtain the system image \s-1GUID\s0
.RE
.IP "[ Member : returns void  ] guid_set guid"
.IX Item "[ Member : returns void  ] guid_set guid"
Set the system image \s-1GUID\s0
.RE
.IP "[ Member : returns IBSysPort * ] makeSysPort pName"
.IX Item "[ Member : returns IBSysPort * ] makeSysPort pName"
Make sure we got the port defined (so define it if not)
.RE
.IP "[ Member : returns IBPort * ] getSysPortNodePortByName sysPortName"
.IX Item "[ Member : returns IBPort * ] getSysPortNodePortByName sysPortName"
Get the node port for the given sys port by name
.RE
.IP "[ Member : returns IBSysPort * ] getSysPort name"
.IX Item "[ Member : returns IBSysPort * ] getSysPort name"
Get a Sys Port by name
.Sh "class IBFabric"
.IX Subsection "class IBFabric"
Represents an entire \s-1IB\s0 subnet made of systems
.RE
.IP "[ Member data: returns map_str_pnode * ] \-NodeByName"
.IX Item "[ Member data: returns map_str_pnode * ] -NodeByName"
Provide a list of node name and pointer pairs
.RE
.IP "[ Member data: returns map_str_psys * ] \-SystemByName"
.IX Item "[ Member data: returns map_str_psys * ] -SystemByName"
Provide a list of system name and pointer pairs
.RE
.IP "[ Member data: returns vec_pport * ] \-PortByLid"
.IX Item "[ Member data: returns vec_pport * ] -PortByLid"
Provides a list of system port name and pointer pairs
.RE
.IP "[ Member data: returns map_guid_pnode * ] \-NodeByGuid"
.IX Item "[ Member data: returns map_guid_pnode * ] -NodeByGuid"
Provides a list of node guid and node pointer pairs
.RE
.IP "[ Member data: returns map_guid_psys * ] \-SystemByGuid"
.IX Item "[ Member data: returns map_guid_psys * ] -SystemByGuid"
Provides a list of system image guid and system pointer pairs
.RE
.IP "[ Member data: returns map_guid_pport * ] \-PortByGuid"
.IX Item "[ Member data: returns map_guid_pport * ] -PortByGuid"
Provides a list of port guid and port pointer pairs
.RE
.IP "[ Member data: returns unsigned int  ] \-minLid"
.IX Item "[ Member data: returns unsigned int  ] -minLid"
Track min lid used.
.RE
.IP "[ Member data: returns unsigned int  ] \-maxLid"
.IX Item "[ Member data: returns unsigned int  ] -maxLid"
Track max lid used.
.RE
.IP "[ Member data: returns unsigned int  ] \-lmc"
.IX Item "[ Member data: returns unsigned int  ] -lmc"
\&\s-1LMC\s0 value used
.RE
.IP "[ Member : returns IBNode * ] makeNode n p_sys type numPorts"
.IX Item "[ Member : returns IBNode * ] makeNode n p_sys type numPorts"
Get the node by its name (create one of does not exist)
.RE
.IP "[ Member : returns IBNode * ] getNode name"
.IX Item "[ Member : returns IBNode * ] getNode name"
Get the node by its name
.RE
.IP "[ Member : returns list_pnode * ] getNodesByType type"
.IX Item "[ Member : returns list_pnode * ] getNodesByType type"
Return the list of node pointers matching the required type
.RE
.IP "[ Member : returns IBSystem * ] makeGenericSystem name"
.IX Item "[ Member : returns IBSystem * ] makeGenericSystem name"
Create a new generic system \- basically an empty container for nodes...
.RE
.IP "[ Member : returns IBSystem * ] makeSystem name type"
.IX Item "[ Member : returns IBSystem * ] makeSystem name type"
Create a new system \- the type must have a registed factory.
.RE
.IP "[ Member : returns IBSystem * ] getSystem name"
.IX Item "[ Member : returns IBSystem * ] getSystem name"
Get system by name
.RE
.IP "[ Member : returns IBSystem * ] getSystemByGuid guid"
.IX Item "[ Member : returns IBSystem * ] getSystemByGuid guid"
get the system by its guid
.RE
.IP "[ Member : returns IBNode * ] getNodeByGuid guid"
.IX Item "[ Member : returns IBNode * ] getNodeByGuid guid"
get the node by its guid
.RE
.IP "[ Member : returns IBPort * ] getPortByGuid guid"
.IX Item "[ Member : returns IBPort * ] getPortByGuid guid"
get the port by its guid
.RE
.IP "[ Member : returns void  ] addCable t1 n1 p1 t2 n2 p2 ?width? ?speed?"
.IX Item "[ Member : returns void  ] addCable t1 n1 p1 t2 n2 p2 ?width? ?speed?"
Adds a cable given two sets of node type, node name and port number. Optionally  use a given width and speed for the connection
.RE
.IP "[ Member : returns int  ] parseCables fn"
.IX Item "[ Member : returns int  ] parseCables fn"
Parse the cables file and build the fabric
.RE
.IP "[ Member : returns int  ] parseTopology fn"
.IX Item "[ Member : returns int  ] parseTopology fn"
Parse Topology File and build the fabric
.RE
.IP "[ Member : returns int  ] addLink type1 numPorts1 sysGuid1 nodeGuid1 portGuid1 vend1 devId1 rev1 desc1 lid1 portNum1 type2 numPorts2 sysGuid2 nodeGuid2 portGuid2 vend2 devId2 rev2 desc2 lid2 portNum2 ?width? ?speed?"
.IX Item "[ Member : returns int  ] addLink type1 numPorts1 sysGuid1 nodeGuid1 portGuid1 vend1 devId1 rev1 desc1 lid1 portNum1 type2 numPorts2 sysGuid2 nodeGuid2 portGuid2 vend2 devId2 rev2 desc2 lid2 portNum2 ?width? ?speed?"
Add a link into the fabric \- this will create system and nodes as required.
.RE
.IP "[ Member : returns int  ] parseSubnetLinks fn"
.IX Item "[ Member : returns int  ] parseSubnetLinks fn"
Parse the OpenSM subnet.lst file and build the fabric from it.
.RE
.IP "[ Member : returns int  ] parseFdbFile fn"
.IX Item "[ Member : returns int  ] parseFdbFile fn"
Parse OpenSM \s-1FDB\s0 dump file and fill in the switches \s-1LFT\s0 tables
.RE
.IP "[ Member : returns int  ] parseMCFdbFile fn"
.IX Item "[ Member : returns int  ] parseMCFdbFile fn"
Parse an OpenSM MCFDBs file and set the \s-1MFT\s0 table accordingly
.RE
.IP "[ Member : returns int  ] parsePSLFile fn"
.IX Item "[ Member : returns int  ] parsePSLFile fn"
Parse Path to \s-1SL\s0 mapping file. Each line with:
src_node_guid \s-1DLID\s0 \s-1SL\s0
.PP
Used by credit loop check
.RE
.IP "[ Member : returns int  ] parseSLVLFile fn"
.IX Item "[ Member : returns int  ] parseSLVLFile fn"
Parse \s-1SLVL\s0 tables file. Each line holds:
sw_node_guid in_port out_port 0x(sl0)(sl1) 0x(sl2)(sl3)...
.RE
.IP "[ Member : returns void  ] setLidPort lid p_port"
.IX Item "[ Member : returns void  ] setLidPort lid p_port"
Set a lid port
.RE
.IP "[ Member : returns IBPort * ] getPortByLid lid"
.IX Item "[ Member : returns IBPort * ] getPortByLid lid"
Get a port by lid
.RE
.IP "[ returns IBFabric * ] new_IBFabric"
.IX Item "[ returns IBFabric * ] new_IBFabric"
Construct a new fabric
.RE
.IP "[ returns void  ] delete_IBFabric p_fabric"
.IX Item "[ returns void  ] delete_IBFabric p_fabric"
Destruct a fabric
.SH "IBDM Functions"
.IX Header "IBDM Functions"
This section provide the details about the functions \s-1IBDM\s0 exposes.
The order follows the expected order in a regular \s-1IBDM\s0 flow.
They all return 0 on succes.
.Sh "Subnet Utilities"
.IX Subsection "Subnet Utilities"
The file holds a set of utilities to be run on the subnet to mimic OpenSM initialization and analyze the results:
.RE
.IP "[ returns int  ] ibdmAssignLids p_smNodePort ?lmc?"
.IX Item "[ returns int  ] ibdmAssignLids p_smNodePort ?lmc?"
Assign LIDs with an optional \s-1LMC\s0 (multiple \s-1LID\s0 per port)
.RE
.IP "[ returns int  ] ibdmCalcMinHopTables p_fabric"
.IX Item "[ returns int  ] ibdmCalcMinHopTables p_fabric"
Calculate and populate the MinHopTables required for running OpenSM style routing.
.RE
.IP "[ returns int  ] ibdmCalcUpDnMinHopTbls p_fabric rootNodesNameRex"
.IX Item "[ returns int  ] ibdmCalcUpDnMinHopTbls p_fabric rootNodesNameRex"
Calculate and populate the MinHopTables following Up/Down rule.
.RE
.IP "[ returns int  ] ibdmOsmRoute p_fabric"
.IX Item "[ returns int  ] ibdmOsmRoute p_fabric"
Route the fabric with OpenSM style routing
.RE
.IP "[ returns int  ] ibdmEnhancedRoute p_fabric"
.IX Item "[ returns int  ] ibdmEnhancedRoute p_fabric"
Route the fabric with OpenSM style routing enhanced with better support for \s-1LMC\s0 > 0
.RE
.IP "[ returns int  ] ibdmFatTreeRoute p_fabric rootNodes"
.IX Item "[ returns int  ] ibdmFatTreeRoute p_fabric rootNodes"
Route the fabric using algorithm that fits only full fat trees
.RE
.IP "[ returns int  ] ibdmFatTreeAnalysis p_fabric"
.IX Item "[ returns int  ] ibdmFatTreeAnalysis p_fabric"
Analyze the fabric to see if it is a fat tree and route it if it is
.RE
.IP "[ returns int  ] ibdmVerifyCAtoCARoutes p_fabric"
.IX Item "[ returns int  ] ibdmVerifyCAtoCARoutes p_fabric"
Make sure all (H)CAs are connected to each other based on the \s-1LFT\s0 settings
.RE
.IP "[ returns int  ] ibdmVerifyAllPaths p_fabric"
.IX Item "[ returns int  ] ibdmVerifyAllPaths p_fabric"
Make sure all Switches and (H)CAs are connected to each other based on the \s-1LFT\s0 settings
.RE
.IP "[ returns int  ] ibdmAnalyzeLoops p_fabric"
.IX Item "[ returns int  ] ibdmAnalyzeLoops p_fabric"
A rigorous check for credit loops. This algorithm does a full and accurate check but its reporting of credit loop paths is hard to interpret. If you know the roots of the tree (or the tree is symmetrical) it is preferable to use the ibdmReportNonUpDownCa2CaPaths
.RE
.IP "[ returns list_pnode  ] ibdmFindSymmetricalTreeRoots p_fabric"
.IX Item "[ returns list_pnode  ] ibdmFindSymmetricalTreeRoots p_fabric"
Analyze the tree topology and find the roots of the tree based on its symmetry
.RE
.IP "[ returns list_pnode  ] ibdmFindRootNodesByMinHop p_fabric"
.IX Item "[ returns list_pnode  ] ibdmFindRootNodesByMinHop p_fabric"
Based on the MinHopTable find the roots of the tree. A 5% assymetry is allowed
.RE
.IP "[ returns int  ] ibdmRankFabricByRoots p_fabric rootNodes"
.IX Item "[ returns int  ] ibdmRankFabricByRoots p_fabric rootNodes"
Given the list of root nodes (names) rank the nodes (root = 0)
.RE
.IP "[ returns int  ] ibdmReportNonUpDownCa2CaPaths p_fabric rootNodes"
.IX Item "[ returns int  ] ibdmReportNonUpDownCa2CaPaths p_fabric rootNodes"
Analyze the routes to make sure Up/Down rule is maintained
.RE
.IP "[ returns int  ] ibdmCheckMulticastGroups p_fabric"
.IX Item "[ returns int  ] ibdmCheckMulticastGroups p_fabric"
Verify connectivity of multicast routing
.RE
.IP "[ returns int  ] ibdmCheckFabricMCGrpsForCreditLoopPotential p_fabric rootNodes"
.IX Item "[ returns int  ] ibdmCheckFabricMCGrpsForCreditLoopPotential p_fabric rootNodes"
Analyze multicast routing to make sure it obeys Up/Down rule
.RE
.IP "[ returns int  ] ibdmLinkCoverageAnalysis p_fabric rootNodes"
.IX Item "[ returns int  ] ibdmLinkCoverageAnalysis p_fabric rootNodes"
Prepare a schedule for transmission from a set of sources to destinations such that in each stage there are no links that are over subscribed and after all stages all the links of the fabric were excersized
.Sh "Tracing Utilities"
.IX Subsection "Tracing Utilities"
These functions allows tracing paths reporting back the visited nodes
.RE
.IP "[ returns int  ] ibdmTraceDRPathRoute p_smNodePort drPathPortNums"
.IX Item "[ returns int  ] ibdmTraceDRPathRoute p_smNodePort drPathPortNums"
Trace a directed route path from the given port
.RE
.IP "[ returns int  ] ibdmTraceRouteByMinHops p_fabric slid dlid"
.IX Item "[ returns int  ] ibdmTraceRouteByMinHops p_fabric slid dlid"
Trace a path along the MinHop from the source to destination LIDs
.RE
.IP "[ returns int  ] ibdmTraceRouteByLFT p_fabric slid dlid hops p_nodesList"
.IX Item "[ returns int  ] ibdmTraceRouteByLFT p_fabric slid dlid hops p_nodesList"
Trace a path following the \s-1LFT\s0 updating the hops and node list variables
.Sh "Topology Matching Utilities"
.IX Subsection "Topology Matching Utilities"
The following utilities matches two fabrics providing both missmatch messages and a unified fabric
.RE
.IP "[ returns int  ] ibdmMatchFabrics p_spec_fabric p_discovered_fabric anchorNodeName anchorPortNum anchorPortGuid"
.IX Item "[ returns int  ] ibdmMatchFabrics p_spec_fabric p_discovered_fabric anchorNodeName anchorPortNum anchorPortGuid"
Match a topology based fabric with a discovered one starting at the enchor port
.RE
.IP "[ returns int  ] ibdmBuildMergedFabric p_spec_fabric p_discovered_fabric p_merged_fabric"
.IX Item "[ returns int  ] ibdmBuildMergedFabric p_spec_fabric p_discovered_fabric p_merged_fabric"
After matching using ibdmMatchFabrics populate the \*(L"merged fabric\*(R" with information merged for the matched nodes
.Sh "Congestion Analysis Utilities"
.IX Subsection "Congestion Analysis Utilities"
Provide ability to track and report link oversubscription
.RE
.IP "[ returns int  ] ibdmCongInit p_fabric"
.IX Item "[ returns int  ] ibdmCongInit p_fabric"
Initialize the tracking system
.RE
.IP "[ returns int  ] ibdmCongCleanup p_fabric"
.IX Item "[ returns int  ] ibdmCongCleanup p_fabric"
Cleanup the counters and deallocate
.RE
.IP "[ returns int  ] ibdmCongClear p_fabric"
.IX Item "[ returns int  ] ibdmCongClear p_fabric"
Cleanup counters
.RE
.IP "[ returns int  ] ibdmCongTrace p_fabric srcLid dstLid"
.IX Item "[ returns int  ] ibdmCongTrace p_fabric srcLid dstLid"
Trace a path between the LIDs updating link usage info
.RE
.IP "[ returns int  ] ibdmCongReport p_fabric"
.IX Item "[ returns int  ] ibdmCongReport p_fabric"
Report the resulting congestion information
.RE
.IP "[ returns int  ] ibdmCongDump p_fabric"
.IX Item "[ returns int  ] ibdmCongDump p_fabric"
Dump all congestion tracking info
.SH "AUTHOR"
.IX Header "AUTHOR"
Eitan Zahavi, Mellanox Technologies \s-1LTD\s0, eitan@mellanox.co.il
