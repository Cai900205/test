.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IBMGTSIM 1"
.TH IBMGTSIM 1 "2008-06-16" "IBMGTSIM 1.0" "IB MANAGEMENT SIMULATOR"
.SH "NAME"
\&\fBIBMgtSim\fR \- Infiniband Management Simulator
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
IBMgtSim [\-h] [\-V mod\-verb\-pair\-list] [\-l log\-file] [\-p server\-port]
  [\-w num\-threads] [\-f flow\-tcl\-file] [\-s seed] \-t topology
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Simulates the Fabric as defined by the given topology file and start a server to handle \s-1MAD\s0 requests from clients like OpenSM.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.RE
.IP "\-t topology"
.IX Item "-t topology"
A topology file describing the fabric to be simulated (see \fBibdm-topo-file\fR)
.SH "OPTIONS"
.IX Header "OPTIONS"
.RE
.IP "\-s seed"
.IX Item "-s seed"
The seed to be used for random number generation.
.RE
.IP "\-f flow-tcl-file"
.IX Item "-f flow-tcl-file"
A tcl file to be sourced after the fabric is setup.
.RE
.IP "\-l log-file"
.IX Item "-l log-file"
Set the log file of the simulator (default is /tmp/ibsim.log)
.RE
.IP "\-p server-port"
.IX Item "-p server-port"
Set the port number the server attaches to (default 46517)
.RE
.IP "\-w num-threads"
.IX Item "-w num-threads"
The number of threads processing the mads
.RE
.IP "\-V <module\-verbosity\-pair\-list>"
.IX Item "-V <module-verbosity-pair-list>"
Provides a fine grain control over the log file verbosity. Given list of pairs of simulator software module names and their verbosity levels \- every module is separatly controlled. The first value (missing module name) is controlling the default verbosity for all un-explicitly set modules.
.Sp
.RS 4
Current Verbosity Levels:
.Sp
.Vb 13
\& MsgShowFatal  = 0x01;
\& MsgShowError  = 0x02;
\& MsgShowWarning= 0x04;
\& MsgShowInfo   = 0x08;
\& MsgShowVerbose= 0x10;
\& MsgShowContext= 0x20;
\& MsgShowSource = 0x40;
\& MsgShowTime   = 0x80;
\& MsgShowModule = 0x100;
\& MsgShowMads   = 0x200;
\& MsgShowFrames = 0x400;
\& MsgShowAll    = 0xffff;
\& MsgDefault    = 0x62f;
.Ve
.Sp
Software Modules:
.Sp
client, server, dispatcher, node, sma, lftMad, mftMad, vlArbMad, pKeyMad, portInfoMad
.Sp
Examples \-V flag values might be:
.Sp
.Vb 1
\& -V 0xffff = Full verbosity on all modules
.Ve
.Sp
.Vb 3
\& -V '0x3 server 0x6f2 sma 0xffff' = Only fatal and error for all modules
\&     full verbosity for the SMA module and default verbosity for the
\&     Server module.
.Ve
.RE
.RE
.IP "\-h"
.IX Item "-h"
This help message
.SH "AUTHOR"
.IX Header "AUTHOR"
Eitan Zahavi, Mellanox Technologies \s-1LTD\s0, eitan@mellanox.co.il
