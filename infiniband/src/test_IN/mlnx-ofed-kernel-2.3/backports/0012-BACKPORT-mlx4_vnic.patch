From: Vladimir Sokolovsky <vlad@mellanox.com>
Subject: [PATCH] BACKPORT: mlx4_vnic

Signed-off-by: Vladimir Sokolovsky <vlad@mellanox.com>
---
 drivers/net/ethernet/mellanox/mlx4_vnic/vnic.h     |   8 ++
 .../mellanox/mlx4_vnic/vnic_data_ethtool.c         | 106 +++++++++++++++++++++
 .../net/ethernet/mellanox/mlx4_vnic/vnic_data_ib.c |  15 ++-
 .../ethernet/mellanox/mlx4_vnic/vnic_data_netdev.c |  64 ++++++++++++-
 .../net/ethernet/mellanox/mlx4_vnic/vnic_data_rx.c |  30 +++++-
 5 files changed, 218 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic.h b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic.h
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic.h
+++ b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic.h
@@ -304,6 +304,7 @@ extern struct ib_sa_client vnic_sa_client;
 #ifndef _BP_NETDEV_NO_TMQ /* >= 2.6.27 */
 #define VNIC_TXQ_GET_HASH(_skb, _max)	(skb_get_queue_mapping(_skb))
 #define VNIC_TXQ_ALLOC_NETDEV(sz, nm, sp, qm) alloc_netdev_mq(sz, nm, sp, qm)
+#if !defined (CONFIG_COMPAT_DISABLE_REAL_NUM_TXQ)
 #define VNIC_TXQ_SET_ACTIVE(login, num) \
             do { \
                 rtnl_lock(); \
@@ -311,6 +312,13 @@ extern struct ib_sa_client vnic_sa_client;
                 rtnl_unlock(); \
                 login->real_tx_rings_num = login->ndo_tx_rings_num = num; \
             } while (0)
+#else
+#define VNIC_TXQ_SET_ACTIVE(login, num) \
+            do { \
+                login->dev->real_num_tx_queues = num; \
+                login->real_tx_rings_num = login->ndo_tx_rings_num = num; \
+            } while (0)
+#endif
 #define VNIC_TXQ_GET_ACTIVE(login)	(login->real_tx_rings_num)
 #define VNIC_TXQ_GET(tx_res)		netdev_get_tx_queue(tx_res->login->dev, tx_res->index)
 #define VNIC_TXQ_STOP(tx_res) 		netif_tx_stop_queue(VNIC_TXQ_GET(tx_res))
diff --git a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ethtool.c b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ethtool.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ethtool.c
+++ b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ethtool.c
@@ -147,6 +147,91 @@ static int vnic_set_coalesce(struct net_device *dev,
 	return 0;
 }
 
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0))
+
+static u32 vnic_get_rx_csum(struct net_device *dev)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
+
+	return login->rx_csum;
+}
+
+static int vnic_set_rx_csum(struct net_device *dev, u32 data)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
+
+	login->rx_csum = (data != 0);
+
+	return 0;
+}
+
+static u32 vnic_get_tx_csum(struct net_device *dev)
+{
+	return (dev->features & NETIF_F_IP_CSUM) != 0;
+}
+
+static int vnic_set_tx_csum(struct net_device *dev, u32 data)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
+
+	/* check capability bit of SWP */
+	if (!(login->port->dev->mdev->dev->caps.flags & MLX4_DEV_CAP_FLAG_UD_SWP))
+		return -EPERM;
+
+	if (data)
+		dev->features |= NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM;
+	else
+		dev->features &= ~(NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM);
+
+	return 0;
+}
+
+static u32 vnic_get_tso(struct net_device *dev)
+{
+	return (dev->features & NETIF_F_TSO) != 0;
+}
+
+static int vnic_set_tso(struct net_device *dev, u32 data)
+{
+	if (data)
+		dev->features |= (NETIF_F_TSO | NETIF_F_TSO6);
+	else
+		dev->features &= ~(NETIF_F_TSO | NETIF_F_TSO6);
+
+	return 0;
+}
+
+#ifndef _BP_ETHTOOL_NO_GSFLAGS
+#if !(defined(NETIF_F_GRO) && !defined(_BP_NO_GRO))
+static int vnic_set_flags(struct net_device *dev, u32 data)
+{
+	int rc = 0, changed = 0;
+
+	if (data & ~ETH_FLAG_LRO)
+		return -EOPNOTSUPP;
+
+	if (data & ETH_FLAG_LRO) {
+		if (vnic_lro_num == 0)
+			return -EOPNOTSUPP;
+		if (!(dev->features & NETIF_F_LRO))
+			changed = 1;
+	} else if (dev->features & NETIF_F_LRO) {
+		changed = 1;
+	}
+
+	if (changed) {
+		dev->features ^= NETIF_F_LRO;
+		/* stop/start interface to cleanup any pending LRO sessions */
+		rc = vnic_restart(dev);
+	}
+
+	return rc;
+}
+#endif
+#endif
+
+#endif
+
 static int vnic_get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
 	cmd->autoneg = AUTONEG_DISABLE;
@@ -324,5 +409,26 @@ static struct ethtool_ops vnic_ethtool_ops = {
 	.get_wol = vnic_get_wol,
 	.get_ringparam = vnic_get_ringparam,
 	.set_ringparam = NULL,
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0))
+	.get_sg = ethtool_op_get_sg,
+	.set_sg = ethtool_op_set_sg,
+	.get_tx_csum = vnic_get_tx_csum,
+	.set_tx_csum = vnic_set_tx_csum,
+	.get_rx_csum = vnic_get_rx_csum,
+	.set_rx_csum = vnic_set_rx_csum,
+	.get_ufo = ethtool_op_get_ufo,
+	.set_ufo = ethtool_op_set_ufo,
+#ifndef _BP_ETHTOOL_NO_GSFLAGS
+	.get_flags = ethtool_op_get_flags,
+#if !(defined(NETIF_F_GRO) && !defined(_BP_NO_GRO))
+	.set_flags = vnic_set_flags,
+#endif
+
+#ifdef NETIF_F_TSO
+	.get_tso = vnic_get_tso,
+	.set_tso = vnic_set_tso,
+#endif
+#endif
+#endif
 };
 
diff --git a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ib.c b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ib.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ib.c
+++ b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_ib.c
@@ -396,10 +396,13 @@ static void vnic_ib_handle_rx_wc(struct vnic_login *login,
 	ib_dma_sync_single_for_cpu(ib_device,
 				   ring->rx_info[wr_id].dma_addr[0] + IB_GRH_BYTES,
 				   MAX_HEADER_SIZE, DMA_FROM_DEVICE);
-
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 	va = page_address(ring->rx_info[wr_id].frags[0].page.p) +
 		ring->rx_info[wr_id].frags[0].page_offset + IB_GRH_BYTES;
-
+#else
+	va = page_address(ring->rx_info[wr_id].frags[0].page) +
+		ring->rx_info[wr_id].frags[0].page_offset + IB_GRH_BYTES;
+#endif
 	/* check EoIB header signature and version */
 	eoib_hdr = (struct eoibhdr *)va;
 	if (unlikely(VNIC_EOIB_HDR_GET_SIG(eoib_hdr) != VNIC_EOIB_HDR_SIG ||
@@ -515,8 +518,10 @@ static void vnic_ib_handle_rx_wc(struct vnic_login *login,
 		frags[0].size -= page_offset;
 
 		/* processed for LRO */
+#if defined(CONFIG_COMPAT_LRO_ENABLED)
 		lro_receive_frags(&rx_res->lro, frags, packet_length,
 				  packet_length, NULL, 0);
+#endif
 		VNIC_STATS_INC(login->port_stats.lro_aggregated);
 
 		goto rx_repost;
@@ -1360,9 +1365,15 @@ static int vnic_dma_map_tx(struct ib_device *ca, struct vnic_tx_buf *tx_req)
 
 	for (i = 0; i < shinfo->nr_frags; ++i) {
 		skb_frag_t *frag = &shinfo->frags[i];
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 		mapping[i + off] = ib_dma_map_page(ca, frag->page.p,
 						   frag->page_offset,
 						   frag->size, DMA_TO_DEVICE);
+#else
+		mapping[i + off] = ib_dma_map_page(ca, frag->page,
+						   frag->page_offset,
+						   frag->size, DMA_TO_DEVICE);
+#endif
 		if (unlikely(ib_dma_mapping_error(ca, mapping[i + off])))
 			goto partial_error;
 	}
diff --git a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_netdev.c b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_netdev.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_netdev.c
+++ b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_netdev.c
@@ -34,7 +34,24 @@
 #include "vnic_data.h"
 
 extern struct net_device_stats *mlx4_vnic_stats_func_container(struct net_device *n);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,10,0))
+static int mlx4_vnic_vlan_rx_add_vid(struct net_device *dev, __be16 proto,
+				     unsigned short vid)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
 
+	vnic_dbg_data(login->name, "add VLAN:%d was called\n", vid);
+	return 0;
+}
+static int mlx4_vnic_vlan_rx_kill_vid(struct net_device *dev, __be16 proto,
+				      unsigned short vid)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
+
+	vnic_dbg_data(login->name, "Kill VID:%d was called\n", vid);
+	return 0;
+}
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
 static int mlx4_vnic_vlan_rx_add_vid(struct net_device *dev, unsigned short vid)
 {
 	struct vnic_login *login = vnic_netdev_priv(dev);
@@ -50,6 +67,21 @@ static int mlx4_vnic_vlan_rx_kill_vid(struct net_device *dev, unsigned short vid
 	vnic_dbg_data(login->name, "Kill VID:%d was called\n", vid);
 	return 0;
 }
+#else
+static void mlx4_vnic_vlan_rx_add_vid(struct net_device *dev, unsigned short vid)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
+
+	vnic_dbg_data(login->name, "add VLAN:%d was called\n", vid);
+}
+
+static void mlx4_vnic_vlan_rx_kill_vid(struct net_device *dev, unsigned short vid)
+{
+	struct vnic_login *login = vnic_netdev_priv(dev);
+
+	vnic_dbg_data(login->name, "Kill VID:%d was called\n", vid);
+}
+#endif
 
 void vnic_carrier_update(struct vnic_login *login)
 {
@@ -808,7 +840,16 @@ static void vnic_tx_timeout(struct net_device *dev)
 }
 
 #ifndef _BP_NETDEV_NO_TMQ
+#ifdef CONFIG_COMPAT_SELECT_QUEUE_ACCEL
+u16 vnic_select_queue(struct net_device *dev, struct sk_buff *skb,
+#ifdef CONFIG_COMPAT_SELECT_QUEUE_FALLBACK
+		      void *accel_priv, select_queue_fallback_t fallback)
+#else
+		      void *accel_priv)
+#endif
+#else /* CONFIG_COMPAT_SELECT_QUEUE_ACCEL */
 u16 vnic_select_queue(struct net_device *dev, struct sk_buff *skb)
+#endif
 {
 	/* Notes:
 	 * - In kernel 2.6.32 the skb->mac_header 0x1a is not set when
@@ -834,7 +875,11 @@ static struct net_device_ops vnic_netdev_ops = {
 	.ndo_stop = vnic_stop,
 	.ndo_start_xmit = vnic_tx,
 	.ndo_get_stats = vnic_get_stats,
-	.ndo_set_rx_mode = vnic_set_multicast_list,
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
+        .ndo_set_rx_mode = vnic_set_multicast_list,
+#else
+        .ndo_set_multicast_list = vnic_set_multicast_list,
+#endif
 	.ndo_change_mtu = vnic_change_mtu,
 	.ndo_tx_timeout = vnic_tx_timeout,
 	.ndo_set_mac_address = vnic_set_mac,
@@ -884,7 +929,11 @@ static int vnic_get_frag_header(struct skb_frag_struct *frags, void **mac_hdr,
 				u64 *hdr_flags, void *priv)
 {
 	struct iphdr *iph;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 	*mac_hdr = page_address(frags->page.p) + frags->page_offset;
+#else
+	*mac_hdr = page_address(frags->page) + frags->page_offset;
+#endif
 	*ip_hdr = iph = (struct iphdr *)(*mac_hdr + ETH_HLEN);
 	*tcpudp_hdr = (struct tcphdr *)(iph + (iph->ihl << 2));
 	*hdr_flags = LRO_IPV4 | LRO_TCP;
@@ -1018,11 +1067,22 @@ struct net_device *vnic_alloc_netdev(struct vnic_port *port)
 
 	vnic_set_ethtool_ops(dev);
 	/* init ethtool */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
 	dev->hw_features = NETIF_F_SG | NETIF_F_IP_CSUM | NETIF_F_IPV6_CSUM;
 	dev->hw_features |= NETIF_F_RXCSUM | NETIF_F_RXHASH;
 	dev->hw_features |= NETIF_F_TSO | NETIF_F_TSO6;
 	dev->features |= dev->hw_features;
-
+#else
+	do {
+		login->dev->ethtool_ops->set_rx_csum(login->dev, 1);
+		if (login->dev->ethtool_ops->set_tx_csum(login->dev, 1))
+			break;
+		if (login->dev->ethtool_ops->set_sg(login->dev, 1))
+			break;
+		if (login->dev->ethtool_ops->set_tso(login->dev, 1))
+			break;
+	} while (0);
+#endif
 	/* init NAPI (must be before LRO init) */
 	login->napi_num = login->rx_rings_num;
 	for (i = 0; i < login->napi_num; ++i) {
diff --git a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_rx.c b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_rx.c
index xxxxxxx..xxxxxxx xxxxxx
--- a/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_rx.c
+++ b/drivers/net/ethernet/mellanox/mlx4_vnic/vnic_data_rx.c
@@ -33,6 +33,12 @@
 #include "vnic.h"
 #include "vnic_data.h"
 
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0))
+#define VNIC_QUEUE_STATE_OFF QUEUE_STATE_ANY_XOFF
+#else
+#define VNIC_QUEUE_STATE_OFF __QUEUE_STATE_XOFF
+#endif
+
 static inline void free_single_frag(struct vnic_rx_ring *ring, int e,int i)
 {
 		ib_dma_unmap_single(ring->port->dev->ca,
@@ -40,7 +46,11 @@ static inline void free_single_frag(struct vnic_rx_ring *ring, int e,int i)
 			ring->frag_info[i].frag_size,
 			PCI_DMA_FROMDEVICE);
 		ring->rx_info[e].dma_addr[i] = 0;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 		put_page(ring->rx_info[e].frags[i].page.p);
+#else
+		put_page(ring->rx_info[e].frags[i].page);
+#endif
 }
 
 #ifndef _BP_NETDEV_NO_TMQ
@@ -71,7 +81,7 @@ unlock:
 	for (--i; i >= 0; --i) {
 		struct netdev_queue *txq = netdev_get_tx_queue(dev, i);
 		clear_bit(__QUEUE_STATE_FROZEN, &txq->state);
-		if (!test_bit(QUEUE_STATE_ANY_XOFF, &txq->state))
+		if (!test_bit(VNIC_QUEUE_STATE_OFF, &txq->state))
 			__netif_schedule(txq->qdisc);
 	}
 	spin_unlock(&dev->tx_global_lock);
@@ -283,20 +293,34 @@ static int vnic_alloc_frag(struct vnic_rx_ring *ring,
 			   ring->need_refill = 1; */
 			return -ENOMEM;
 		}
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 		skbf.page.p = page_alloc->page;
+#else
+		skbf.page =  page_alloc->page;
+#endif
 		skbf.page_offset = page_alloc->offset;
 	} else {
 		decision = 1;
 		page = page_alloc->page;
 		get_page(page);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 		skbf.page.p = page;
+#else
+		skbf.page = page;
+#endif
 		skbf.page_offset = page_alloc->offset;
 	}
 
 	skbf.size = frag_info->frag_size;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 	dma = ib_dma_map_single(ib_device, page_address(skbf.page.p) +
 			     skbf.page_offset, frag_info->frag_size,
 			     PCI_DMA_FROMDEVICE);
+#else
+	dma = ib_dma_map_single(ib_device, page_address(skbf.page) +
+			     skbf.page_offset, frag_info->frag_size,
+			     PCI_DMA_FROMDEVICE);
+#endif
 	if (unlikely(ib_dma_mapping_error(ib_device, dma))) {
 		vnic_dbg_data(ring->port->name,
 			      "ib_dma_map_single len %d failed\n",
@@ -506,7 +530,11 @@ fail:
 	 * the descriptor) of this packet; remaining fragments are reused... */
 	while (nr > 0) {
 		nr--;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,2,0)
 		put_page(skb_frags_rx[nr].page.p);
+#else
+		put_page(skb_frags_rx[nr].page);
+#endif
 	}
 
 	return 0;
